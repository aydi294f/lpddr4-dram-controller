// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : dram_ctrl.v
// Device     : 
// LiteX sha1 : 8fa242f3
// Date       : 2025-07-21 19:25:53
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module dram_ctrl (
    input  wire          clk,
    input  wire          rst,
    output wire          dfi_cke_p0,
    output wire          dfi_reset_n_p0,
    output wire          dfi_mode_2n_p0,
    input  wire          dfi_alert_n_w0,
    output wire   [16:0] dfi_address_p0,
    output wire    [5:0] dfi_bank_p0,
    output wire          dfi_cas_n_p0,
    output wire          dfi_cs_n_p0,
    output wire          dfi_ras_n_p0,
    output wire          dfi_act_n_p0,
    output wire          dfi_odt_p0,
    output wire          dfi_we_n_p0,
    output wire   [31:0] dfi_wrdata_p0,
    output wire          dfi_wrdata_en_p0,
    output wire    [3:0] dfi_wrdata_mask_p0,
    output wire          dfi_rddata_en_p0,
    input  wire   [31:0] dfi_rddata_w0,
    input  wire          dfi_rddata_valid_w0,
    output wire          dfi_cke_p1,
    output wire          dfi_reset_n_p1,
    output wire          dfi_mode_2n_p1,
    input  wire          dfi_alert_n_w1,
    output wire   [16:0] dfi_address_p1,
    output wire    [5:0] dfi_bank_p1,
    output wire          dfi_cas_n_p1,
    output wire          dfi_cs_n_p1,
    output wire          dfi_ras_n_p1,
    output wire          dfi_act_n_p1,
    output wire          dfi_odt_p1,
    output wire          dfi_we_n_p1,
    output wire   [31:0] dfi_wrdata_p1,
    output wire          dfi_wrdata_en_p1,
    output wire    [3:0] dfi_wrdata_mask_p1,
    output wire          dfi_rddata_en_p1,
    input  wire   [31:0] dfi_rddata_w1,
    input  wire          dfi_rddata_valid_w1,
    output wire          dfi_cke_p2,
    output wire          dfi_reset_n_p2,
    output wire          dfi_mode_2n_p2,
    input  wire          dfi_alert_n_w2,
    output wire   [16:0] dfi_address_p2,
    output wire    [5:0] dfi_bank_p2,
    output wire          dfi_cas_n_p2,
    output wire          dfi_cs_n_p2,
    output wire          dfi_ras_n_p2,
    output wire          dfi_act_n_p2,
    output wire          dfi_odt_p2,
    output wire          dfi_we_n_p2,
    output wire   [31:0] dfi_wrdata_p2,
    output wire          dfi_wrdata_en_p2,
    output wire    [3:0] dfi_wrdata_mask_p2,
    output wire          dfi_rddata_en_p2,
    input  wire   [31:0] dfi_rddata_w2,
    input  wire          dfi_rddata_valid_w2,
    output wire          dfi_cke_p3,
    output wire          dfi_reset_n_p3,
    output wire          dfi_mode_2n_p3,
    input  wire          dfi_alert_n_w3,
    output wire   [16:0] dfi_address_p3,
    output wire    [5:0] dfi_bank_p3,
    output wire          dfi_cas_n_p3,
    output wire          dfi_cs_n_p3,
    output wire          dfi_ras_n_p3,
    output wire          dfi_act_n_p3,
    output wire          dfi_odt_p3,
    output wire          dfi_we_n_p3,
    output wire   [31:0] dfi_wrdata_p3,
    output wire          dfi_wrdata_en_p3,
    output wire    [3:0] dfi_wrdata_mask_p3,
    output wire          dfi_rddata_en_p3,
    input  wire   [31:0] dfi_rddata_w3,
    input  wire          dfi_rddata_valid_w3,
    output wire          dfi_cke_p4,
    output wire          dfi_reset_n_p4,
    output wire          dfi_mode_2n_p4,
    input  wire          dfi_alert_n_w4,
    output wire   [16:0] dfi_address_p4,
    output wire    [5:0] dfi_bank_p4,
    output wire          dfi_cas_n_p4,
    output wire          dfi_cs_n_p4,
    output wire          dfi_ras_n_p4,
    output wire          dfi_act_n_p4,
    output wire          dfi_odt_p4,
    output wire          dfi_we_n_p4,
    output wire   [31:0] dfi_wrdata_p4,
    output wire          dfi_wrdata_en_p4,
    output wire    [3:0] dfi_wrdata_mask_p4,
    output wire          dfi_rddata_en_p4,
    input  wire   [31:0] dfi_rddata_w4,
    input  wire          dfi_rddata_valid_w4,
    output wire          dfi_cke_p5,
    output wire          dfi_reset_n_p5,
    output wire          dfi_mode_2n_p5,
    input  wire          dfi_alert_n_w5,
    output wire   [16:0] dfi_address_p5,
    output wire    [5:0] dfi_bank_p5,
    output wire          dfi_cas_n_p5,
    output wire          dfi_cs_n_p5,
    output wire          dfi_ras_n_p5,
    output wire          dfi_act_n_p5,
    output wire          dfi_odt_p5,
    output wire          dfi_we_n_p5,
    output wire   [31:0] dfi_wrdata_p5,
    output wire          dfi_wrdata_en_p5,
    output wire    [3:0] dfi_wrdata_mask_p5,
    output wire          dfi_rddata_en_p5,
    input  wire   [31:0] dfi_rddata_w5,
    input  wire          dfi_rddata_valid_w5,
    output wire          dfi_cke_p6,
    output wire          dfi_reset_n_p6,
    output wire          dfi_mode_2n_p6,
    input  wire          dfi_alert_n_w6,
    output wire   [16:0] dfi_address_p6,
    output wire    [5:0] dfi_bank_p6,
    output wire          dfi_cas_n_p6,
    output wire          dfi_cs_n_p6,
    output wire          dfi_ras_n_p6,
    output wire          dfi_act_n_p6,
    output wire          dfi_odt_p6,
    output wire          dfi_we_n_p6,
    output wire   [31:0] dfi_wrdata_p6,
    output wire          dfi_wrdata_en_p6,
    output wire    [3:0] dfi_wrdata_mask_p6,
    output wire          dfi_rddata_en_p6,
    input  wire   [31:0] dfi_rddata_w6,
    input  wire          dfi_rddata_valid_w6,
    output wire          dfi_cke_p7,
    output wire          dfi_reset_n_p7,
    output wire          dfi_mode_2n_p7,
    input  wire          dfi_alert_n_w7,
    output wire   [16:0] dfi_address_p7,
    output wire    [5:0] dfi_bank_p7,
    output wire          dfi_cas_n_p7,
    output wire          dfi_cs_n_p7,
    output wire          dfi_ras_n_p7,
    output wire          dfi_act_n_p7,
    output wire          dfi_odt_p7,
    output wire          dfi_we_n_p7,
    output wire   [31:0] dfi_wrdata_p7,
    output wire          dfi_wrdata_en_p7,
    output wire    [3:0] dfi_wrdata_mask_p7,
    output wire          dfi_rddata_en_p7,
    input  wire   [31:0] dfi_rddata_w7,
    input  wire          dfi_rddata_valid_w7,
    output wire          dfi_init_start,
    input  wire          dfi_init_complete,
    output wire          mem_rst,
    output wire          init_done,
    output wire          init_error,
    input  wire   [29:0] wb_ctrl_adr,
    input  wire   [31:0] wb_ctrl_dat_w,
    output wire   [31:0] wb_ctrl_dat_r,
    input  wire    [3:0] wb_ctrl_sel,
    input  wire          wb_ctrl_cyc,
    input  wire          wb_ctrl_stb,
    output wire          wb_ctrl_ack,
    input  wire          wb_ctrl_we,
    input  wire    [2:0] wb_ctrl_cti,
    input  wire    [1:0] wb_ctrl_bte,
    output wire          wb_ctrl_err,
    input  wire          user_port_axi_0_awvalid,
    output wire          user_port_axi_0_awready,
    input  wire   [28:0] user_port_axi_0_awaddr,
    input  wire    [1:0] user_port_axi_0_awburst,
    input  wire    [7:0] user_port_axi_0_awlen,
    input  wire    [3:0] user_port_axi_0_awsize,
    input  wire    [7:0] user_port_axi_0_awid,
    input  wire          user_port_axi_0_wvalid,
    output wire          user_port_axi_0_wready,
    input  wire          user_port_axi_0_wlast,
    input  wire    [3:0] user_port_axi_0_wstrb,
    input  wire   [31:0] user_port_axi_0_wdata,
    output wire          user_port_axi_0_bvalid,
    input  wire          user_port_axi_0_bready,
    output wire    [1:0] user_port_axi_0_bresp,
    output wire    [7:0] user_port_axi_0_bid,
    input  wire          user_port_axi_0_arvalid,
    output wire          user_port_axi_0_arready,
    input  wire   [28:0] user_port_axi_0_araddr,
    input  wire    [1:0] user_port_axi_0_arburst,
    input  wire    [7:0] user_port_axi_0_arlen,
    input  wire    [3:0] user_port_axi_0_arsize,
    input  wire    [7:0] user_port_axi_0_arid,
    output wire          user_port_axi_0_rvalid,
    input  wire          user_port_axi_0_rready,
    output wire          user_port_axi_0_rlast,
    output wire    [1:0] user_port_axi_0_rresp,
    output wire   [31:0] user_port_axi_0_rdata,
    output wire    [7:0] user_port_axi_0_rid
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          sys_clk;
wire          sys_rst;
reg           main_ddrphy_rst_storage = 1'd0;
reg           main_ddrphy_rst_re = 1'd0;
reg     [2:0] main_ddrphy_rdphase_storage = 3'd6;
reg           main_ddrphy_rdphase_re = 1'd0;
reg     [2:0] main_ddrphy_wrphase_storage = 3'd6;
reg           main_ddrphy_wrphase_re = 1'd0;
wire          main_ddrphy_dfi_p0_cke;
wire          main_ddrphy_dfi_p0_reset_n;
wire          main_ddrphy_dfi_p0_mode_2n;
wire          main_ddrphy_dfi_p0_alert_n;
wire   [16:0] main_ddrphy_dfi_p0_address;
wire    [5:0] main_ddrphy_dfi_p0_bank;
wire          main_ddrphy_dfi_p0_cas_n;
wire          main_ddrphy_dfi_p0_cs_n;
wire          main_ddrphy_dfi_p0_ras_n;
wire          main_ddrphy_dfi_p0_act_n;
wire          main_ddrphy_dfi_p0_odt;
wire          main_ddrphy_dfi_p0_we_n;
wire   [31:0] main_ddrphy_dfi_p0_wrdata;
wire          main_ddrphy_dfi_p0_wrdata_en;
wire    [3:0] main_ddrphy_dfi_p0_wrdata_mask;
wire          main_ddrphy_dfi_p0_rddata_en;
wire   [31:0] main_ddrphy_dfi_p0_rddata;
wire          main_ddrphy_dfi_p0_rddata_valid;
wire          main_ddrphy_dfi_p1_cke;
wire          main_ddrphy_dfi_p1_reset_n;
wire          main_ddrphy_dfi_p1_mode_2n;
wire          main_ddrphy_dfi_p1_alert_n;
wire   [16:0] main_ddrphy_dfi_p1_address;
wire    [5:0] main_ddrphy_dfi_p1_bank;
wire          main_ddrphy_dfi_p1_cas_n;
wire          main_ddrphy_dfi_p1_cs_n;
wire          main_ddrphy_dfi_p1_ras_n;
wire          main_ddrphy_dfi_p1_act_n;
wire          main_ddrphy_dfi_p1_odt;
wire          main_ddrphy_dfi_p1_we_n;
wire   [31:0] main_ddrphy_dfi_p1_wrdata;
wire          main_ddrphy_dfi_p1_wrdata_en;
wire    [3:0] main_ddrphy_dfi_p1_wrdata_mask;
wire          main_ddrphy_dfi_p1_rddata_en;
wire   [31:0] main_ddrphy_dfi_p1_rddata;
wire          main_ddrphy_dfi_p1_rddata_valid;
wire          main_ddrphy_dfi_p2_cke;
wire          main_ddrphy_dfi_p2_reset_n;
wire          main_ddrphy_dfi_p2_mode_2n;
wire          main_ddrphy_dfi_p2_alert_n;
wire   [16:0] main_ddrphy_dfi_p2_address;
wire    [5:0] main_ddrphy_dfi_p2_bank;
wire          main_ddrphy_dfi_p2_cas_n;
wire          main_ddrphy_dfi_p2_cs_n;
wire          main_ddrphy_dfi_p2_ras_n;
wire          main_ddrphy_dfi_p2_act_n;
wire          main_ddrphy_dfi_p2_odt;
wire          main_ddrphy_dfi_p2_we_n;
wire   [31:0] main_ddrphy_dfi_p2_wrdata;
wire          main_ddrphy_dfi_p2_wrdata_en;
wire    [3:0] main_ddrphy_dfi_p2_wrdata_mask;
wire          main_ddrphy_dfi_p2_rddata_en;
wire   [31:0] main_ddrphy_dfi_p2_rddata;
wire          main_ddrphy_dfi_p2_rddata_valid;
wire          main_ddrphy_dfi_p3_cke;
wire          main_ddrphy_dfi_p3_reset_n;
wire          main_ddrphy_dfi_p3_mode_2n;
wire          main_ddrphy_dfi_p3_alert_n;
wire   [16:0] main_ddrphy_dfi_p3_address;
wire    [5:0] main_ddrphy_dfi_p3_bank;
wire          main_ddrphy_dfi_p3_cas_n;
wire          main_ddrphy_dfi_p3_cs_n;
wire          main_ddrphy_dfi_p3_ras_n;
wire          main_ddrphy_dfi_p3_act_n;
wire          main_ddrphy_dfi_p3_odt;
wire          main_ddrphy_dfi_p3_we_n;
wire   [31:0] main_ddrphy_dfi_p3_wrdata;
wire          main_ddrphy_dfi_p3_wrdata_en;
wire    [3:0] main_ddrphy_dfi_p3_wrdata_mask;
wire          main_ddrphy_dfi_p3_rddata_en;
wire   [31:0] main_ddrphy_dfi_p3_rddata;
wire          main_ddrphy_dfi_p3_rddata_valid;
wire          main_ddrphy_dfi_p4_cke;
wire          main_ddrphy_dfi_p4_reset_n;
wire          main_ddrphy_dfi_p4_mode_2n;
wire          main_ddrphy_dfi_p4_alert_n;
wire   [16:0] main_ddrphy_dfi_p4_address;
wire    [5:0] main_ddrphy_dfi_p4_bank;
wire          main_ddrphy_dfi_p4_cas_n;
wire          main_ddrphy_dfi_p4_cs_n;
wire          main_ddrphy_dfi_p4_ras_n;
wire          main_ddrphy_dfi_p4_act_n;
wire          main_ddrphy_dfi_p4_odt;
wire          main_ddrphy_dfi_p4_we_n;
wire   [31:0] main_ddrphy_dfi_p4_wrdata;
wire          main_ddrphy_dfi_p4_wrdata_en;
wire    [3:0] main_ddrphy_dfi_p4_wrdata_mask;
wire          main_ddrphy_dfi_p4_rddata_en;
wire   [31:0] main_ddrphy_dfi_p4_rddata;
wire          main_ddrphy_dfi_p4_rddata_valid;
wire          main_ddrphy_dfi_p5_cke;
wire          main_ddrphy_dfi_p5_reset_n;
wire          main_ddrphy_dfi_p5_mode_2n;
wire          main_ddrphy_dfi_p5_alert_n;
wire   [16:0] main_ddrphy_dfi_p5_address;
wire    [5:0] main_ddrphy_dfi_p5_bank;
wire          main_ddrphy_dfi_p5_cas_n;
wire          main_ddrphy_dfi_p5_cs_n;
wire          main_ddrphy_dfi_p5_ras_n;
wire          main_ddrphy_dfi_p5_act_n;
wire          main_ddrphy_dfi_p5_odt;
wire          main_ddrphy_dfi_p5_we_n;
wire   [31:0] main_ddrphy_dfi_p5_wrdata;
wire          main_ddrphy_dfi_p5_wrdata_en;
wire    [3:0] main_ddrphy_dfi_p5_wrdata_mask;
wire          main_ddrphy_dfi_p5_rddata_en;
wire   [31:0] main_ddrphy_dfi_p5_rddata;
wire          main_ddrphy_dfi_p5_rddata_valid;
wire          main_ddrphy_dfi_p6_cke;
wire          main_ddrphy_dfi_p6_reset_n;
wire          main_ddrphy_dfi_p6_mode_2n;
wire          main_ddrphy_dfi_p6_alert_n;
wire   [16:0] main_ddrphy_dfi_p6_address;
wire    [5:0] main_ddrphy_dfi_p6_bank;
wire          main_ddrphy_dfi_p6_cas_n;
wire          main_ddrphy_dfi_p6_cs_n;
wire          main_ddrphy_dfi_p6_ras_n;
wire          main_ddrphy_dfi_p6_act_n;
wire          main_ddrphy_dfi_p6_odt;
wire          main_ddrphy_dfi_p6_we_n;
wire   [31:0] main_ddrphy_dfi_p6_wrdata;
wire          main_ddrphy_dfi_p6_wrdata_en;
wire    [3:0] main_ddrphy_dfi_p6_wrdata_mask;
wire          main_ddrphy_dfi_p6_rddata_en;
wire   [31:0] main_ddrphy_dfi_p6_rddata;
wire          main_ddrphy_dfi_p6_rddata_valid;
wire          main_ddrphy_dfi_p7_cke;
wire          main_ddrphy_dfi_p7_reset_n;
wire          main_ddrphy_dfi_p7_mode_2n;
wire          main_ddrphy_dfi_p7_alert_n;
wire   [16:0] main_ddrphy_dfi_p7_address;
wire    [5:0] main_ddrphy_dfi_p7_bank;
wire          main_ddrphy_dfi_p7_cas_n;
wire          main_ddrphy_dfi_p7_cs_n;
wire          main_ddrphy_dfi_p7_ras_n;
wire          main_ddrphy_dfi_p7_act_n;
wire          main_ddrphy_dfi_p7_odt;
wire          main_ddrphy_dfi_p7_we_n;
wire   [31:0] main_ddrphy_dfi_p7_wrdata;
wire          main_ddrphy_dfi_p7_wrdata_en;
wire    [3:0] main_ddrphy_dfi_p7_wrdata_mask;
wire          main_ddrphy_dfi_p7_rddata_en;
wire   [31:0] main_ddrphy_dfi_p7_rddata;
wire          main_ddrphy_dfi_p7_rddata_valid;
wire          main_ddrphy_dfi_ctl_init_start;
wire          main_ddrphy_dfi_ctl_init_complete;
reg     [2:0] main_dram_ctrl_csrstorage0_storage = 3'd2;
reg           main_dram_ctrl_csrstorage0_re = 1'd0;
reg     [2:0] main_dram_ctrl_csrstorage1_storage = 3'd2;
reg           main_dram_ctrl_csrstorage1_re = 1'd0;
reg     [2:0] main_dram_ctrl_csrstorage2_storage = 3'd2;
reg           main_dram_ctrl_csrstorage2_re = 1'd0;
reg     [2:0] main_dram_ctrl_csrstorage3_storage = 3'd2;
reg           main_dram_ctrl_csrstorage3_re = 1'd0;
reg     [8:0] main_dram_ctrl_csrstorage4_storage = 9'd196;
reg           main_dram_ctrl_csrstorage4_re = 1'd0;
reg     [5:0] main_dram_ctrl_csrstorage5_storage = 6'd10;
reg           main_dram_ctrl_csrstorage5_re = 1'd0;
reg     [2:0] main_dram_ctrl_csrstorage6_storage = 3'd3;
reg           main_dram_ctrl_csrstorage6_re = 1'd0;
reg     [4:0] main_dram_ctrl_csrstorage7_storage = 5'd8;
reg           main_dram_ctrl_csrstorage7_re = 1'd0;
reg           main_dram_ctrl_csrstorage8_storage = 1'd0;
reg           main_dram_ctrl_csrstorage8_re = 1'd0;
reg           main_dram_ctrl_csrstorage9_storage = 1'd0;
reg           main_dram_ctrl_csrstorage9_re = 1'd0;
reg     [2:0] main_dram_ctrl_csrstorage10_storage = 3'd2;
reg           main_dram_ctrl_csrstorage10_re = 1'd0;
reg     [3:0] main_dram_ctrl_csrstorage11_storage = 4'd4;
reg           main_dram_ctrl_csrstorage11_re = 1'd0;
reg     [2:0] main_dram_ctrl_csrstorage12_storage = 3'd3;
reg           main_dram_ctrl_csrstorage12_re = 1'd0;
reg           main_dram_ctrl_init_req = 1'd0;
reg           main_dram_ctrl_phy_ctl_storage = 1'd0;
reg           main_dram_ctrl_phy_ctl_re = 1'd0;
reg           main_dram_ctrl_init_done = 1'd0;
wire          main_dram_ctrl_phy_sts_status;
wire          main_dram_ctrl_phy_sts_we;
reg           main_dram_ctrl_phy_sts_re = 1'd0;
wire          main_dram_ctrl_interface_bank0_valid;
wire          main_dram_ctrl_interface_bank0_ready;
wire          main_dram_ctrl_interface_bank0_we;
wire   [20:0] main_dram_ctrl_interface_bank0_addr;
wire          main_dram_ctrl_interface_bank0_lock;
wire          main_dram_ctrl_interface_bank0_wdata_ready;
wire          main_dram_ctrl_interface_bank0_rdata_valid;
wire          main_dram_ctrl_interface_bank1_valid;
wire          main_dram_ctrl_interface_bank1_ready;
wire          main_dram_ctrl_interface_bank1_we;
wire   [20:0] main_dram_ctrl_interface_bank1_addr;
wire          main_dram_ctrl_interface_bank1_lock;
wire          main_dram_ctrl_interface_bank1_wdata_ready;
wire          main_dram_ctrl_interface_bank1_rdata_valid;
wire          main_dram_ctrl_interface_bank2_valid;
wire          main_dram_ctrl_interface_bank2_ready;
wire          main_dram_ctrl_interface_bank2_we;
wire   [20:0] main_dram_ctrl_interface_bank2_addr;
wire          main_dram_ctrl_interface_bank2_lock;
wire          main_dram_ctrl_interface_bank2_wdata_ready;
wire          main_dram_ctrl_interface_bank2_rdata_valid;
wire          main_dram_ctrl_interface_bank3_valid;
wire          main_dram_ctrl_interface_bank3_ready;
wire          main_dram_ctrl_interface_bank3_we;
wire   [20:0] main_dram_ctrl_interface_bank3_addr;
wire          main_dram_ctrl_interface_bank3_lock;
wire          main_dram_ctrl_interface_bank3_wdata_ready;
wire          main_dram_ctrl_interface_bank3_rdata_valid;
wire          main_dram_ctrl_interface_bank4_valid;
wire          main_dram_ctrl_interface_bank4_ready;
wire          main_dram_ctrl_interface_bank4_we;
wire   [20:0] main_dram_ctrl_interface_bank4_addr;
wire          main_dram_ctrl_interface_bank4_lock;
wire          main_dram_ctrl_interface_bank4_wdata_ready;
wire          main_dram_ctrl_interface_bank4_rdata_valid;
wire          main_dram_ctrl_interface_bank5_valid;
wire          main_dram_ctrl_interface_bank5_ready;
wire          main_dram_ctrl_interface_bank5_we;
wire   [20:0] main_dram_ctrl_interface_bank5_addr;
wire          main_dram_ctrl_interface_bank5_lock;
wire          main_dram_ctrl_interface_bank5_wdata_ready;
wire          main_dram_ctrl_interface_bank5_rdata_valid;
wire          main_dram_ctrl_interface_bank6_valid;
wire          main_dram_ctrl_interface_bank6_ready;
wire          main_dram_ctrl_interface_bank6_we;
wire   [20:0] main_dram_ctrl_interface_bank6_addr;
wire          main_dram_ctrl_interface_bank6_lock;
wire          main_dram_ctrl_interface_bank6_wdata_ready;
wire          main_dram_ctrl_interface_bank6_rdata_valid;
wire          main_dram_ctrl_interface_bank7_valid;
wire          main_dram_ctrl_interface_bank7_ready;
wire          main_dram_ctrl_interface_bank7_we;
wire   [20:0] main_dram_ctrl_interface_bank7_addr;
wire          main_dram_ctrl_interface_bank7_lock;
wire          main_dram_ctrl_interface_bank7_wdata_ready;
wire          main_dram_ctrl_interface_bank7_rdata_valid;
reg   [255:0] main_dram_ctrl_interface_wdata = 256'd0;
reg    [31:0] main_dram_ctrl_interface_wdata_we = 32'd0;
wire  [255:0] main_dram_ctrl_interface_rdata;
wire          main_dram_ctrl_interface_rdata_valid;
wire          main_dram_ctrl_dfi_p0_cke;
wire          main_dram_ctrl_dfi_p0_reset_n;
reg           main_dram_ctrl_dfi_p0_mode_2n = 1'd0;
wire          main_dram_ctrl_dfi_p0_alert_n;
reg    [14:0] main_dram_ctrl_dfi_p0_address = 15'd0;
reg     [2:0] main_dram_ctrl_dfi_p0_bank = 3'd0;
reg           main_dram_ctrl_dfi_p0_cas_n = 1'd1;
reg           main_dram_ctrl_dfi_p0_cs_n = 1'd1;
reg           main_dram_ctrl_dfi_p0_ras_n = 1'd1;
reg           main_dram_ctrl_dfi_p0_act_n = 1'd1;
wire          main_dram_ctrl_dfi_p0_odt;
reg           main_dram_ctrl_dfi_p0_we_n = 1'd1;
wire   [31:0] main_dram_ctrl_dfi_p0_wrdata;
reg           main_dram_ctrl_dfi_p0_wrdata_en = 1'd0;
wire    [3:0] main_dram_ctrl_dfi_p0_wrdata_mask;
reg           main_dram_ctrl_dfi_p0_rddata_en = 1'd0;
wire   [31:0] main_dram_ctrl_dfi_p0_rddata;
wire          main_dram_ctrl_dfi_p0_rddata_valid;
wire          main_dram_ctrl_dfi_p1_cke;
wire          main_dram_ctrl_dfi_p1_reset_n;
reg           main_dram_ctrl_dfi_p1_mode_2n = 1'd0;
wire          main_dram_ctrl_dfi_p1_alert_n;
reg    [14:0] main_dram_ctrl_dfi_p1_address = 15'd0;
reg     [2:0] main_dram_ctrl_dfi_p1_bank = 3'd0;
reg           main_dram_ctrl_dfi_p1_cas_n = 1'd1;
reg           main_dram_ctrl_dfi_p1_cs_n = 1'd1;
reg           main_dram_ctrl_dfi_p1_ras_n = 1'd1;
reg           main_dram_ctrl_dfi_p1_act_n = 1'd1;
wire          main_dram_ctrl_dfi_p1_odt;
reg           main_dram_ctrl_dfi_p1_we_n = 1'd1;
wire   [31:0] main_dram_ctrl_dfi_p1_wrdata;
reg           main_dram_ctrl_dfi_p1_wrdata_en = 1'd0;
wire    [3:0] main_dram_ctrl_dfi_p1_wrdata_mask;
reg           main_dram_ctrl_dfi_p1_rddata_en = 1'd0;
wire   [31:0] main_dram_ctrl_dfi_p1_rddata;
wire          main_dram_ctrl_dfi_p1_rddata_valid;
wire          main_dram_ctrl_dfi_p2_cke;
wire          main_dram_ctrl_dfi_p2_reset_n;
reg           main_dram_ctrl_dfi_p2_mode_2n = 1'd0;
wire          main_dram_ctrl_dfi_p2_alert_n;
reg    [14:0] main_dram_ctrl_dfi_p2_address = 15'd0;
reg     [2:0] main_dram_ctrl_dfi_p2_bank = 3'd0;
reg           main_dram_ctrl_dfi_p2_cas_n = 1'd1;
reg           main_dram_ctrl_dfi_p2_cs_n = 1'd1;
reg           main_dram_ctrl_dfi_p2_ras_n = 1'd1;
reg           main_dram_ctrl_dfi_p2_act_n = 1'd1;
wire          main_dram_ctrl_dfi_p2_odt;
reg           main_dram_ctrl_dfi_p2_we_n = 1'd1;
wire   [31:0] main_dram_ctrl_dfi_p2_wrdata;
reg           main_dram_ctrl_dfi_p2_wrdata_en = 1'd0;
wire    [3:0] main_dram_ctrl_dfi_p2_wrdata_mask;
reg           main_dram_ctrl_dfi_p2_rddata_en = 1'd0;
wire   [31:0] main_dram_ctrl_dfi_p2_rddata;
wire          main_dram_ctrl_dfi_p2_rddata_valid;
wire          main_dram_ctrl_dfi_p3_cke;
wire          main_dram_ctrl_dfi_p3_reset_n;
reg           main_dram_ctrl_dfi_p3_mode_2n = 1'd0;
wire          main_dram_ctrl_dfi_p3_alert_n;
reg    [14:0] main_dram_ctrl_dfi_p3_address = 15'd0;
reg     [2:0] main_dram_ctrl_dfi_p3_bank = 3'd0;
reg           main_dram_ctrl_dfi_p3_cas_n = 1'd1;
reg           main_dram_ctrl_dfi_p3_cs_n = 1'd1;
reg           main_dram_ctrl_dfi_p3_ras_n = 1'd1;
reg           main_dram_ctrl_dfi_p3_act_n = 1'd1;
wire          main_dram_ctrl_dfi_p3_odt;
reg           main_dram_ctrl_dfi_p3_we_n = 1'd1;
wire   [31:0] main_dram_ctrl_dfi_p3_wrdata;
reg           main_dram_ctrl_dfi_p3_wrdata_en = 1'd0;
wire    [3:0] main_dram_ctrl_dfi_p3_wrdata_mask;
reg           main_dram_ctrl_dfi_p3_rddata_en = 1'd0;
wire   [31:0] main_dram_ctrl_dfi_p3_rddata;
wire          main_dram_ctrl_dfi_p3_rddata_valid;
wire          main_dram_ctrl_dfi_p4_cke;
wire          main_dram_ctrl_dfi_p4_reset_n;
reg           main_dram_ctrl_dfi_p4_mode_2n = 1'd0;
wire          main_dram_ctrl_dfi_p4_alert_n;
reg    [14:0] main_dram_ctrl_dfi_p4_address = 15'd0;
reg     [2:0] main_dram_ctrl_dfi_p4_bank = 3'd0;
reg           main_dram_ctrl_dfi_p4_cas_n = 1'd1;
reg           main_dram_ctrl_dfi_p4_cs_n = 1'd1;
reg           main_dram_ctrl_dfi_p4_ras_n = 1'd1;
reg           main_dram_ctrl_dfi_p4_act_n = 1'd1;
wire          main_dram_ctrl_dfi_p4_odt;
reg           main_dram_ctrl_dfi_p4_we_n = 1'd1;
wire   [31:0] main_dram_ctrl_dfi_p4_wrdata;
reg           main_dram_ctrl_dfi_p4_wrdata_en = 1'd0;
wire    [3:0] main_dram_ctrl_dfi_p4_wrdata_mask;
reg           main_dram_ctrl_dfi_p4_rddata_en = 1'd0;
wire   [31:0] main_dram_ctrl_dfi_p4_rddata;
wire          main_dram_ctrl_dfi_p4_rddata_valid;
wire          main_dram_ctrl_dfi_p5_cke;
wire          main_dram_ctrl_dfi_p5_reset_n;
reg           main_dram_ctrl_dfi_p5_mode_2n = 1'd0;
wire          main_dram_ctrl_dfi_p5_alert_n;
reg    [14:0] main_dram_ctrl_dfi_p5_address = 15'd0;
reg     [2:0] main_dram_ctrl_dfi_p5_bank = 3'd0;
reg           main_dram_ctrl_dfi_p5_cas_n = 1'd1;
reg           main_dram_ctrl_dfi_p5_cs_n = 1'd1;
reg           main_dram_ctrl_dfi_p5_ras_n = 1'd1;
reg           main_dram_ctrl_dfi_p5_act_n = 1'd1;
wire          main_dram_ctrl_dfi_p5_odt;
reg           main_dram_ctrl_dfi_p5_we_n = 1'd1;
wire   [31:0] main_dram_ctrl_dfi_p5_wrdata;
reg           main_dram_ctrl_dfi_p5_wrdata_en = 1'd0;
wire    [3:0] main_dram_ctrl_dfi_p5_wrdata_mask;
reg           main_dram_ctrl_dfi_p5_rddata_en = 1'd0;
wire   [31:0] main_dram_ctrl_dfi_p5_rddata;
wire          main_dram_ctrl_dfi_p5_rddata_valid;
wire          main_dram_ctrl_dfi_p6_cke;
wire          main_dram_ctrl_dfi_p6_reset_n;
reg           main_dram_ctrl_dfi_p6_mode_2n = 1'd0;
wire          main_dram_ctrl_dfi_p6_alert_n;
reg    [14:0] main_dram_ctrl_dfi_p6_address = 15'd0;
reg     [2:0] main_dram_ctrl_dfi_p6_bank = 3'd0;
reg           main_dram_ctrl_dfi_p6_cas_n = 1'd1;
reg           main_dram_ctrl_dfi_p6_cs_n = 1'd1;
reg           main_dram_ctrl_dfi_p6_ras_n = 1'd1;
reg           main_dram_ctrl_dfi_p6_act_n = 1'd1;
wire          main_dram_ctrl_dfi_p6_odt;
reg           main_dram_ctrl_dfi_p6_we_n = 1'd1;
wire   [31:0] main_dram_ctrl_dfi_p6_wrdata;
reg           main_dram_ctrl_dfi_p6_wrdata_en = 1'd0;
wire    [3:0] main_dram_ctrl_dfi_p6_wrdata_mask;
reg           main_dram_ctrl_dfi_p6_rddata_en = 1'd0;
wire   [31:0] main_dram_ctrl_dfi_p6_rddata;
wire          main_dram_ctrl_dfi_p6_rddata_valid;
wire          main_dram_ctrl_dfi_p7_cke;
wire          main_dram_ctrl_dfi_p7_reset_n;
reg           main_dram_ctrl_dfi_p7_mode_2n = 1'd0;
wire          main_dram_ctrl_dfi_p7_alert_n;
reg    [14:0] main_dram_ctrl_dfi_p7_address = 15'd0;
reg     [2:0] main_dram_ctrl_dfi_p7_bank = 3'd0;
reg           main_dram_ctrl_dfi_p7_cas_n = 1'd1;
reg           main_dram_ctrl_dfi_p7_cs_n = 1'd1;
reg           main_dram_ctrl_dfi_p7_ras_n = 1'd1;
reg           main_dram_ctrl_dfi_p7_act_n = 1'd1;
wire          main_dram_ctrl_dfi_p7_odt;
reg           main_dram_ctrl_dfi_p7_we_n = 1'd1;
wire   [31:0] main_dram_ctrl_dfi_p7_wrdata;
reg           main_dram_ctrl_dfi_p7_wrdata_en = 1'd0;
wire    [3:0] main_dram_ctrl_dfi_p7_wrdata_mask;
reg           main_dram_ctrl_dfi_p7_rddata_en = 1'd0;
wire   [31:0] main_dram_ctrl_dfi_p7_rddata;
wire          main_dram_ctrl_dfi_p7_rddata_valid;
wire          main_dram_ctrl_dfi_ctl_init_start;
wire          main_dram_ctrl_dfi_ctl_init_complete;
reg           main_dram_ctrl_cmd_valid = 1'd0;
reg           main_dram_ctrl_cmd_ready = 1'd0;
reg           main_dram_ctrl_cmd_last = 1'd0;
reg    [14:0] main_dram_ctrl_cmd_payload_a = 15'd0;
reg     [2:0] main_dram_ctrl_cmd_payload_ba = 3'd0;
reg           main_dram_ctrl_cmd_payload_cas = 1'd0;
reg           main_dram_ctrl_cmd_payload_ras = 1'd0;
reg           main_dram_ctrl_cmd_payload_we = 1'd0;
reg           main_dram_ctrl_cmd_payload_is_read = 1'd0;
reg           main_dram_ctrl_cmd_payload_is_write = 1'd0;
wire          main_dram_ctrl_wants_refresh;
wire          main_dram_ctrl_timer_wait;
wire          main_dram_ctrl_timer_done0;
wire    [8:0] main_dram_ctrl_timer_count0;
wire          main_dram_ctrl_timer_done1;
reg     [8:0] main_dram_ctrl_timer_count1 = 9'd0;
wire          main_dram_ctrl_postponer_req_i;
reg           main_dram_ctrl_postponer_req_o = 1'd0;
reg           main_dram_ctrl_postponer_count = 1'd0;
reg           main_dram_ctrl_sequencer_start0 = 1'd0;
reg           main_dram_ctrl_sequencer_done0 = 1'd0;
reg           main_dram_ctrl_sequencer_start1 = 1'd0;
reg           main_dram_ctrl_sequencer_done1 = 1'd0;
reg     [6:0] main_dram_ctrl_sequencer_counter0 = 7'd0;
wire    [6:0] main_dram_ctrl_sequencer_target;
wire          main_dram_ctrl_sequencer_trigger;
reg     [6:0] main_dram_ctrl_sequencer_counter1 = 7'd0;
reg           main_dram_ctrl_sequencer_count = 1'd0;
reg     [3:0] main_dram_ctrl_precharge_time_sig = 4'd0;
wire          main_dram_ctrl_bankmachine0_req_valid;
wire          main_dram_ctrl_bankmachine0_req_ready;
wire          main_dram_ctrl_bankmachine0_req_we;
wire   [20:0] main_dram_ctrl_bankmachine0_req_addr;
wire          main_dram_ctrl_bankmachine0_req_lock;
reg           main_dram_ctrl_bankmachine0_req_wdata_ready = 1'd0;
reg           main_dram_ctrl_bankmachine0_req_rdata_valid = 1'd0;
wire          main_dram_ctrl_bankmachine0_refresh_req;
reg           main_dram_ctrl_bankmachine0_refresh_gnt = 1'd0;
reg           main_dram_ctrl_bankmachine0_cmd_valid = 1'd0;
reg           main_dram_ctrl_bankmachine0_cmd_ready = 1'd0;
reg    [14:0] main_dram_ctrl_bankmachine0_cmd_payload_a = 15'd0;
wire    [2:0] main_dram_ctrl_bankmachine0_cmd_payload_ba;
reg           main_dram_ctrl_bankmachine0_cmd_payload_cas = 1'd0;
reg           main_dram_ctrl_bankmachine0_cmd_payload_ras = 1'd0;
reg           main_dram_ctrl_bankmachine0_cmd_payload_we = 1'd0;
reg           main_dram_ctrl_bankmachine0_cmd_payload_is_cmd = 1'd0;
reg           main_dram_ctrl_bankmachine0_cmd_payload_is_read = 1'd0;
reg           main_dram_ctrl_bankmachine0_cmd_payload_is_write = 1'd0;
reg     [3:0] main_dram_ctrl_bankmachine0_timer = 4'd0;
wire          main_dram_ctrl_bankmachine0_timer_done;
reg           main_dram_ctrl_bankmachine0_auto_precharge = 1'd0;
wire          main_dram_ctrl_bankmachine0_sink_valid;
wire          main_dram_ctrl_bankmachine0_sink_ready;
reg           main_dram_ctrl_bankmachine0_sink_first = 1'd0;
reg           main_dram_ctrl_bankmachine0_sink_last = 1'd0;
wire          main_dram_ctrl_bankmachine0_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine0_sink_payload_addr;
wire          main_dram_ctrl_bankmachine0_source_valid;
wire          main_dram_ctrl_bankmachine0_source_ready;
wire          main_dram_ctrl_bankmachine0_source_first;
wire          main_dram_ctrl_bankmachine0_source_last;
wire          main_dram_ctrl_bankmachine0_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine0_source_payload_addr;
wire          main_dram_ctrl_bankmachine0_simplesyncfifo0_we;
wire          main_dram_ctrl_bankmachine0_simplesyncfifo0_writable;
wire          main_dram_ctrl_bankmachine0_simplesyncfifo0_re;
wire          main_dram_ctrl_bankmachine0_simplesyncfifo0_readable;
wire   [23:0] main_dram_ctrl_bankmachine0_simplesyncfifo0_din;
wire   [23:0] main_dram_ctrl_bankmachine0_simplesyncfifo0_dout;
reg     [4:0] main_dram_ctrl_bankmachine0_w_cnt = 5'd0;
reg     [4:0] main_dram_ctrl_bankmachine0_r_cnt = 5'd0;
wire    [3:0] main_dram_ctrl_bankmachine0_wrport_adr;
wire   [23:0] main_dram_ctrl_bankmachine0_wrport_dat_r;
wire          main_dram_ctrl_bankmachine0_wrport_we;
wire   [23:0] main_dram_ctrl_bankmachine0_wrport_dat_w;
wire          main_dram_ctrl_bankmachine0_wrport_re;
wire          main_dram_ctrl_bankmachine0_do_read;
wire    [3:0] main_dram_ctrl_bankmachine0_rdport_adr;
wire   [23:0] main_dram_ctrl_bankmachine0_rdport_dat_r;
wire          main_dram_ctrl_bankmachine0_half_way;
wire          main_dram_ctrl_bankmachine0_fifo_in_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine0_fifo_in_payload_addr;
wire          main_dram_ctrl_bankmachine0_fifo_in_first;
wire          main_dram_ctrl_bankmachine0_fifo_in_last;
wire          main_dram_ctrl_bankmachine0_fifo_out_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine0_fifo_out_payload_addr;
wire          main_dram_ctrl_bankmachine0_fifo_out_first;
wire          main_dram_ctrl_bankmachine0_fifo_out_last;
wire          main_dram_ctrl_bankmachine0_sink_sink_valid;
wire          main_dram_ctrl_bankmachine0_sink_sink_ready;
wire          main_dram_ctrl_bankmachine0_sink_sink_first;
wire          main_dram_ctrl_bankmachine0_sink_sink_last;
wire          main_dram_ctrl_bankmachine0_sink_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine0_sink_sink_payload_addr;
wire          main_dram_ctrl_bankmachine0_source_source_valid;
wire          main_dram_ctrl_bankmachine0_source_source_ready;
wire          main_dram_ctrl_bankmachine0_source_source_first;
wire          main_dram_ctrl_bankmachine0_source_source_last;
wire          main_dram_ctrl_bankmachine0_source_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine0_source_source_payload_addr;
wire          main_dram_ctrl_bankmachine0_pipe_valid_sink_valid;
wire          main_dram_ctrl_bankmachine0_pipe_valid_sink_ready;
wire          main_dram_ctrl_bankmachine0_pipe_valid_sink_first;
wire          main_dram_ctrl_bankmachine0_pipe_valid_sink_last;
wire          main_dram_ctrl_bankmachine0_pipe_valid_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine0_pipe_valid_sink_payload_addr;
reg           main_dram_ctrl_bankmachine0_pipe_valid_source_valid = 1'd0;
wire          main_dram_ctrl_bankmachine0_pipe_valid_source_ready;
reg           main_dram_ctrl_bankmachine0_pipe_valid_source_first = 1'd0;
reg           main_dram_ctrl_bankmachine0_pipe_valid_source_last = 1'd0;
reg           main_dram_ctrl_bankmachine0_pipe_valid_source_payload_we = 1'd0;
reg    [20:0] main_dram_ctrl_bankmachine0_pipe_valid_source_payload_addr = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine0_row = 15'd0;
reg           main_dram_ctrl_bankmachine0_row_opened = 1'd0;
reg           main_dram_ctrl_bankmachine0_row_hit = 1'd0;
reg           main_dram_ctrl_bankmachine0_row_open = 1'd0;
reg           main_dram_ctrl_bankmachine0_row_close = 1'd0;
reg           main_dram_ctrl_bankmachine0_row_hit_reeval = 1'd0;
reg           main_dram_ctrl_bankmachine0_row_col_n_addr_sel = 1'd0;
reg           main_dram_ctrl_bankmachine0_pre_n_addr_sel = 1'd0;
wire   [11:0] main_dram_ctrl_bankmachine0_pre_sig;
wire          main_dram_ctrl_bankmachine0_twtpcon_valid;
reg           main_dram_ctrl_bankmachine0_twtpcon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine0_twtpcon_count = 4'd0;
wire          main_dram_ctrl_bankmachine0_trccon_valid;
reg           main_dram_ctrl_bankmachine0_trccon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine0_trccon_count = 4'd4;
wire          main_dram_ctrl_bankmachine0_trascon_valid;
reg           main_dram_ctrl_bankmachine0_trascon_ready = 1'd1;
reg     [2:0] main_dram_ctrl_bankmachine0_trascon_count = 3'd3;
reg    [20:0] main_dram_ctrl_bankmachine0_last_addr_status = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine0_last_active_row_status = 15'd0;
wire          main_dram_ctrl_bankmachine1_req_valid;
wire          main_dram_ctrl_bankmachine1_req_ready;
wire          main_dram_ctrl_bankmachine1_req_we;
wire   [20:0] main_dram_ctrl_bankmachine1_req_addr;
wire          main_dram_ctrl_bankmachine1_req_lock;
reg           main_dram_ctrl_bankmachine1_req_wdata_ready = 1'd0;
reg           main_dram_ctrl_bankmachine1_req_rdata_valid = 1'd0;
wire          main_dram_ctrl_bankmachine1_refresh_req;
reg           main_dram_ctrl_bankmachine1_refresh_gnt = 1'd0;
reg           main_dram_ctrl_bankmachine1_cmd_valid = 1'd0;
reg           main_dram_ctrl_bankmachine1_cmd_ready = 1'd0;
reg    [14:0] main_dram_ctrl_bankmachine1_cmd_payload_a = 15'd0;
wire    [2:0] main_dram_ctrl_bankmachine1_cmd_payload_ba;
reg           main_dram_ctrl_bankmachine1_cmd_payload_cas = 1'd0;
reg           main_dram_ctrl_bankmachine1_cmd_payload_ras = 1'd0;
reg           main_dram_ctrl_bankmachine1_cmd_payload_we = 1'd0;
reg           main_dram_ctrl_bankmachine1_cmd_payload_is_cmd = 1'd0;
reg           main_dram_ctrl_bankmachine1_cmd_payload_is_read = 1'd0;
reg           main_dram_ctrl_bankmachine1_cmd_payload_is_write = 1'd0;
reg     [3:0] main_dram_ctrl_bankmachine1_timer = 4'd0;
wire          main_dram_ctrl_bankmachine1_timer_done;
reg           main_dram_ctrl_bankmachine1_auto_precharge = 1'd0;
wire          main_dram_ctrl_bankmachine1_sink_valid;
wire          main_dram_ctrl_bankmachine1_sink_ready;
reg           main_dram_ctrl_bankmachine1_sink_first = 1'd0;
reg           main_dram_ctrl_bankmachine1_sink_last = 1'd0;
wire          main_dram_ctrl_bankmachine1_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine1_sink_payload_addr;
wire          main_dram_ctrl_bankmachine1_source_valid;
wire          main_dram_ctrl_bankmachine1_source_ready;
wire          main_dram_ctrl_bankmachine1_source_first;
wire          main_dram_ctrl_bankmachine1_source_last;
wire          main_dram_ctrl_bankmachine1_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine1_source_payload_addr;
wire          main_dram_ctrl_bankmachine1_simplesyncfifo1_we;
wire          main_dram_ctrl_bankmachine1_simplesyncfifo1_writable;
wire          main_dram_ctrl_bankmachine1_simplesyncfifo1_re;
wire          main_dram_ctrl_bankmachine1_simplesyncfifo1_readable;
wire   [23:0] main_dram_ctrl_bankmachine1_simplesyncfifo1_din;
wire   [23:0] main_dram_ctrl_bankmachine1_simplesyncfifo1_dout;
reg     [4:0] main_dram_ctrl_bankmachine1_w_cnt = 5'd0;
reg     [4:0] main_dram_ctrl_bankmachine1_r_cnt = 5'd0;
wire    [3:0] main_dram_ctrl_bankmachine1_wrport_adr;
wire   [23:0] main_dram_ctrl_bankmachine1_wrport_dat_r;
wire          main_dram_ctrl_bankmachine1_wrport_we;
wire   [23:0] main_dram_ctrl_bankmachine1_wrport_dat_w;
wire          main_dram_ctrl_bankmachine1_wrport_re;
wire          main_dram_ctrl_bankmachine1_do_read;
wire    [3:0] main_dram_ctrl_bankmachine1_rdport_adr;
wire   [23:0] main_dram_ctrl_bankmachine1_rdport_dat_r;
wire          main_dram_ctrl_bankmachine1_half_way;
wire          main_dram_ctrl_bankmachine1_fifo_in_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine1_fifo_in_payload_addr;
wire          main_dram_ctrl_bankmachine1_fifo_in_first;
wire          main_dram_ctrl_bankmachine1_fifo_in_last;
wire          main_dram_ctrl_bankmachine1_fifo_out_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine1_fifo_out_payload_addr;
wire          main_dram_ctrl_bankmachine1_fifo_out_first;
wire          main_dram_ctrl_bankmachine1_fifo_out_last;
wire          main_dram_ctrl_bankmachine1_sink_sink_valid;
wire          main_dram_ctrl_bankmachine1_sink_sink_ready;
wire          main_dram_ctrl_bankmachine1_sink_sink_first;
wire          main_dram_ctrl_bankmachine1_sink_sink_last;
wire          main_dram_ctrl_bankmachine1_sink_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine1_sink_sink_payload_addr;
wire          main_dram_ctrl_bankmachine1_source_source_valid;
wire          main_dram_ctrl_bankmachine1_source_source_ready;
wire          main_dram_ctrl_bankmachine1_source_source_first;
wire          main_dram_ctrl_bankmachine1_source_source_last;
wire          main_dram_ctrl_bankmachine1_source_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine1_source_source_payload_addr;
wire          main_dram_ctrl_bankmachine1_pipe_valid_sink_valid;
wire          main_dram_ctrl_bankmachine1_pipe_valid_sink_ready;
wire          main_dram_ctrl_bankmachine1_pipe_valid_sink_first;
wire          main_dram_ctrl_bankmachine1_pipe_valid_sink_last;
wire          main_dram_ctrl_bankmachine1_pipe_valid_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine1_pipe_valid_sink_payload_addr;
reg           main_dram_ctrl_bankmachine1_pipe_valid_source_valid = 1'd0;
wire          main_dram_ctrl_bankmachine1_pipe_valid_source_ready;
reg           main_dram_ctrl_bankmachine1_pipe_valid_source_first = 1'd0;
reg           main_dram_ctrl_bankmachine1_pipe_valid_source_last = 1'd0;
reg           main_dram_ctrl_bankmachine1_pipe_valid_source_payload_we = 1'd0;
reg    [20:0] main_dram_ctrl_bankmachine1_pipe_valid_source_payload_addr = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine1_row = 15'd0;
reg           main_dram_ctrl_bankmachine1_row_opened = 1'd0;
reg           main_dram_ctrl_bankmachine1_row_hit = 1'd0;
reg           main_dram_ctrl_bankmachine1_row_open = 1'd0;
reg           main_dram_ctrl_bankmachine1_row_close = 1'd0;
reg           main_dram_ctrl_bankmachine1_row_hit_reeval = 1'd0;
reg           main_dram_ctrl_bankmachine1_row_col_n_addr_sel = 1'd0;
reg           main_dram_ctrl_bankmachine1_pre_n_addr_sel = 1'd0;
wire   [11:0] main_dram_ctrl_bankmachine1_pre_sig;
wire          main_dram_ctrl_bankmachine1_twtpcon_valid;
reg           main_dram_ctrl_bankmachine1_twtpcon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine1_twtpcon_count = 4'd0;
wire          main_dram_ctrl_bankmachine1_trccon_valid;
reg           main_dram_ctrl_bankmachine1_trccon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine1_trccon_count = 4'd4;
wire          main_dram_ctrl_bankmachine1_trascon_valid;
reg           main_dram_ctrl_bankmachine1_trascon_ready = 1'd1;
reg     [2:0] main_dram_ctrl_bankmachine1_trascon_count = 3'd3;
reg    [20:0] main_dram_ctrl_bankmachine1_last_addr_status = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine1_last_active_row_status = 15'd0;
wire          main_dram_ctrl_bankmachine2_req_valid;
wire          main_dram_ctrl_bankmachine2_req_ready;
wire          main_dram_ctrl_bankmachine2_req_we;
wire   [20:0] main_dram_ctrl_bankmachine2_req_addr;
wire          main_dram_ctrl_bankmachine2_req_lock;
reg           main_dram_ctrl_bankmachine2_req_wdata_ready = 1'd0;
reg           main_dram_ctrl_bankmachine2_req_rdata_valid = 1'd0;
wire          main_dram_ctrl_bankmachine2_refresh_req;
reg           main_dram_ctrl_bankmachine2_refresh_gnt = 1'd0;
reg           main_dram_ctrl_bankmachine2_cmd_valid = 1'd0;
reg           main_dram_ctrl_bankmachine2_cmd_ready = 1'd0;
reg    [14:0] main_dram_ctrl_bankmachine2_cmd_payload_a = 15'd0;
wire    [2:0] main_dram_ctrl_bankmachine2_cmd_payload_ba;
reg           main_dram_ctrl_bankmachine2_cmd_payload_cas = 1'd0;
reg           main_dram_ctrl_bankmachine2_cmd_payload_ras = 1'd0;
reg           main_dram_ctrl_bankmachine2_cmd_payload_we = 1'd0;
reg           main_dram_ctrl_bankmachine2_cmd_payload_is_cmd = 1'd0;
reg           main_dram_ctrl_bankmachine2_cmd_payload_is_read = 1'd0;
reg           main_dram_ctrl_bankmachine2_cmd_payload_is_write = 1'd0;
reg     [3:0] main_dram_ctrl_bankmachine2_timer = 4'd0;
wire          main_dram_ctrl_bankmachine2_timer_done;
reg           main_dram_ctrl_bankmachine2_auto_precharge = 1'd0;
wire          main_dram_ctrl_bankmachine2_sink_valid;
wire          main_dram_ctrl_bankmachine2_sink_ready;
reg           main_dram_ctrl_bankmachine2_sink_first = 1'd0;
reg           main_dram_ctrl_bankmachine2_sink_last = 1'd0;
wire          main_dram_ctrl_bankmachine2_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine2_sink_payload_addr;
wire          main_dram_ctrl_bankmachine2_source_valid;
wire          main_dram_ctrl_bankmachine2_source_ready;
wire          main_dram_ctrl_bankmachine2_source_first;
wire          main_dram_ctrl_bankmachine2_source_last;
wire          main_dram_ctrl_bankmachine2_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine2_source_payload_addr;
wire          main_dram_ctrl_bankmachine2_simplesyncfifo2_we;
wire          main_dram_ctrl_bankmachine2_simplesyncfifo2_writable;
wire          main_dram_ctrl_bankmachine2_simplesyncfifo2_re;
wire          main_dram_ctrl_bankmachine2_simplesyncfifo2_readable;
wire   [23:0] main_dram_ctrl_bankmachine2_simplesyncfifo2_din;
wire   [23:0] main_dram_ctrl_bankmachine2_simplesyncfifo2_dout;
reg     [4:0] main_dram_ctrl_bankmachine2_w_cnt = 5'd0;
reg     [4:0] main_dram_ctrl_bankmachine2_r_cnt = 5'd0;
wire    [3:0] main_dram_ctrl_bankmachine2_wrport_adr;
wire   [23:0] main_dram_ctrl_bankmachine2_wrport_dat_r;
wire          main_dram_ctrl_bankmachine2_wrport_we;
wire   [23:0] main_dram_ctrl_bankmachine2_wrport_dat_w;
wire          main_dram_ctrl_bankmachine2_wrport_re;
wire          main_dram_ctrl_bankmachine2_do_read;
wire    [3:0] main_dram_ctrl_bankmachine2_rdport_adr;
wire   [23:0] main_dram_ctrl_bankmachine2_rdport_dat_r;
wire          main_dram_ctrl_bankmachine2_half_way;
wire          main_dram_ctrl_bankmachine2_fifo_in_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine2_fifo_in_payload_addr;
wire          main_dram_ctrl_bankmachine2_fifo_in_first;
wire          main_dram_ctrl_bankmachine2_fifo_in_last;
wire          main_dram_ctrl_bankmachine2_fifo_out_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine2_fifo_out_payload_addr;
wire          main_dram_ctrl_bankmachine2_fifo_out_first;
wire          main_dram_ctrl_bankmachine2_fifo_out_last;
wire          main_dram_ctrl_bankmachine2_sink_sink_valid;
wire          main_dram_ctrl_bankmachine2_sink_sink_ready;
wire          main_dram_ctrl_bankmachine2_sink_sink_first;
wire          main_dram_ctrl_bankmachine2_sink_sink_last;
wire          main_dram_ctrl_bankmachine2_sink_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine2_sink_sink_payload_addr;
wire          main_dram_ctrl_bankmachine2_source_source_valid;
wire          main_dram_ctrl_bankmachine2_source_source_ready;
wire          main_dram_ctrl_bankmachine2_source_source_first;
wire          main_dram_ctrl_bankmachine2_source_source_last;
wire          main_dram_ctrl_bankmachine2_source_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine2_source_source_payload_addr;
wire          main_dram_ctrl_bankmachine2_pipe_valid_sink_valid;
wire          main_dram_ctrl_bankmachine2_pipe_valid_sink_ready;
wire          main_dram_ctrl_bankmachine2_pipe_valid_sink_first;
wire          main_dram_ctrl_bankmachine2_pipe_valid_sink_last;
wire          main_dram_ctrl_bankmachine2_pipe_valid_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine2_pipe_valid_sink_payload_addr;
reg           main_dram_ctrl_bankmachine2_pipe_valid_source_valid = 1'd0;
wire          main_dram_ctrl_bankmachine2_pipe_valid_source_ready;
reg           main_dram_ctrl_bankmachine2_pipe_valid_source_first = 1'd0;
reg           main_dram_ctrl_bankmachine2_pipe_valid_source_last = 1'd0;
reg           main_dram_ctrl_bankmachine2_pipe_valid_source_payload_we = 1'd0;
reg    [20:0] main_dram_ctrl_bankmachine2_pipe_valid_source_payload_addr = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine2_row = 15'd0;
reg           main_dram_ctrl_bankmachine2_row_opened = 1'd0;
reg           main_dram_ctrl_bankmachine2_row_hit = 1'd0;
reg           main_dram_ctrl_bankmachine2_row_open = 1'd0;
reg           main_dram_ctrl_bankmachine2_row_close = 1'd0;
reg           main_dram_ctrl_bankmachine2_row_hit_reeval = 1'd0;
reg           main_dram_ctrl_bankmachine2_row_col_n_addr_sel = 1'd0;
reg           main_dram_ctrl_bankmachine2_pre_n_addr_sel = 1'd0;
wire   [11:0] main_dram_ctrl_bankmachine2_pre_sig;
wire          main_dram_ctrl_bankmachine2_twtpcon_valid;
reg           main_dram_ctrl_bankmachine2_twtpcon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine2_twtpcon_count = 4'd0;
wire          main_dram_ctrl_bankmachine2_trccon_valid;
reg           main_dram_ctrl_bankmachine2_trccon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine2_trccon_count = 4'd4;
wire          main_dram_ctrl_bankmachine2_trascon_valid;
reg           main_dram_ctrl_bankmachine2_trascon_ready = 1'd1;
reg     [2:0] main_dram_ctrl_bankmachine2_trascon_count = 3'd3;
reg    [20:0] main_dram_ctrl_bankmachine2_last_addr_status = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine2_last_active_row_status = 15'd0;
wire          main_dram_ctrl_bankmachine3_req_valid;
wire          main_dram_ctrl_bankmachine3_req_ready;
wire          main_dram_ctrl_bankmachine3_req_we;
wire   [20:0] main_dram_ctrl_bankmachine3_req_addr;
wire          main_dram_ctrl_bankmachine3_req_lock;
reg           main_dram_ctrl_bankmachine3_req_wdata_ready = 1'd0;
reg           main_dram_ctrl_bankmachine3_req_rdata_valid = 1'd0;
wire          main_dram_ctrl_bankmachine3_refresh_req;
reg           main_dram_ctrl_bankmachine3_refresh_gnt = 1'd0;
reg           main_dram_ctrl_bankmachine3_cmd_valid = 1'd0;
reg           main_dram_ctrl_bankmachine3_cmd_ready = 1'd0;
reg    [14:0] main_dram_ctrl_bankmachine3_cmd_payload_a = 15'd0;
wire    [2:0] main_dram_ctrl_bankmachine3_cmd_payload_ba;
reg           main_dram_ctrl_bankmachine3_cmd_payload_cas = 1'd0;
reg           main_dram_ctrl_bankmachine3_cmd_payload_ras = 1'd0;
reg           main_dram_ctrl_bankmachine3_cmd_payload_we = 1'd0;
reg           main_dram_ctrl_bankmachine3_cmd_payload_is_cmd = 1'd0;
reg           main_dram_ctrl_bankmachine3_cmd_payload_is_read = 1'd0;
reg           main_dram_ctrl_bankmachine3_cmd_payload_is_write = 1'd0;
reg     [3:0] main_dram_ctrl_bankmachine3_timer = 4'd0;
wire          main_dram_ctrl_bankmachine3_timer_done;
reg           main_dram_ctrl_bankmachine3_auto_precharge = 1'd0;
wire          main_dram_ctrl_bankmachine3_sink_valid;
wire          main_dram_ctrl_bankmachine3_sink_ready;
reg           main_dram_ctrl_bankmachine3_sink_first = 1'd0;
reg           main_dram_ctrl_bankmachine3_sink_last = 1'd0;
wire          main_dram_ctrl_bankmachine3_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine3_sink_payload_addr;
wire          main_dram_ctrl_bankmachine3_source_valid;
wire          main_dram_ctrl_bankmachine3_source_ready;
wire          main_dram_ctrl_bankmachine3_source_first;
wire          main_dram_ctrl_bankmachine3_source_last;
wire          main_dram_ctrl_bankmachine3_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine3_source_payload_addr;
wire          main_dram_ctrl_bankmachine3_simplesyncfifo3_we;
wire          main_dram_ctrl_bankmachine3_simplesyncfifo3_writable;
wire          main_dram_ctrl_bankmachine3_simplesyncfifo3_re;
wire          main_dram_ctrl_bankmachine3_simplesyncfifo3_readable;
wire   [23:0] main_dram_ctrl_bankmachine3_simplesyncfifo3_din;
wire   [23:0] main_dram_ctrl_bankmachine3_simplesyncfifo3_dout;
reg     [4:0] main_dram_ctrl_bankmachine3_w_cnt = 5'd0;
reg     [4:0] main_dram_ctrl_bankmachine3_r_cnt = 5'd0;
wire    [3:0] main_dram_ctrl_bankmachine3_wrport_adr;
wire   [23:0] main_dram_ctrl_bankmachine3_wrport_dat_r;
wire          main_dram_ctrl_bankmachine3_wrport_we;
wire   [23:0] main_dram_ctrl_bankmachine3_wrport_dat_w;
wire          main_dram_ctrl_bankmachine3_wrport_re;
wire          main_dram_ctrl_bankmachine3_do_read;
wire    [3:0] main_dram_ctrl_bankmachine3_rdport_adr;
wire   [23:0] main_dram_ctrl_bankmachine3_rdport_dat_r;
wire          main_dram_ctrl_bankmachine3_half_way;
wire          main_dram_ctrl_bankmachine3_fifo_in_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine3_fifo_in_payload_addr;
wire          main_dram_ctrl_bankmachine3_fifo_in_first;
wire          main_dram_ctrl_bankmachine3_fifo_in_last;
wire          main_dram_ctrl_bankmachine3_fifo_out_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine3_fifo_out_payload_addr;
wire          main_dram_ctrl_bankmachine3_fifo_out_first;
wire          main_dram_ctrl_bankmachine3_fifo_out_last;
wire          main_dram_ctrl_bankmachine3_sink_sink_valid;
wire          main_dram_ctrl_bankmachine3_sink_sink_ready;
wire          main_dram_ctrl_bankmachine3_sink_sink_first;
wire          main_dram_ctrl_bankmachine3_sink_sink_last;
wire          main_dram_ctrl_bankmachine3_sink_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine3_sink_sink_payload_addr;
wire          main_dram_ctrl_bankmachine3_source_source_valid;
wire          main_dram_ctrl_bankmachine3_source_source_ready;
wire          main_dram_ctrl_bankmachine3_source_source_first;
wire          main_dram_ctrl_bankmachine3_source_source_last;
wire          main_dram_ctrl_bankmachine3_source_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine3_source_source_payload_addr;
wire          main_dram_ctrl_bankmachine3_pipe_valid_sink_valid;
wire          main_dram_ctrl_bankmachine3_pipe_valid_sink_ready;
wire          main_dram_ctrl_bankmachine3_pipe_valid_sink_first;
wire          main_dram_ctrl_bankmachine3_pipe_valid_sink_last;
wire          main_dram_ctrl_bankmachine3_pipe_valid_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine3_pipe_valid_sink_payload_addr;
reg           main_dram_ctrl_bankmachine3_pipe_valid_source_valid = 1'd0;
wire          main_dram_ctrl_bankmachine3_pipe_valid_source_ready;
reg           main_dram_ctrl_bankmachine3_pipe_valid_source_first = 1'd0;
reg           main_dram_ctrl_bankmachine3_pipe_valid_source_last = 1'd0;
reg           main_dram_ctrl_bankmachine3_pipe_valid_source_payload_we = 1'd0;
reg    [20:0] main_dram_ctrl_bankmachine3_pipe_valid_source_payload_addr = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine3_row = 15'd0;
reg           main_dram_ctrl_bankmachine3_row_opened = 1'd0;
reg           main_dram_ctrl_bankmachine3_row_hit = 1'd0;
reg           main_dram_ctrl_bankmachine3_row_open = 1'd0;
reg           main_dram_ctrl_bankmachine3_row_close = 1'd0;
reg           main_dram_ctrl_bankmachine3_row_hit_reeval = 1'd0;
reg           main_dram_ctrl_bankmachine3_row_col_n_addr_sel = 1'd0;
reg           main_dram_ctrl_bankmachine3_pre_n_addr_sel = 1'd0;
wire   [11:0] main_dram_ctrl_bankmachine3_pre_sig;
wire          main_dram_ctrl_bankmachine3_twtpcon_valid;
reg           main_dram_ctrl_bankmachine3_twtpcon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine3_twtpcon_count = 4'd0;
wire          main_dram_ctrl_bankmachine3_trccon_valid;
reg           main_dram_ctrl_bankmachine3_trccon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine3_trccon_count = 4'd4;
wire          main_dram_ctrl_bankmachine3_trascon_valid;
reg           main_dram_ctrl_bankmachine3_trascon_ready = 1'd1;
reg     [2:0] main_dram_ctrl_bankmachine3_trascon_count = 3'd3;
reg    [20:0] main_dram_ctrl_bankmachine3_last_addr_status = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine3_last_active_row_status = 15'd0;
wire          main_dram_ctrl_bankmachine4_req_valid;
wire          main_dram_ctrl_bankmachine4_req_ready;
wire          main_dram_ctrl_bankmachine4_req_we;
wire   [20:0] main_dram_ctrl_bankmachine4_req_addr;
wire          main_dram_ctrl_bankmachine4_req_lock;
reg           main_dram_ctrl_bankmachine4_req_wdata_ready = 1'd0;
reg           main_dram_ctrl_bankmachine4_req_rdata_valid = 1'd0;
wire          main_dram_ctrl_bankmachine4_refresh_req;
reg           main_dram_ctrl_bankmachine4_refresh_gnt = 1'd0;
reg           main_dram_ctrl_bankmachine4_cmd_valid = 1'd0;
reg           main_dram_ctrl_bankmachine4_cmd_ready = 1'd0;
reg    [14:0] main_dram_ctrl_bankmachine4_cmd_payload_a = 15'd0;
wire    [2:0] main_dram_ctrl_bankmachine4_cmd_payload_ba;
reg           main_dram_ctrl_bankmachine4_cmd_payload_cas = 1'd0;
reg           main_dram_ctrl_bankmachine4_cmd_payload_ras = 1'd0;
reg           main_dram_ctrl_bankmachine4_cmd_payload_we = 1'd0;
reg           main_dram_ctrl_bankmachine4_cmd_payload_is_cmd = 1'd0;
reg           main_dram_ctrl_bankmachine4_cmd_payload_is_read = 1'd0;
reg           main_dram_ctrl_bankmachine4_cmd_payload_is_write = 1'd0;
reg     [3:0] main_dram_ctrl_bankmachine4_timer = 4'd0;
wire          main_dram_ctrl_bankmachine4_timer_done;
reg           main_dram_ctrl_bankmachine4_auto_precharge = 1'd0;
wire          main_dram_ctrl_bankmachine4_sink_valid;
wire          main_dram_ctrl_bankmachine4_sink_ready;
reg           main_dram_ctrl_bankmachine4_sink_first = 1'd0;
reg           main_dram_ctrl_bankmachine4_sink_last = 1'd0;
wire          main_dram_ctrl_bankmachine4_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine4_sink_payload_addr;
wire          main_dram_ctrl_bankmachine4_source_valid;
wire          main_dram_ctrl_bankmachine4_source_ready;
wire          main_dram_ctrl_bankmachine4_source_first;
wire          main_dram_ctrl_bankmachine4_source_last;
wire          main_dram_ctrl_bankmachine4_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine4_source_payload_addr;
wire          main_dram_ctrl_bankmachine4_simplesyncfifo4_we;
wire          main_dram_ctrl_bankmachine4_simplesyncfifo4_writable;
wire          main_dram_ctrl_bankmachine4_simplesyncfifo4_re;
wire          main_dram_ctrl_bankmachine4_simplesyncfifo4_readable;
wire   [23:0] main_dram_ctrl_bankmachine4_simplesyncfifo4_din;
wire   [23:0] main_dram_ctrl_bankmachine4_simplesyncfifo4_dout;
reg     [4:0] main_dram_ctrl_bankmachine4_w_cnt = 5'd0;
reg     [4:0] main_dram_ctrl_bankmachine4_r_cnt = 5'd0;
wire    [3:0] main_dram_ctrl_bankmachine4_wrport_adr;
wire   [23:0] main_dram_ctrl_bankmachine4_wrport_dat_r;
wire          main_dram_ctrl_bankmachine4_wrport_we;
wire   [23:0] main_dram_ctrl_bankmachine4_wrport_dat_w;
wire          main_dram_ctrl_bankmachine4_wrport_re;
wire          main_dram_ctrl_bankmachine4_do_read;
wire    [3:0] main_dram_ctrl_bankmachine4_rdport_adr;
wire   [23:0] main_dram_ctrl_bankmachine4_rdport_dat_r;
wire          main_dram_ctrl_bankmachine4_half_way;
wire          main_dram_ctrl_bankmachine4_fifo_in_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine4_fifo_in_payload_addr;
wire          main_dram_ctrl_bankmachine4_fifo_in_first;
wire          main_dram_ctrl_bankmachine4_fifo_in_last;
wire          main_dram_ctrl_bankmachine4_fifo_out_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine4_fifo_out_payload_addr;
wire          main_dram_ctrl_bankmachine4_fifo_out_first;
wire          main_dram_ctrl_bankmachine4_fifo_out_last;
wire          main_dram_ctrl_bankmachine4_sink_sink_valid;
wire          main_dram_ctrl_bankmachine4_sink_sink_ready;
wire          main_dram_ctrl_bankmachine4_sink_sink_first;
wire          main_dram_ctrl_bankmachine4_sink_sink_last;
wire          main_dram_ctrl_bankmachine4_sink_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine4_sink_sink_payload_addr;
wire          main_dram_ctrl_bankmachine4_source_source_valid;
wire          main_dram_ctrl_bankmachine4_source_source_ready;
wire          main_dram_ctrl_bankmachine4_source_source_first;
wire          main_dram_ctrl_bankmachine4_source_source_last;
wire          main_dram_ctrl_bankmachine4_source_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine4_source_source_payload_addr;
wire          main_dram_ctrl_bankmachine4_pipe_valid_sink_valid;
wire          main_dram_ctrl_bankmachine4_pipe_valid_sink_ready;
wire          main_dram_ctrl_bankmachine4_pipe_valid_sink_first;
wire          main_dram_ctrl_bankmachine4_pipe_valid_sink_last;
wire          main_dram_ctrl_bankmachine4_pipe_valid_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine4_pipe_valid_sink_payload_addr;
reg           main_dram_ctrl_bankmachine4_pipe_valid_source_valid = 1'd0;
wire          main_dram_ctrl_bankmachine4_pipe_valid_source_ready;
reg           main_dram_ctrl_bankmachine4_pipe_valid_source_first = 1'd0;
reg           main_dram_ctrl_bankmachine4_pipe_valid_source_last = 1'd0;
reg           main_dram_ctrl_bankmachine4_pipe_valid_source_payload_we = 1'd0;
reg    [20:0] main_dram_ctrl_bankmachine4_pipe_valid_source_payload_addr = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine4_row = 15'd0;
reg           main_dram_ctrl_bankmachine4_row_opened = 1'd0;
reg           main_dram_ctrl_bankmachine4_row_hit = 1'd0;
reg           main_dram_ctrl_bankmachine4_row_open = 1'd0;
reg           main_dram_ctrl_bankmachine4_row_close = 1'd0;
reg           main_dram_ctrl_bankmachine4_row_hit_reeval = 1'd0;
reg           main_dram_ctrl_bankmachine4_row_col_n_addr_sel = 1'd0;
reg           main_dram_ctrl_bankmachine4_pre_n_addr_sel = 1'd0;
wire   [11:0] main_dram_ctrl_bankmachine4_pre_sig;
wire          main_dram_ctrl_bankmachine4_twtpcon_valid;
reg           main_dram_ctrl_bankmachine4_twtpcon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine4_twtpcon_count = 4'd0;
wire          main_dram_ctrl_bankmachine4_trccon_valid;
reg           main_dram_ctrl_bankmachine4_trccon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine4_trccon_count = 4'd4;
wire          main_dram_ctrl_bankmachine4_trascon_valid;
reg           main_dram_ctrl_bankmachine4_trascon_ready = 1'd1;
reg     [2:0] main_dram_ctrl_bankmachine4_trascon_count = 3'd3;
reg    [20:0] main_dram_ctrl_bankmachine4_last_addr_status = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine4_last_active_row_status = 15'd0;
wire          main_dram_ctrl_bankmachine5_req_valid;
wire          main_dram_ctrl_bankmachine5_req_ready;
wire          main_dram_ctrl_bankmachine5_req_we;
wire   [20:0] main_dram_ctrl_bankmachine5_req_addr;
wire          main_dram_ctrl_bankmachine5_req_lock;
reg           main_dram_ctrl_bankmachine5_req_wdata_ready = 1'd0;
reg           main_dram_ctrl_bankmachine5_req_rdata_valid = 1'd0;
wire          main_dram_ctrl_bankmachine5_refresh_req;
reg           main_dram_ctrl_bankmachine5_refresh_gnt = 1'd0;
reg           main_dram_ctrl_bankmachine5_cmd_valid = 1'd0;
reg           main_dram_ctrl_bankmachine5_cmd_ready = 1'd0;
reg    [14:0] main_dram_ctrl_bankmachine5_cmd_payload_a = 15'd0;
wire    [2:0] main_dram_ctrl_bankmachine5_cmd_payload_ba;
reg           main_dram_ctrl_bankmachine5_cmd_payload_cas = 1'd0;
reg           main_dram_ctrl_bankmachine5_cmd_payload_ras = 1'd0;
reg           main_dram_ctrl_bankmachine5_cmd_payload_we = 1'd0;
reg           main_dram_ctrl_bankmachine5_cmd_payload_is_cmd = 1'd0;
reg           main_dram_ctrl_bankmachine5_cmd_payload_is_read = 1'd0;
reg           main_dram_ctrl_bankmachine5_cmd_payload_is_write = 1'd0;
reg     [3:0] main_dram_ctrl_bankmachine5_timer = 4'd0;
wire          main_dram_ctrl_bankmachine5_timer_done;
reg           main_dram_ctrl_bankmachine5_auto_precharge = 1'd0;
wire          main_dram_ctrl_bankmachine5_sink_valid;
wire          main_dram_ctrl_bankmachine5_sink_ready;
reg           main_dram_ctrl_bankmachine5_sink_first = 1'd0;
reg           main_dram_ctrl_bankmachine5_sink_last = 1'd0;
wire          main_dram_ctrl_bankmachine5_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine5_sink_payload_addr;
wire          main_dram_ctrl_bankmachine5_source_valid;
wire          main_dram_ctrl_bankmachine5_source_ready;
wire          main_dram_ctrl_bankmachine5_source_first;
wire          main_dram_ctrl_bankmachine5_source_last;
wire          main_dram_ctrl_bankmachine5_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine5_source_payload_addr;
wire          main_dram_ctrl_bankmachine5_simplesyncfifo5_we;
wire          main_dram_ctrl_bankmachine5_simplesyncfifo5_writable;
wire          main_dram_ctrl_bankmachine5_simplesyncfifo5_re;
wire          main_dram_ctrl_bankmachine5_simplesyncfifo5_readable;
wire   [23:0] main_dram_ctrl_bankmachine5_simplesyncfifo5_din;
wire   [23:0] main_dram_ctrl_bankmachine5_simplesyncfifo5_dout;
reg     [4:0] main_dram_ctrl_bankmachine5_w_cnt = 5'd0;
reg     [4:0] main_dram_ctrl_bankmachine5_r_cnt = 5'd0;
wire    [3:0] main_dram_ctrl_bankmachine5_wrport_adr;
wire   [23:0] main_dram_ctrl_bankmachine5_wrport_dat_r;
wire          main_dram_ctrl_bankmachine5_wrport_we;
wire   [23:0] main_dram_ctrl_bankmachine5_wrport_dat_w;
wire          main_dram_ctrl_bankmachine5_wrport_re;
wire          main_dram_ctrl_bankmachine5_do_read;
wire    [3:0] main_dram_ctrl_bankmachine5_rdport_adr;
wire   [23:0] main_dram_ctrl_bankmachine5_rdport_dat_r;
wire          main_dram_ctrl_bankmachine5_half_way;
wire          main_dram_ctrl_bankmachine5_fifo_in_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine5_fifo_in_payload_addr;
wire          main_dram_ctrl_bankmachine5_fifo_in_first;
wire          main_dram_ctrl_bankmachine5_fifo_in_last;
wire          main_dram_ctrl_bankmachine5_fifo_out_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine5_fifo_out_payload_addr;
wire          main_dram_ctrl_bankmachine5_fifo_out_first;
wire          main_dram_ctrl_bankmachine5_fifo_out_last;
wire          main_dram_ctrl_bankmachine5_sink_sink_valid;
wire          main_dram_ctrl_bankmachine5_sink_sink_ready;
wire          main_dram_ctrl_bankmachine5_sink_sink_first;
wire          main_dram_ctrl_bankmachine5_sink_sink_last;
wire          main_dram_ctrl_bankmachine5_sink_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine5_sink_sink_payload_addr;
wire          main_dram_ctrl_bankmachine5_source_source_valid;
wire          main_dram_ctrl_bankmachine5_source_source_ready;
wire          main_dram_ctrl_bankmachine5_source_source_first;
wire          main_dram_ctrl_bankmachine5_source_source_last;
wire          main_dram_ctrl_bankmachine5_source_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine5_source_source_payload_addr;
wire          main_dram_ctrl_bankmachine5_pipe_valid_sink_valid;
wire          main_dram_ctrl_bankmachine5_pipe_valid_sink_ready;
wire          main_dram_ctrl_bankmachine5_pipe_valid_sink_first;
wire          main_dram_ctrl_bankmachine5_pipe_valid_sink_last;
wire          main_dram_ctrl_bankmachine5_pipe_valid_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine5_pipe_valid_sink_payload_addr;
reg           main_dram_ctrl_bankmachine5_pipe_valid_source_valid = 1'd0;
wire          main_dram_ctrl_bankmachine5_pipe_valid_source_ready;
reg           main_dram_ctrl_bankmachine5_pipe_valid_source_first = 1'd0;
reg           main_dram_ctrl_bankmachine5_pipe_valid_source_last = 1'd0;
reg           main_dram_ctrl_bankmachine5_pipe_valid_source_payload_we = 1'd0;
reg    [20:0] main_dram_ctrl_bankmachine5_pipe_valid_source_payload_addr = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine5_row = 15'd0;
reg           main_dram_ctrl_bankmachine5_row_opened = 1'd0;
reg           main_dram_ctrl_bankmachine5_row_hit = 1'd0;
reg           main_dram_ctrl_bankmachine5_row_open = 1'd0;
reg           main_dram_ctrl_bankmachine5_row_close = 1'd0;
reg           main_dram_ctrl_bankmachine5_row_hit_reeval = 1'd0;
reg           main_dram_ctrl_bankmachine5_row_col_n_addr_sel = 1'd0;
reg           main_dram_ctrl_bankmachine5_pre_n_addr_sel = 1'd0;
wire   [11:0] main_dram_ctrl_bankmachine5_pre_sig;
wire          main_dram_ctrl_bankmachine5_twtpcon_valid;
reg           main_dram_ctrl_bankmachine5_twtpcon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine5_twtpcon_count = 4'd0;
wire          main_dram_ctrl_bankmachine5_trccon_valid;
reg           main_dram_ctrl_bankmachine5_trccon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine5_trccon_count = 4'd4;
wire          main_dram_ctrl_bankmachine5_trascon_valid;
reg           main_dram_ctrl_bankmachine5_trascon_ready = 1'd1;
reg     [2:0] main_dram_ctrl_bankmachine5_trascon_count = 3'd3;
reg    [20:0] main_dram_ctrl_bankmachine5_last_addr_status = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine5_last_active_row_status = 15'd0;
wire          main_dram_ctrl_bankmachine6_req_valid;
wire          main_dram_ctrl_bankmachine6_req_ready;
wire          main_dram_ctrl_bankmachine6_req_we;
wire   [20:0] main_dram_ctrl_bankmachine6_req_addr;
wire          main_dram_ctrl_bankmachine6_req_lock;
reg           main_dram_ctrl_bankmachine6_req_wdata_ready = 1'd0;
reg           main_dram_ctrl_bankmachine6_req_rdata_valid = 1'd0;
wire          main_dram_ctrl_bankmachine6_refresh_req;
reg           main_dram_ctrl_bankmachine6_refresh_gnt = 1'd0;
reg           main_dram_ctrl_bankmachine6_cmd_valid = 1'd0;
reg           main_dram_ctrl_bankmachine6_cmd_ready = 1'd0;
reg    [14:0] main_dram_ctrl_bankmachine6_cmd_payload_a = 15'd0;
wire    [2:0] main_dram_ctrl_bankmachine6_cmd_payload_ba;
reg           main_dram_ctrl_bankmachine6_cmd_payload_cas = 1'd0;
reg           main_dram_ctrl_bankmachine6_cmd_payload_ras = 1'd0;
reg           main_dram_ctrl_bankmachine6_cmd_payload_we = 1'd0;
reg           main_dram_ctrl_bankmachine6_cmd_payload_is_cmd = 1'd0;
reg           main_dram_ctrl_bankmachine6_cmd_payload_is_read = 1'd0;
reg           main_dram_ctrl_bankmachine6_cmd_payload_is_write = 1'd0;
reg     [3:0] main_dram_ctrl_bankmachine6_timer = 4'd0;
wire          main_dram_ctrl_bankmachine6_timer_done;
reg           main_dram_ctrl_bankmachine6_auto_precharge = 1'd0;
wire          main_dram_ctrl_bankmachine6_sink_valid;
wire          main_dram_ctrl_bankmachine6_sink_ready;
reg           main_dram_ctrl_bankmachine6_sink_first = 1'd0;
reg           main_dram_ctrl_bankmachine6_sink_last = 1'd0;
wire          main_dram_ctrl_bankmachine6_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine6_sink_payload_addr;
wire          main_dram_ctrl_bankmachine6_source_valid;
wire          main_dram_ctrl_bankmachine6_source_ready;
wire          main_dram_ctrl_bankmachine6_source_first;
wire          main_dram_ctrl_bankmachine6_source_last;
wire          main_dram_ctrl_bankmachine6_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine6_source_payload_addr;
wire          main_dram_ctrl_bankmachine6_simplesyncfifo6_we;
wire          main_dram_ctrl_bankmachine6_simplesyncfifo6_writable;
wire          main_dram_ctrl_bankmachine6_simplesyncfifo6_re;
wire          main_dram_ctrl_bankmachine6_simplesyncfifo6_readable;
wire   [23:0] main_dram_ctrl_bankmachine6_simplesyncfifo6_din;
wire   [23:0] main_dram_ctrl_bankmachine6_simplesyncfifo6_dout;
reg     [4:0] main_dram_ctrl_bankmachine6_w_cnt = 5'd0;
reg     [4:0] main_dram_ctrl_bankmachine6_r_cnt = 5'd0;
wire    [3:0] main_dram_ctrl_bankmachine6_wrport_adr;
wire   [23:0] main_dram_ctrl_bankmachine6_wrport_dat_r;
wire          main_dram_ctrl_bankmachine6_wrport_we;
wire   [23:0] main_dram_ctrl_bankmachine6_wrport_dat_w;
wire          main_dram_ctrl_bankmachine6_wrport_re;
wire          main_dram_ctrl_bankmachine6_do_read;
wire    [3:0] main_dram_ctrl_bankmachine6_rdport_adr;
wire   [23:0] main_dram_ctrl_bankmachine6_rdport_dat_r;
wire          main_dram_ctrl_bankmachine6_half_way;
wire          main_dram_ctrl_bankmachine6_fifo_in_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine6_fifo_in_payload_addr;
wire          main_dram_ctrl_bankmachine6_fifo_in_first;
wire          main_dram_ctrl_bankmachine6_fifo_in_last;
wire          main_dram_ctrl_bankmachine6_fifo_out_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine6_fifo_out_payload_addr;
wire          main_dram_ctrl_bankmachine6_fifo_out_first;
wire          main_dram_ctrl_bankmachine6_fifo_out_last;
wire          main_dram_ctrl_bankmachine6_sink_sink_valid;
wire          main_dram_ctrl_bankmachine6_sink_sink_ready;
wire          main_dram_ctrl_bankmachine6_sink_sink_first;
wire          main_dram_ctrl_bankmachine6_sink_sink_last;
wire          main_dram_ctrl_bankmachine6_sink_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine6_sink_sink_payload_addr;
wire          main_dram_ctrl_bankmachine6_source_source_valid;
wire          main_dram_ctrl_bankmachine6_source_source_ready;
wire          main_dram_ctrl_bankmachine6_source_source_first;
wire          main_dram_ctrl_bankmachine6_source_source_last;
wire          main_dram_ctrl_bankmachine6_source_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine6_source_source_payload_addr;
wire          main_dram_ctrl_bankmachine6_pipe_valid_sink_valid;
wire          main_dram_ctrl_bankmachine6_pipe_valid_sink_ready;
wire          main_dram_ctrl_bankmachine6_pipe_valid_sink_first;
wire          main_dram_ctrl_bankmachine6_pipe_valid_sink_last;
wire          main_dram_ctrl_bankmachine6_pipe_valid_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine6_pipe_valid_sink_payload_addr;
reg           main_dram_ctrl_bankmachine6_pipe_valid_source_valid = 1'd0;
wire          main_dram_ctrl_bankmachine6_pipe_valid_source_ready;
reg           main_dram_ctrl_bankmachine6_pipe_valid_source_first = 1'd0;
reg           main_dram_ctrl_bankmachine6_pipe_valid_source_last = 1'd0;
reg           main_dram_ctrl_bankmachine6_pipe_valid_source_payload_we = 1'd0;
reg    [20:0] main_dram_ctrl_bankmachine6_pipe_valid_source_payload_addr = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine6_row = 15'd0;
reg           main_dram_ctrl_bankmachine6_row_opened = 1'd0;
reg           main_dram_ctrl_bankmachine6_row_hit = 1'd0;
reg           main_dram_ctrl_bankmachine6_row_open = 1'd0;
reg           main_dram_ctrl_bankmachine6_row_close = 1'd0;
reg           main_dram_ctrl_bankmachine6_row_hit_reeval = 1'd0;
reg           main_dram_ctrl_bankmachine6_row_col_n_addr_sel = 1'd0;
reg           main_dram_ctrl_bankmachine6_pre_n_addr_sel = 1'd0;
wire   [11:0] main_dram_ctrl_bankmachine6_pre_sig;
wire          main_dram_ctrl_bankmachine6_twtpcon_valid;
reg           main_dram_ctrl_bankmachine6_twtpcon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine6_twtpcon_count = 4'd0;
wire          main_dram_ctrl_bankmachine6_trccon_valid;
reg           main_dram_ctrl_bankmachine6_trccon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine6_trccon_count = 4'd4;
wire          main_dram_ctrl_bankmachine6_trascon_valid;
reg           main_dram_ctrl_bankmachine6_trascon_ready = 1'd1;
reg     [2:0] main_dram_ctrl_bankmachine6_trascon_count = 3'd3;
reg    [20:0] main_dram_ctrl_bankmachine6_last_addr_status = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine6_last_active_row_status = 15'd0;
wire          main_dram_ctrl_bankmachine7_req_valid;
wire          main_dram_ctrl_bankmachine7_req_ready;
wire          main_dram_ctrl_bankmachine7_req_we;
wire   [20:0] main_dram_ctrl_bankmachine7_req_addr;
wire          main_dram_ctrl_bankmachine7_req_lock;
reg           main_dram_ctrl_bankmachine7_req_wdata_ready = 1'd0;
reg           main_dram_ctrl_bankmachine7_req_rdata_valid = 1'd0;
wire          main_dram_ctrl_bankmachine7_refresh_req;
reg           main_dram_ctrl_bankmachine7_refresh_gnt = 1'd0;
reg           main_dram_ctrl_bankmachine7_cmd_valid = 1'd0;
reg           main_dram_ctrl_bankmachine7_cmd_ready = 1'd0;
reg    [14:0] main_dram_ctrl_bankmachine7_cmd_payload_a = 15'd0;
wire    [2:0] main_dram_ctrl_bankmachine7_cmd_payload_ba;
reg           main_dram_ctrl_bankmachine7_cmd_payload_cas = 1'd0;
reg           main_dram_ctrl_bankmachine7_cmd_payload_ras = 1'd0;
reg           main_dram_ctrl_bankmachine7_cmd_payload_we = 1'd0;
reg           main_dram_ctrl_bankmachine7_cmd_payload_is_cmd = 1'd0;
reg           main_dram_ctrl_bankmachine7_cmd_payload_is_read = 1'd0;
reg           main_dram_ctrl_bankmachine7_cmd_payload_is_write = 1'd0;
reg     [3:0] main_dram_ctrl_bankmachine7_timer = 4'd0;
wire          main_dram_ctrl_bankmachine7_timer_done;
reg           main_dram_ctrl_bankmachine7_auto_precharge = 1'd0;
wire          main_dram_ctrl_bankmachine7_sink_valid;
wire          main_dram_ctrl_bankmachine7_sink_ready;
reg           main_dram_ctrl_bankmachine7_sink_first = 1'd0;
reg           main_dram_ctrl_bankmachine7_sink_last = 1'd0;
wire          main_dram_ctrl_bankmachine7_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine7_sink_payload_addr;
wire          main_dram_ctrl_bankmachine7_source_valid;
wire          main_dram_ctrl_bankmachine7_source_ready;
wire          main_dram_ctrl_bankmachine7_source_first;
wire          main_dram_ctrl_bankmachine7_source_last;
wire          main_dram_ctrl_bankmachine7_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine7_source_payload_addr;
wire          main_dram_ctrl_bankmachine7_simplesyncfifo7_we;
wire          main_dram_ctrl_bankmachine7_simplesyncfifo7_writable;
wire          main_dram_ctrl_bankmachine7_simplesyncfifo7_re;
wire          main_dram_ctrl_bankmachine7_simplesyncfifo7_readable;
wire   [23:0] main_dram_ctrl_bankmachine7_simplesyncfifo7_din;
wire   [23:0] main_dram_ctrl_bankmachine7_simplesyncfifo7_dout;
reg     [4:0] main_dram_ctrl_bankmachine7_w_cnt = 5'd0;
reg     [4:0] main_dram_ctrl_bankmachine7_r_cnt = 5'd0;
wire    [3:0] main_dram_ctrl_bankmachine7_wrport_adr;
wire   [23:0] main_dram_ctrl_bankmachine7_wrport_dat_r;
wire          main_dram_ctrl_bankmachine7_wrport_we;
wire   [23:0] main_dram_ctrl_bankmachine7_wrport_dat_w;
wire          main_dram_ctrl_bankmachine7_wrport_re;
wire          main_dram_ctrl_bankmachine7_do_read;
wire    [3:0] main_dram_ctrl_bankmachine7_rdport_adr;
wire   [23:0] main_dram_ctrl_bankmachine7_rdport_dat_r;
wire          main_dram_ctrl_bankmachine7_half_way;
wire          main_dram_ctrl_bankmachine7_fifo_in_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine7_fifo_in_payload_addr;
wire          main_dram_ctrl_bankmachine7_fifo_in_first;
wire          main_dram_ctrl_bankmachine7_fifo_in_last;
wire          main_dram_ctrl_bankmachine7_fifo_out_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine7_fifo_out_payload_addr;
wire          main_dram_ctrl_bankmachine7_fifo_out_first;
wire          main_dram_ctrl_bankmachine7_fifo_out_last;
wire          main_dram_ctrl_bankmachine7_sink_sink_valid;
wire          main_dram_ctrl_bankmachine7_sink_sink_ready;
wire          main_dram_ctrl_bankmachine7_sink_sink_first;
wire          main_dram_ctrl_bankmachine7_sink_sink_last;
wire          main_dram_ctrl_bankmachine7_sink_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine7_sink_sink_payload_addr;
wire          main_dram_ctrl_bankmachine7_source_source_valid;
wire          main_dram_ctrl_bankmachine7_source_source_ready;
wire          main_dram_ctrl_bankmachine7_source_source_first;
wire          main_dram_ctrl_bankmachine7_source_source_last;
wire          main_dram_ctrl_bankmachine7_source_source_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine7_source_source_payload_addr;
wire          main_dram_ctrl_bankmachine7_pipe_valid_sink_valid;
wire          main_dram_ctrl_bankmachine7_pipe_valid_sink_ready;
wire          main_dram_ctrl_bankmachine7_pipe_valid_sink_first;
wire          main_dram_ctrl_bankmachine7_pipe_valid_sink_last;
wire          main_dram_ctrl_bankmachine7_pipe_valid_sink_payload_we;
wire   [20:0] main_dram_ctrl_bankmachine7_pipe_valid_sink_payload_addr;
reg           main_dram_ctrl_bankmachine7_pipe_valid_source_valid = 1'd0;
wire          main_dram_ctrl_bankmachine7_pipe_valid_source_ready;
reg           main_dram_ctrl_bankmachine7_pipe_valid_source_first = 1'd0;
reg           main_dram_ctrl_bankmachine7_pipe_valid_source_last = 1'd0;
reg           main_dram_ctrl_bankmachine7_pipe_valid_source_payload_we = 1'd0;
reg    [20:0] main_dram_ctrl_bankmachine7_pipe_valid_source_payload_addr = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine7_row = 15'd0;
reg           main_dram_ctrl_bankmachine7_row_opened = 1'd0;
reg           main_dram_ctrl_bankmachine7_row_hit = 1'd0;
reg           main_dram_ctrl_bankmachine7_row_open = 1'd0;
reg           main_dram_ctrl_bankmachine7_row_close = 1'd0;
reg           main_dram_ctrl_bankmachine7_row_hit_reeval = 1'd0;
reg           main_dram_ctrl_bankmachine7_row_col_n_addr_sel = 1'd0;
reg           main_dram_ctrl_bankmachine7_pre_n_addr_sel = 1'd0;
wire   [11:0] main_dram_ctrl_bankmachine7_pre_sig;
wire          main_dram_ctrl_bankmachine7_twtpcon_valid;
reg           main_dram_ctrl_bankmachine7_twtpcon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine7_twtpcon_count = 4'd0;
wire          main_dram_ctrl_bankmachine7_trccon_valid;
reg           main_dram_ctrl_bankmachine7_trccon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_bankmachine7_trccon_count = 4'd4;
wire          main_dram_ctrl_bankmachine7_trascon_valid;
reg           main_dram_ctrl_bankmachine7_trascon_ready = 1'd1;
reg     [2:0] main_dram_ctrl_bankmachine7_trascon_count = 3'd3;
reg    [20:0] main_dram_ctrl_bankmachine7_last_addr_status = 21'd0;
reg    [14:0] main_dram_ctrl_bankmachine7_last_active_row_status = 15'd0;
wire          main_dram_ctrl_ras_allowed;
wire          main_dram_ctrl_cas_allowed;
wire    [2:0] main_dram_ctrl_rdcmdphase;
wire    [2:0] main_dram_ctrl_wrcmdphase;
reg           main_dram_ctrl_choose_cmd_want_reads = 1'd0;
reg           main_dram_ctrl_choose_cmd_want_writes = 1'd0;
reg           main_dram_ctrl_choose_cmd_want_cmds = 1'd0;
reg           main_dram_ctrl_choose_cmd_want_activates = 1'd0;
wire          main_dram_ctrl_choose_cmd_cmd_valid;
reg           main_dram_ctrl_choose_cmd_cmd_ready = 1'd0;
wire   [14:0] main_dram_ctrl_choose_cmd_cmd_payload_a;
wire    [2:0] main_dram_ctrl_choose_cmd_cmd_payload_ba;
reg           main_dram_ctrl_choose_cmd_cmd_payload_cas = 1'd0;
reg           main_dram_ctrl_choose_cmd_cmd_payload_ras = 1'd0;
reg           main_dram_ctrl_choose_cmd_cmd_payload_we = 1'd0;
wire          main_dram_ctrl_choose_cmd_cmd_payload_is_cmd;
wire          main_dram_ctrl_choose_cmd_cmd_payload_is_read;
wire          main_dram_ctrl_choose_cmd_cmd_payload_is_write;
reg     [7:0] main_dram_ctrl_choose_cmd_valids = 8'd0;
wire    [7:0] main_dram_ctrl_choose_cmd_request;
reg     [2:0] main_dram_ctrl_choose_cmd_grant = 3'd0;
wire          main_dram_ctrl_choose_cmd_ce;
reg           main_dram_ctrl_choose_req_want_reads = 1'd0;
reg           main_dram_ctrl_choose_req_want_writes = 1'd0;
reg           main_dram_ctrl_choose_req_want_cmds = 1'd0;
reg           main_dram_ctrl_choose_req_want_activates = 1'd0;
wire          main_dram_ctrl_choose_req_cmd_valid;
reg           main_dram_ctrl_choose_req_cmd_ready = 1'd0;
wire   [14:0] main_dram_ctrl_choose_req_cmd_payload_a;
wire    [2:0] main_dram_ctrl_choose_req_cmd_payload_ba;
reg           main_dram_ctrl_choose_req_cmd_payload_cas = 1'd0;
reg           main_dram_ctrl_choose_req_cmd_payload_ras = 1'd0;
reg           main_dram_ctrl_choose_req_cmd_payload_we = 1'd0;
wire          main_dram_ctrl_choose_req_cmd_payload_is_cmd;
wire          main_dram_ctrl_choose_req_cmd_payload_is_read;
wire          main_dram_ctrl_choose_req_cmd_payload_is_write;
reg     [7:0] main_dram_ctrl_choose_req_valids = 8'd0;
wire    [7:0] main_dram_ctrl_choose_req_request;
reg     [2:0] main_dram_ctrl_choose_req_grant = 3'd0;
wire          main_dram_ctrl_choose_req_ce;
reg    [14:0] main_dram_ctrl_nop_a = 15'd0;
reg     [2:0] main_dram_ctrl_nop_ba = 3'd0;
reg     [1:0] main_dram_ctrl_steerer_sel0 = 2'd0;
reg     [1:0] main_dram_ctrl_steerer_sel1 = 2'd0;
reg     [1:0] main_dram_ctrl_steerer_sel2 = 2'd0;
reg     [1:0] main_dram_ctrl_steerer_sel3 = 2'd0;
reg     [1:0] main_dram_ctrl_steerer_sel4 = 2'd0;
reg     [1:0] main_dram_ctrl_steerer_sel5 = 2'd0;
reg     [1:0] main_dram_ctrl_steerer_sel6 = 2'd0;
reg     [1:0] main_dram_ctrl_steerer_sel7 = 2'd0;
reg           main_dram_ctrl_steerer0 = 1'd1;
reg           main_dram_ctrl_steerer1 = 1'd1;
reg           main_dram_ctrl_steerer2 = 1'd1;
reg           main_dram_ctrl_steerer3 = 1'd1;
reg           main_dram_ctrl_steerer4 = 1'd1;
reg           main_dram_ctrl_steerer5 = 1'd1;
reg           main_dram_ctrl_steerer6 = 1'd1;
reg           main_dram_ctrl_steerer7 = 1'd1;
wire          main_dram_ctrl_trrdcon_valid;
reg           main_dram_ctrl_trrdcon_ready = 1'd1;
reg     [2:0] main_dram_ctrl_trrdcon_count = 3'd2;
wire          main_dram_ctrl_tfawcon_valid;
reg           main_dram_ctrl_tfawcon_ready = 1'd1;
reg     [2:0] main_dram_ctrl_tfawcon_count = 3'd0;
reg     [2:0] main_dram_ctrl_tfawcon_access = 3'd3;
wire          main_dram_ctrl_tfawcon_handshake;
reg     [7:0] main_dram_ctrl_tfawcon_shift_window = 8'd0;
reg     [3:0] main_dram_ctrl_tfawcon_rst_cnt = 4'd8;
reg           main_dram_ctrl_tfawcon_rst_done = 1'd0;
reg           main_dram_ctrl_tfawcon_tfaw_range_last_bit = 1'd0;
wire          main_dram_ctrl_tfawcon_tfaw_range_almost_last_bit;
wire          main_dram_ctrl_tccdcon_valid;
reg           main_dram_ctrl_tccdcon_ready = 1'd1;
reg     [4:0] main_dram_ctrl_tccdcon_count = 5'd8;
wire    [3:0] main_dram_ctrl_twtrcon_init;
wire          main_dram_ctrl_twtrcon_valid;
reg           main_dram_ctrl_twtrcon_ready = 1'd1;
reg     [3:0] main_dram_ctrl_twtrcon_count = 4'd0;
wire          main_dram_ctrl_read_available;
wire          main_dram_ctrl_write_available;
reg           main_dram_ctrl_en0 = 1'd0;
wire          main_dram_ctrl_max_time0;
reg     [4:0] main_dram_ctrl_time0 = 5'd0;
reg           main_dram_ctrl_en1 = 1'd0;
wire          main_dram_ctrl_max_time1;
reg     [3:0] main_dram_ctrl_time1 = 4'd0;
wire          main_dram_ctrl_go_to_refresh;
reg           main_dram_ctrl_init_start = 1'd0;
wire          main_dram_ctrl_init_complete;
reg           main_init_done_storage = 1'd0;
reg           main_init_done_re = 1'd0;
reg           main_init_error_storage = 1'd0;
reg           main_init_error_re = 1'd0;
wire   [29:0] main_wb_bus_adr;
wire   [31:0] main_wb_bus_dat_w;
wire   [31:0] main_wb_bus_dat_r;
wire    [3:0] main_wb_bus_sel;
wire          main_wb_bus_cyc;
wire          main_wb_bus_stb;
wire          main_wb_bus_ack;
wire          main_wb_bus_we;
wire    [2:0] main_wb_bus_cti;
wire    [1:0] main_wb_bus_bte;
wire          main_wb_bus_err;
wire          main_user_enable;
reg           main_port_cmd_valid = 1'd0;
wire          main_port_cmd_ready;
reg           main_port_cmd_payload_we = 1'd0;
reg    [23:0] main_port_cmd_payload_addr = 24'd0;
wire          main_port_wdata_valid;
wire          main_port_wdata_ready;
wire          main_port_wdata_first;
wire          main_port_wdata_last;
wire  [255:0] main_port_wdata_payload_data;
wire   [31:0] main_port_wdata_payload_we;
wire          main_port_rdata_valid;
wire          main_port_rdata_ready;
reg           main_port_rdata_first = 1'd0;
reg           main_port_rdata_last = 1'd0;
wire  [255:0] main_port_rdata_payload_data;
reg           main_new_port_flush = 1'd0;
reg           main_new_port_cmd_valid = 1'd0;
reg           main_new_port_cmd_ready = 1'd0;
reg           main_new_port_cmd_last = 1'd0;
reg           main_new_port_cmd_payload_we = 1'd0;
reg    [26:0] main_new_port_cmd_payload_addr = 27'd0;
wire          main_new_port_wdata_valid;
wire          main_new_port_wdata_ready;
wire          main_new_port_wdata_first;
wire          main_new_port_wdata_last;
wire   [31:0] main_new_port_wdata_payload_data;
wire    [3:0] main_new_port_wdata_payload_we;
reg           main_new_port_rdata_valid = 1'd0;
wire          main_new_port_rdata_ready;
reg           main_new_port_rdata_first = 1'd0;
reg           main_new_port_rdata_last = 1'd0;
reg    [31:0] main_new_port_rdata_payload_data = 32'd0;
reg     [7:0] main_litedramnativeportconverter_sel = 8'd0;
reg           main_litedramnativeportconverter_cmd_buffer_sink_valid = 1'd0;
wire          main_litedramnativeportconverter_cmd_buffer_sink_ready;
reg           main_litedramnativeportconverter_cmd_buffer_sink_first = 1'd0;
reg           main_litedramnativeportconverter_cmd_buffer_sink_last = 1'd0;
reg     [7:0] main_litedramnativeportconverter_cmd_buffer_sink_payload_sel = 8'd0;
reg           main_litedramnativeportconverter_cmd_buffer_sink_payload_we = 1'd0;
wire          main_litedramnativeportconverter_cmd_buffer_source_valid;
wire          main_litedramnativeportconverter_cmd_buffer_source_ready;
wire          main_litedramnativeportconverter_cmd_buffer_source_first;
wire          main_litedramnativeportconverter_cmd_buffer_source_last;
wire    [7:0] main_litedramnativeportconverter_cmd_buffer_source_payload_sel;
wire          main_litedramnativeportconverter_cmd_buffer_source_payload_we;
reg    [26:0] main_litedramnativeportconverter_cmd_addr = 27'd0;
reg           main_litedramnativeportconverter_cmd_we = 1'd0;
reg           main_litedramnativeportconverter_cmd_last = 1'd0;
wire          main_litedramnativeportconverter_next_cmd;
wire          main_litedramnativeportconverter_addr_changed;
wire          main_litedramnativeportconverter_wdata_finished;
reg           main_litedramnativeportconverter_rdata_finished = 1'd0;
reg           main_litedramnativeportconverter_read_lock = 1'd0;
reg           main_litedramnativeportconverter_read_unlocked = 1'd0;
wire          main_litedramnativeportconverter_rw_collision;
wire          main_litedramnativeportconverter_rdata_fifo_sink_valid;
wire          main_litedramnativeportconverter_rdata_fifo_sink_ready;
wire          main_litedramnativeportconverter_rdata_fifo_sink_first;
wire          main_litedramnativeportconverter_rdata_fifo_sink_last;
wire  [255:0] main_litedramnativeportconverter_rdata_fifo_sink_payload_data;
wire          main_litedramnativeportconverter_rdata_fifo_source_valid;
wire          main_litedramnativeportconverter_rdata_fifo_source_ready;
wire          main_litedramnativeportconverter_rdata_fifo_source_first;
wire          main_litedramnativeportconverter_rdata_fifo_source_last;
wire  [255:0] main_litedramnativeportconverter_rdata_fifo_source_payload_data;
wire          main_litedramnativeportconverter_rdata_fifo_syncfifo_we;
wire          main_litedramnativeportconverter_rdata_fifo_syncfifo_writable;
wire          main_litedramnativeportconverter_rdata_fifo_syncfifo_re;
wire          main_litedramnativeportconverter_rdata_fifo_syncfifo_readable;
wire  [257:0] main_litedramnativeportconverter_rdata_fifo_syncfifo_din;
wire  [257:0] main_litedramnativeportconverter_rdata_fifo_syncfifo_dout;
reg     [2:0] main_litedramnativeportconverter_rdata_fifo_level = 3'd0;
reg           main_litedramnativeportconverter_rdata_fifo_replace = 1'd0;
reg     [2:0] main_litedramnativeportconverter_rdata_fifo_produce = 3'd0;
reg     [2:0] main_litedramnativeportconverter_rdata_fifo_consume = 3'd0;
reg     [2:0] main_litedramnativeportconverter_rdata_fifo_wrport_adr = 3'd0;
wire  [257:0] main_litedramnativeportconverter_rdata_fifo_wrport_dat_r;
wire          main_litedramnativeportconverter_rdata_fifo_wrport_we;
wire  [257:0] main_litedramnativeportconverter_rdata_fifo_wrport_dat_w;
wire          main_litedramnativeportconverter_rdata_fifo_do_read;
wire    [2:0] main_litedramnativeportconverter_rdata_fifo_rdport_adr;
wire  [257:0] main_litedramnativeportconverter_rdata_fifo_rdport_dat_r;
wire  [255:0] main_litedramnativeportconverter_rdata_fifo_fifo_in_payload_data;
wire          main_litedramnativeportconverter_rdata_fifo_fifo_in_first;
wire          main_litedramnativeportconverter_rdata_fifo_fifo_in_last;
wire  [255:0] main_litedramnativeportconverter_rdata_fifo_fifo_out_payload_data;
wire          main_litedramnativeportconverter_rdata_fifo_fifo_out_first;
wire          main_litedramnativeportconverter_rdata_fifo_fifo_out_last;
wire          main_litedramnativeportconverter_rdata_converter_sink_valid;
wire          main_litedramnativeportconverter_rdata_converter_sink_ready;
wire          main_litedramnativeportconverter_rdata_converter_sink_first;
wire          main_litedramnativeportconverter_rdata_converter_sink_last;
wire  [255:0] main_litedramnativeportconverter_rdata_converter_sink_payload_data;
wire          main_litedramnativeportconverter_rdata_converter_source_valid;
reg           main_litedramnativeportconverter_rdata_converter_source_ready = 1'd0;
wire          main_litedramnativeportconverter_rdata_converter_source_first;
wire          main_litedramnativeportconverter_rdata_converter_source_last;
wire   [31:0] main_litedramnativeportconverter_rdata_converter_source_payload_data;
wire          main_litedramnativeportconverter_rdata_converter_converter_sink_valid;
wire          main_litedramnativeportconverter_rdata_converter_converter_sink_ready;
wire          main_litedramnativeportconverter_rdata_converter_converter_sink_first;
wire          main_litedramnativeportconverter_rdata_converter_converter_sink_last;
reg   [255:0] main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data = 256'd0;
wire          main_litedramnativeportconverter_rdata_converter_converter_source_valid;
wire          main_litedramnativeportconverter_rdata_converter_converter_source_ready;
wire          main_litedramnativeportconverter_rdata_converter_converter_source_first;
wire          main_litedramnativeportconverter_rdata_converter_converter_source_last;
reg    [31:0] main_litedramnativeportconverter_rdata_converter_converter_source_payload_data = 32'd0;
wire          main_litedramnativeportconverter_rdata_converter_converter_source_payload_valid_token_count;
reg     [2:0] main_litedramnativeportconverter_rdata_converter_converter_mux = 3'd0;
wire          main_litedramnativeportconverter_rdata_converter_converter_first;
wire          main_litedramnativeportconverter_rdata_converter_converter_last;
wire          main_litedramnativeportconverter_rdata_converter_source_source_valid;
wire          main_litedramnativeportconverter_rdata_converter_source_source_ready;
wire          main_litedramnativeportconverter_rdata_converter_source_source_first;
wire          main_litedramnativeportconverter_rdata_converter_source_source_last;
wire   [31:0] main_litedramnativeportconverter_rdata_converter_source_source_payload_data;
reg     [7:0] main_litedramnativeportconverter_rdata_chunk = 8'd1;
wire          main_litedramnativeportconverter_rdata_chunk_valid;
wire          main_litedramnativeportconverter_wdata_fifo_sink_valid;
wire          main_litedramnativeportconverter_wdata_fifo_sink_ready;
wire          main_litedramnativeportconverter_wdata_fifo_sink_first;
wire          main_litedramnativeportconverter_wdata_fifo_sink_last;
wire   [31:0] main_litedramnativeportconverter_wdata_fifo_sink_payload_data;
wire    [3:0] main_litedramnativeportconverter_wdata_fifo_sink_payload_we;
wire          main_litedramnativeportconverter_wdata_fifo_source_valid;
reg           main_litedramnativeportconverter_wdata_fifo_source_ready = 1'd0;
wire          main_litedramnativeportconverter_wdata_fifo_source_first;
wire          main_litedramnativeportconverter_wdata_fifo_source_last;
wire   [31:0] main_litedramnativeportconverter_wdata_fifo_source_payload_data;
wire    [3:0] main_litedramnativeportconverter_wdata_fifo_source_payload_we;
wire          main_litedramnativeportconverter_wdata_fifo_syncfifo_we;
wire          main_litedramnativeportconverter_wdata_fifo_syncfifo_writable;
wire          main_litedramnativeportconverter_wdata_fifo_syncfifo_re;
wire          main_litedramnativeportconverter_wdata_fifo_syncfifo_readable;
wire   [37:0] main_litedramnativeportconverter_wdata_fifo_syncfifo_din;
wire   [37:0] main_litedramnativeportconverter_wdata_fifo_syncfifo_dout;
reg     [2:0] main_litedramnativeportconverter_wdata_fifo_level = 3'd0;
reg           main_litedramnativeportconverter_wdata_fifo_replace = 1'd0;
reg     [2:0] main_litedramnativeportconverter_wdata_fifo_produce = 3'd0;
reg     [2:0] main_litedramnativeportconverter_wdata_fifo_consume = 3'd0;
reg     [2:0] main_litedramnativeportconverter_wdata_fifo_wrport_adr = 3'd0;
wire   [37:0] main_litedramnativeportconverter_wdata_fifo_wrport_dat_r;
wire          main_litedramnativeportconverter_wdata_fifo_wrport_we;
wire   [37:0] main_litedramnativeportconverter_wdata_fifo_wrport_dat_w;
wire          main_litedramnativeportconverter_wdata_fifo_do_read;
wire    [2:0] main_litedramnativeportconverter_wdata_fifo_rdport_adr;
wire   [37:0] main_litedramnativeportconverter_wdata_fifo_rdport_dat_r;
wire   [31:0] main_litedramnativeportconverter_wdata_fifo_fifo_in_payload_data;
wire    [3:0] main_litedramnativeportconverter_wdata_fifo_fifo_in_payload_we;
wire          main_litedramnativeportconverter_wdata_fifo_fifo_in_first;
wire          main_litedramnativeportconverter_wdata_fifo_fifo_in_last;
wire   [31:0] main_litedramnativeportconverter_wdata_fifo_fifo_out_payload_data;
wire    [3:0] main_litedramnativeportconverter_wdata_fifo_fifo_out_payload_we;
wire          main_litedramnativeportconverter_wdata_fifo_fifo_out_first;
wire          main_litedramnativeportconverter_wdata_fifo_fifo_out_last;
wire          main_litedramnativeportconverter_wdata_buffer_sink_sink_valid;
wire          main_litedramnativeportconverter_wdata_buffer_sink_sink_ready;
reg           main_litedramnativeportconverter_wdata_buffer_sink_sink_first = 1'd0;
reg           main_litedramnativeportconverter_wdata_buffer_sink_sink_last = 1'd0;
wire  [255:0] main_litedramnativeportconverter_wdata_buffer_sink_sink_payload_data;
wire   [31:0] main_litedramnativeportconverter_wdata_buffer_sink_sink_payload_we;
wire          main_litedramnativeportconverter_wdata_buffer_source_source_valid;
wire          main_litedramnativeportconverter_wdata_buffer_source_source_ready;
wire          main_litedramnativeportconverter_wdata_buffer_source_source_first;
wire          main_litedramnativeportconverter_wdata_buffer_source_source_last;
wire  [255:0] main_litedramnativeportconverter_wdata_buffer_source_source_payload_data;
wire   [31:0] main_litedramnativeportconverter_wdata_buffer_source_source_payload_we;
wire          main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_valid;
wire          main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_ready;
wire          main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_first;
wire          main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_last;
wire  [255:0] main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_data;
wire   [31:0] main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_we;
reg           main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid = 1'd0;
wire          main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_ready;
reg           main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_first = 1'd0;
reg           main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_last = 1'd0;
reg   [255:0] main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_data = 256'd0;
reg    [31:0] main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_we = 32'd0;
reg           main_litedramnativeportconverter_wdata_converter_sink_valid = 1'd0;
wire          main_litedramnativeportconverter_wdata_converter_sink_ready;
reg           main_litedramnativeportconverter_wdata_converter_sink_first = 1'd0;
reg           main_litedramnativeportconverter_wdata_converter_sink_last = 1'd0;
reg    [31:0] main_litedramnativeportconverter_wdata_converter_sink_payload_data = 32'd0;
reg     [3:0] main_litedramnativeportconverter_wdata_converter_sink_payload_we = 4'd0;
wire          main_litedramnativeportconverter_wdata_converter_source_valid;
wire          main_litedramnativeportconverter_wdata_converter_source_ready;
wire          main_litedramnativeportconverter_wdata_converter_source_first;
wire          main_litedramnativeportconverter_wdata_converter_source_last;
reg   [255:0] main_litedramnativeportconverter_wdata_converter_source_payload_data = 256'd0;
reg    [31:0] main_litedramnativeportconverter_wdata_converter_source_payload_we = 32'd0;
wire          main_litedramnativeportconverter_wdata_converter_converter_sink_valid;
wire          main_litedramnativeportconverter_wdata_converter_converter_sink_ready;
wire          main_litedramnativeportconverter_wdata_converter_converter_sink_first;
wire          main_litedramnativeportconverter_wdata_converter_converter_sink_last;
wire   [35:0] main_litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
wire          main_litedramnativeportconverter_wdata_converter_converter_source_valid;
wire          main_litedramnativeportconverter_wdata_converter_converter_source_ready;
reg           main_litedramnativeportconverter_wdata_converter_converter_source_first = 1'd0;
reg           main_litedramnativeportconverter_wdata_converter_converter_source_last = 1'd0;
reg   [287:0] main_litedramnativeportconverter_wdata_converter_converter_source_payload_data = 288'd0;
reg     [3:0] main_litedramnativeportconverter_wdata_converter_converter_source_payload_valid_token_count = 4'd0;
reg     [2:0] main_litedramnativeportconverter_wdata_converter_converter_demux = 3'd0;
wire          main_litedramnativeportconverter_wdata_converter_converter_load_part;
reg           main_litedramnativeportconverter_wdata_converter_converter_strobe_all = 1'd0;
wire          main_litedramnativeportconverter_wdata_converter_source_source_valid;
wire          main_litedramnativeportconverter_wdata_converter_source_source_ready;
wire          main_litedramnativeportconverter_wdata_converter_source_source_first;
wire          main_litedramnativeportconverter_wdata_converter_source_source_last;
wire  [287:0] main_litedramnativeportconverter_wdata_converter_source_source_payload_data;
reg     [7:0] main_litedramnativeportconverter_wdata_chunk = 8'd1;
wire          main_litedramnativeportconverter_wdata_chunk_valid;
reg    [31:0] main_litedramnativeportconverter_wdata_sel = 32'd0;
wire          main_aw_valid;
wire          main_aw_ready;
reg           main_aw_first = 1'd0;
reg           main_aw_last = 1'd0;
wire   [28:0] main_aw_payload_addr;
wire    [1:0] main_aw_payload_burst;
wire    [7:0] main_aw_payload_len;
wire    [2:0] main_aw_payload_size;
reg           main_aw_payload_lock = 1'd0;
reg     [2:0] main_aw_payload_prot = 3'd0;
reg     [3:0] main_aw_payload_cache = 4'd0;
reg     [3:0] main_aw_payload_qos = 4'd0;
reg     [3:0] main_aw_payload_region = 4'd0;
wire    [7:0] main_aw_param_id;
reg           main_aw_param_dest = 1'd0;
reg           main_aw_param_user = 1'd0;
wire          main_w_valid;
reg           main_w_ready = 1'd0;
reg           main_w_first = 1'd0;
wire          main_w_last;
wire   [31:0] main_w_payload_data;
wire    [3:0] main_w_payload_strb;
reg           main_w_param_id = 1'd0;
reg           main_w_param_dest = 1'd0;
reg           main_w_param_user = 1'd0;
wire          main_b_valid;
wire          main_b_ready;
wire          main_b_first;
wire          main_b_last;
wire    [1:0] main_b_payload_resp;
wire    [7:0] main_b_param_id;
wire          main_ar_valid;
wire          main_ar_ready;
reg           main_ar_first = 1'd0;
reg           main_ar_last = 1'd0;
wire   [28:0] main_ar_payload_addr;
wire    [1:0] main_ar_payload_burst;
wire    [7:0] main_ar_payload_len;
wire    [2:0] main_ar_payload_size;
reg           main_ar_payload_lock = 1'd0;
reg     [2:0] main_ar_payload_prot = 3'd0;
reg     [3:0] main_ar_payload_cache = 4'd0;
reg     [3:0] main_ar_payload_qos = 4'd0;
reg     [3:0] main_ar_payload_region = 4'd0;
wire    [7:0] main_ar_param_id;
reg           main_ar_param_dest = 1'd0;
reg           main_ar_param_user = 1'd0;
wire          main_r_valid;
wire          main_r_ready;
wire          main_r_first;
wire          main_r_last;
reg     [1:0] main_r_payload_resp = 2'd0;
wire   [31:0] main_r_payload_data;
wire    [7:0] main_r_param_id;
wire          main_r_param_dest;
wire          main_r_param_user;
wire          main_write_cmd_request;
wire          main_write_cmd_grant;
wire          main_write_can_write;
wire          main_write_aw_valid;
reg           main_write_aw_ready = 1'd0;
wire          main_write_aw_first;
wire          main_write_aw_last;
wire   [28:0] main_write_aw_payload_addr;
wire    [7:0] main_write_aw_param_id;
wire          main_write_sink_sink_valid;
wire          main_write_sink_sink_ready;
wire          main_write_sink_sink_first;
wire          main_write_sink_sink_last;
wire   [28:0] main_write_sink_sink_payload_addr;
wire    [1:0] main_write_sink_sink_payload_burst;
wire    [7:0] main_write_sink_sink_payload_len;
wire    [2:0] main_write_sink_sink_payload_size;
wire          main_write_sink_sink_payload_lock;
wire    [2:0] main_write_sink_sink_payload_prot;
wire    [3:0] main_write_sink_sink_payload_cache;
wire    [3:0] main_write_sink_sink_payload_qos;
wire    [3:0] main_write_sink_sink_payload_region;
wire    [7:0] main_write_sink_sink_param_id;
wire          main_write_sink_sink_param_dest;
wire          main_write_sink_sink_param_user;
wire          main_write_source_source_valid;
reg           main_write_source_source_ready = 1'd0;
wire          main_write_source_source_first;
wire          main_write_source_source_last;
wire   [28:0] main_write_source_source_payload_addr;
wire    [1:0] main_write_source_source_payload_burst;
wire    [7:0] main_write_source_source_payload_len;
wire    [2:0] main_write_source_source_payload_size;
wire          main_write_source_source_payload_lock;
wire    [2:0] main_write_source_source_payload_prot;
wire    [3:0] main_write_source_source_payload_cache;
wire    [3:0] main_write_source_source_payload_qos;
wire    [3:0] main_write_source_source_payload_region;
wire    [7:0] main_write_source_source_param_id;
wire          main_write_source_source_param_dest;
wire          main_write_source_source_param_user;
wire          main_write_pipe_valid_sink_valid;
wire          main_write_pipe_valid_sink_ready;
wire          main_write_pipe_valid_sink_first;
wire          main_write_pipe_valid_sink_last;
wire   [28:0] main_write_pipe_valid_sink_payload_addr;
wire    [1:0] main_write_pipe_valid_sink_payload_burst;
wire    [7:0] main_write_pipe_valid_sink_payload_len;
wire    [2:0] main_write_pipe_valid_sink_payload_size;
wire          main_write_pipe_valid_sink_payload_lock;
wire    [2:0] main_write_pipe_valid_sink_payload_prot;
wire    [3:0] main_write_pipe_valid_sink_payload_cache;
wire    [3:0] main_write_pipe_valid_sink_payload_qos;
wire    [3:0] main_write_pipe_valid_sink_payload_region;
wire    [7:0] main_write_pipe_valid_sink_param_id;
wire          main_write_pipe_valid_sink_param_dest;
wire          main_write_pipe_valid_sink_param_user;
reg           main_write_pipe_valid_source_valid = 1'd0;
wire          main_write_pipe_valid_source_ready;
reg           main_write_pipe_valid_source_first = 1'd0;
reg           main_write_pipe_valid_source_last = 1'd0;
reg    [28:0] main_write_pipe_valid_source_payload_addr = 29'd0;
reg     [1:0] main_write_pipe_valid_source_payload_burst = 2'd0;
reg     [7:0] main_write_pipe_valid_source_payload_len = 8'd0;
reg     [2:0] main_write_pipe_valid_source_payload_size = 3'd0;
reg           main_write_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_write_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_write_pipe_valid_source_payload_cache = 4'd0;
reg     [3:0] main_write_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_write_pipe_valid_source_payload_region = 4'd0;
reg     [7:0] main_write_pipe_valid_source_param_id = 8'd0;
reg           main_write_pipe_valid_source_param_dest = 1'd0;
reg           main_write_pipe_valid_source_param_user = 1'd0;
reg     [7:0] main_write_beat_count = 8'd0;
wire   [11:0] main_write_beat_size;
reg  signed  [12:0] main_write_beat_offset = 13'd0;
wire   [11:0] main_write_beat_wrap;
reg           main_write_w_buffer_sink_valid = 1'd0;
wire          main_write_w_buffer_sink_ready;
reg           main_write_w_buffer_sink_first = 1'd0;
reg           main_write_w_buffer_sink_last = 1'd0;
reg    [31:0] main_write_w_buffer_sink_payload_data = 32'd0;
reg     [3:0] main_write_w_buffer_sink_payload_strb = 4'd0;
reg     [7:0] main_write_w_buffer_sink_param_id = 8'd0;
reg           main_write_w_buffer_sink_param_dest = 1'd0;
reg           main_write_w_buffer_sink_param_user = 1'd0;
wire          main_write_w_buffer_source_valid;
wire          main_write_w_buffer_source_ready;
wire          main_write_w_buffer_source_first;
wire          main_write_w_buffer_source_last;
wire   [31:0] main_write_w_buffer_source_payload_data;
wire    [3:0] main_write_w_buffer_source_payload_strb;
wire    [7:0] main_write_w_buffer_source_param_id;
wire          main_write_w_buffer_source_param_dest;
wire          main_write_w_buffer_source_param_user;
wire          main_write_w_buffer_re;
reg           main_write_w_buffer_readable = 1'd0;
wire          main_write_w_buffer_syncfifo_we;
wire          main_write_w_buffer_syncfifo_writable;
wire          main_write_w_buffer_syncfifo_re;
wire          main_write_w_buffer_syncfifo_readable;
wire   [47:0] main_write_w_buffer_syncfifo_din;
wire   [47:0] main_write_w_buffer_syncfifo_dout;
reg     [4:0] main_write_w_buffer_level0 = 5'd0;
reg           main_write_w_buffer_replace = 1'd0;
reg     [3:0] main_write_w_buffer_produce = 4'd0;
reg     [3:0] main_write_w_buffer_consume = 4'd0;
reg     [3:0] main_write_w_buffer_wrport_adr = 4'd0;
wire   [47:0] main_write_w_buffer_wrport_dat_r;
wire          main_write_w_buffer_wrport_we;
wire   [47:0] main_write_w_buffer_wrport_dat_w;
wire          main_write_w_buffer_do_read;
wire    [3:0] main_write_w_buffer_rdport_adr;
wire   [47:0] main_write_w_buffer_rdport_dat_r;
wire          main_write_w_buffer_rdport_re;
wire    [4:0] main_write_w_buffer_level1;
wire   [31:0] main_write_w_buffer_fifo_in_payload_data;
wire    [3:0] main_write_w_buffer_fifo_in_payload_strb;
wire    [7:0] main_write_w_buffer_fifo_in_param_id;
wire          main_write_w_buffer_fifo_in_param_dest;
wire          main_write_w_buffer_fifo_in_param_user;
wire          main_write_w_buffer_fifo_in_first;
wire          main_write_w_buffer_fifo_in_last;
wire   [31:0] main_write_w_buffer_fifo_out_payload_data;
wire    [3:0] main_write_w_buffer_fifo_out_payload_strb;
wire    [7:0] main_write_w_buffer_fifo_out_param_id;
wire          main_write_w_buffer_fifo_out_param_dest;
wire          main_write_w_buffer_fifo_out_param_user;
wire          main_write_w_buffer_fifo_out_first;
wire          main_write_w_buffer_fifo_out_last;
wire          main_write_id_buffer_sink_valid;
wire          main_write_id_buffer_sink_ready;
reg           main_write_id_buffer_sink_first = 1'd0;
reg           main_write_id_buffer_sink_last = 1'd0;
wire    [7:0] main_write_id_buffer_sink_payload_id;
wire          main_write_id_buffer_source_valid;
reg           main_write_id_buffer_source_ready = 1'd0;
wire          main_write_id_buffer_source_first;
wire          main_write_id_buffer_source_last;
wire    [7:0] main_write_id_buffer_source_payload_id;
wire          main_write_id_buffer_syncfifo_we;
wire          main_write_id_buffer_syncfifo_writable;
wire          main_write_id_buffer_syncfifo_re;
wire          main_write_id_buffer_syncfifo_readable;
wire    [9:0] main_write_id_buffer_syncfifo_din;
wire    [9:0] main_write_id_buffer_syncfifo_dout;
reg     [4:0] main_write_id_buffer_level = 5'd0;
reg           main_write_id_buffer_replace = 1'd0;
reg     [3:0] main_write_id_buffer_produce = 4'd0;
reg     [3:0] main_write_id_buffer_consume = 4'd0;
reg     [3:0] main_write_id_buffer_wrport_adr = 4'd0;
wire    [9:0] main_write_id_buffer_wrport_dat_r;
wire          main_write_id_buffer_wrport_we;
wire    [9:0] main_write_id_buffer_wrport_dat_w;
wire          main_write_id_buffer_do_read;
wire    [3:0] main_write_id_buffer_rdport_adr;
wire    [9:0] main_write_id_buffer_rdport_dat_r;
wire    [7:0] main_write_id_buffer_fifo_in_payload_id;
wire          main_write_id_buffer_fifo_in_first;
wire          main_write_id_buffer_fifo_in_last;
wire    [7:0] main_write_id_buffer_fifo_out_payload_id;
wire          main_write_id_buffer_fifo_out_first;
wire          main_write_id_buffer_fifo_out_last;
reg           main_write_resp_buffer_sink_valid = 1'd0;
wire          main_write_resp_buffer_sink_ready;
reg           main_write_resp_buffer_sink_first = 1'd0;
reg           main_write_resp_buffer_sink_last = 1'd0;
reg     [7:0] main_write_resp_buffer_sink_payload_id = 8'd0;
reg     [1:0] main_write_resp_buffer_sink_payload_resp = 2'd0;
wire          main_write_resp_buffer_source_valid;
wire          main_write_resp_buffer_source_ready;
wire          main_write_resp_buffer_source_first;
wire          main_write_resp_buffer_source_last;
wire    [7:0] main_write_resp_buffer_source_payload_id;
wire    [1:0] main_write_resp_buffer_source_payload_resp;
wire          main_write_resp_buffer_syncfifo_we;
wire          main_write_resp_buffer_syncfifo_writable;
wire          main_write_resp_buffer_syncfifo_re;
wire          main_write_resp_buffer_syncfifo_readable;
wire   [11:0] main_write_resp_buffer_syncfifo_din;
wire   [11:0] main_write_resp_buffer_syncfifo_dout;
reg     [4:0] main_write_resp_buffer_level = 5'd0;
reg           main_write_resp_buffer_replace = 1'd0;
reg     [3:0] main_write_resp_buffer_produce = 4'd0;
reg     [3:0] main_write_resp_buffer_consume = 4'd0;
reg     [3:0] main_write_resp_buffer_wrport_adr = 4'd0;
wire   [11:0] main_write_resp_buffer_wrport_dat_r;
wire          main_write_resp_buffer_wrport_we;
wire   [11:0] main_write_resp_buffer_wrport_dat_w;
wire          main_write_resp_buffer_do_read;
wire    [3:0] main_write_resp_buffer_rdport_adr;
wire   [11:0] main_write_resp_buffer_rdport_dat_r;
wire    [7:0] main_write_resp_buffer_fifo_in_payload_id;
wire    [1:0] main_write_resp_buffer_fifo_in_payload_resp;
wire          main_write_resp_buffer_fifo_in_first;
wire          main_write_resp_buffer_fifo_in_last;
wire    [7:0] main_write_resp_buffer_fifo_out_payload_id;
wire    [1:0] main_write_resp_buffer_fifo_out_payload_resp;
wire          main_write_resp_buffer_fifo_out_first;
wire          main_write_resp_buffer_fifo_out_last;
wire          main_write_w_buffer_queue;
wire          main_write_w_buffer_dequeue;
reg     [4:0] main_write_w_buffer_level2 = 5'd0;
reg           main_write_axi_w_connect = 1'd1;
wire          main_read_cmd_request;
wire          main_read_cmd_grant;
wire          main_read_can_read;
wire          main_read_ar_valid;
reg           main_read_ar_ready = 1'd0;
wire          main_read_ar_first;
wire          main_read_ar_last;
wire   [28:0] main_read_ar_payload_addr;
wire    [7:0] main_read_ar_param_id;
wire          main_read_sink_sink_valid;
wire          main_read_sink_sink_ready;
wire          main_read_sink_sink_first;
wire          main_read_sink_sink_last;
wire   [28:0] main_read_sink_sink_payload_addr;
wire    [1:0] main_read_sink_sink_payload_burst;
wire    [7:0] main_read_sink_sink_payload_len;
wire    [2:0] main_read_sink_sink_payload_size;
wire          main_read_sink_sink_payload_lock;
wire    [2:0] main_read_sink_sink_payload_prot;
wire    [3:0] main_read_sink_sink_payload_cache;
wire    [3:0] main_read_sink_sink_payload_qos;
wire    [3:0] main_read_sink_sink_payload_region;
wire    [7:0] main_read_sink_sink_param_id;
wire          main_read_sink_sink_param_dest;
wire          main_read_sink_sink_param_user;
wire          main_read_source_source_valid;
reg           main_read_source_source_ready = 1'd0;
wire          main_read_source_source_first;
wire          main_read_source_source_last;
wire   [28:0] main_read_source_source_payload_addr;
wire    [1:0] main_read_source_source_payload_burst;
wire    [7:0] main_read_source_source_payload_len;
wire    [2:0] main_read_source_source_payload_size;
wire          main_read_source_source_payload_lock;
wire    [2:0] main_read_source_source_payload_prot;
wire    [3:0] main_read_source_source_payload_cache;
wire    [3:0] main_read_source_source_payload_qos;
wire    [3:0] main_read_source_source_payload_region;
wire    [7:0] main_read_source_source_param_id;
wire          main_read_source_source_param_dest;
wire          main_read_source_source_param_user;
wire          main_read_pipe_valid_sink_valid;
wire          main_read_pipe_valid_sink_ready;
wire          main_read_pipe_valid_sink_first;
wire          main_read_pipe_valid_sink_last;
wire   [28:0] main_read_pipe_valid_sink_payload_addr;
wire    [1:0] main_read_pipe_valid_sink_payload_burst;
wire    [7:0] main_read_pipe_valid_sink_payload_len;
wire    [2:0] main_read_pipe_valid_sink_payload_size;
wire          main_read_pipe_valid_sink_payload_lock;
wire    [2:0] main_read_pipe_valid_sink_payload_prot;
wire    [3:0] main_read_pipe_valid_sink_payload_cache;
wire    [3:0] main_read_pipe_valid_sink_payload_qos;
wire    [3:0] main_read_pipe_valid_sink_payload_region;
wire    [7:0] main_read_pipe_valid_sink_param_id;
wire          main_read_pipe_valid_sink_param_dest;
wire          main_read_pipe_valid_sink_param_user;
reg           main_read_pipe_valid_source_valid = 1'd0;
wire          main_read_pipe_valid_source_ready;
reg           main_read_pipe_valid_source_first = 1'd0;
reg           main_read_pipe_valid_source_last = 1'd0;
reg    [28:0] main_read_pipe_valid_source_payload_addr = 29'd0;
reg     [1:0] main_read_pipe_valid_source_payload_burst = 2'd0;
reg     [7:0] main_read_pipe_valid_source_payload_len = 8'd0;
reg     [2:0] main_read_pipe_valid_source_payload_size = 3'd0;
reg           main_read_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] main_read_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] main_read_pipe_valid_source_payload_cache = 4'd0;
reg     [3:0] main_read_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] main_read_pipe_valid_source_payload_region = 4'd0;
reg     [7:0] main_read_pipe_valid_source_param_id = 8'd0;
reg           main_read_pipe_valid_source_param_dest = 1'd0;
reg           main_read_pipe_valid_source_param_user = 1'd0;
reg     [7:0] main_read_beat_count = 8'd0;
wire   [11:0] main_read_beat_size;
reg  signed  [12:0] main_read_beat_offset = 13'd0;
wire   [11:0] main_read_beat_wrap;
wire          main_read_r_buffer_sink_valid;
wire          main_read_r_buffer_sink_ready;
wire          main_read_r_buffer_sink_first;
wire          main_read_r_buffer_sink_last;
reg     [1:0] main_read_r_buffer_sink_payload_resp = 2'd0;
wire   [31:0] main_read_r_buffer_sink_payload_data;
reg     [7:0] main_read_r_buffer_sink_param_id = 8'd0;
reg           main_read_r_buffer_sink_param_dest = 1'd0;
reg           main_read_r_buffer_sink_param_user = 1'd0;
wire          main_read_r_buffer_source_valid;
wire          main_read_r_buffer_source_ready;
wire          main_read_r_buffer_source_first;
wire          main_read_r_buffer_source_last;
wire    [1:0] main_read_r_buffer_source_payload_resp;
wire   [31:0] main_read_r_buffer_source_payload_data;
wire    [7:0] main_read_r_buffer_source_param_id;
wire          main_read_r_buffer_source_param_dest;
wire          main_read_r_buffer_source_param_user;
wire          main_read_r_buffer_re;
reg           main_read_r_buffer_readable = 1'd0;
wire          main_read_r_buffer_syncfifo_we;
wire          main_read_r_buffer_syncfifo_writable;
wire          main_read_r_buffer_syncfifo_re;
wire          main_read_r_buffer_syncfifo_readable;
wire   [45:0] main_read_r_buffer_syncfifo_din;
wire   [45:0] main_read_r_buffer_syncfifo_dout;
reg     [4:0] main_read_r_buffer_level0 = 5'd0;
reg           main_read_r_buffer_replace = 1'd0;
reg     [3:0] main_read_r_buffer_produce = 4'd0;
reg     [3:0] main_read_r_buffer_consume = 4'd0;
reg     [3:0] main_read_r_buffer_wrport_adr = 4'd0;
wire   [45:0] main_read_r_buffer_wrport_dat_r;
wire          main_read_r_buffer_wrport_we;
wire   [45:0] main_read_r_buffer_wrport_dat_w;
wire          main_read_r_buffer_do_read;
wire    [3:0] main_read_r_buffer_rdport_adr;
wire   [45:0] main_read_r_buffer_rdport_dat_r;
wire          main_read_r_buffer_rdport_re;
wire    [4:0] main_read_r_buffer_level1;
wire    [1:0] main_read_r_buffer_fifo_in_payload_resp;
wire   [31:0] main_read_r_buffer_fifo_in_payload_data;
wire    [7:0] main_read_r_buffer_fifo_in_param_id;
wire          main_read_r_buffer_fifo_in_param_dest;
wire          main_read_r_buffer_fifo_in_param_user;
wire          main_read_r_buffer_fifo_in_first;
wire          main_read_r_buffer_fifo_in_last;
wire    [1:0] main_read_r_buffer_fifo_out_payload_resp;
wire   [31:0] main_read_r_buffer_fifo_out_payload_data;
wire    [7:0] main_read_r_buffer_fifo_out_param_id;
wire          main_read_r_buffer_fifo_out_param_dest;
wire          main_read_r_buffer_fifo_out_param_user;
wire          main_read_r_buffer_fifo_out_first;
wire          main_read_r_buffer_fifo_out_last;
wire          main_read_r_buffer_queue;
wire          main_read_r_buffer_dequeue;
reg     [4:0] main_read_r_buffer_level2 = 5'd0;
wire          main_read_id_buffer_sink_valid;
wire          main_read_id_buffer_sink_ready;
reg           main_read_id_buffer_sink_first = 1'd0;
wire          main_read_id_buffer_sink_last;
wire    [7:0] main_read_id_buffer_sink_payload_id;
wire          main_read_id_buffer_source_valid;
wire          main_read_id_buffer_source_ready;
wire          main_read_id_buffer_source_first;
wire          main_read_id_buffer_source_last;
wire    [7:0] main_read_id_buffer_source_payload_id;
wire          main_read_id_buffer_syncfifo_we;
wire          main_read_id_buffer_syncfifo_writable;
wire          main_read_id_buffer_syncfifo_re;
wire          main_read_id_buffer_syncfifo_readable;
wire    [9:0] main_read_id_buffer_syncfifo_din;
wire    [9:0] main_read_id_buffer_syncfifo_dout;
reg     [4:0] main_read_id_buffer_level = 5'd0;
reg           main_read_id_buffer_replace = 1'd0;
reg     [3:0] main_read_id_buffer_produce = 4'd0;
reg     [3:0] main_read_id_buffer_consume = 4'd0;
reg     [3:0] main_read_id_buffer_wrport_adr = 4'd0;
wire    [9:0] main_read_id_buffer_wrport_dat_r;
wire          main_read_id_buffer_wrport_we;
wire    [9:0] main_read_id_buffer_wrport_dat_w;
wire          main_read_id_buffer_do_read;
wire    [3:0] main_read_id_buffer_rdport_adr;
wire    [9:0] main_read_id_buffer_rdport_dat_r;
wire    [7:0] main_read_id_buffer_fifo_in_payload_id;
wire          main_read_id_buffer_fifo_in_first;
wire          main_read_id_buffer_fifo_in_last;
wire    [7:0] main_read_id_buffer_fifo_out_payload_id;
wire          main_read_id_buffer_fifo_out_first;
wire          main_read_id_buffer_fifo_out_last;
reg     [1:0] main_request = 2'd0;
reg           main_grant = 1'd0;
wire          main_ce;
reg    [13:0] builder_dramcoresoc_adr = 14'd0;
reg           builder_dramcoresoc_we = 1'd0;
reg    [31:0] builder_dramcoresoc_dat_w = 32'd0;
wire   [31:0] builder_dramcoresoc_dat_r;
wire   [29:0] builder_dramcoresoc_wishbone_adr;
wire   [31:0] builder_dramcoresoc_wishbone_dat_w;
reg    [31:0] builder_dramcoresoc_wishbone_dat_r = 32'd0;
wire    [3:0] builder_dramcoresoc_wishbone_sel;
wire          builder_dramcoresoc_wishbone_cyc;
wire          builder_dramcoresoc_wishbone_stb;
reg           builder_dramcoresoc_wishbone_ack = 1'd0;
wire          builder_dramcoresoc_wishbone_we;
wire    [2:0] builder_dramcoresoc_wishbone_cti;
wire    [1:0] builder_dramcoresoc_wishbone_bte;
reg           builder_dramcoresoc_wishbone_err = 1'd0;
wire   [29:0] builder_shared_adr;
wire   [31:0] builder_shared_dat_w;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire    [3:0] builder_shared_sel;
wire          builder_shared_cyc;
wire          builder_shared_stb;
reg           builder_shared_ack = 1'd0;
wire          builder_shared_we;
wire    [2:0] builder_shared_cti;
wire    [1:0] builder_shared_bte;
wire          builder_shared_err;
wire          builder_request;
wire          builder_grant;
wire          builder_ce;
wire          builder_slave_sel;
reg           builder_slave_sel_r = 1'd0;
reg           builder_error = 1'd0;
wire          builder_wait;
wire          builder_done;
reg    [19:0] builder_count = 20'd1000000;
wire   [13:0] builder_interface0_bank_bus_adr;
wire          builder_interface0_bank_bus_we;
wire   [31:0] builder_interface0_bank_bus_dat_w;
reg    [31:0] builder_interface0_bank_bus_dat_r = 32'd0;
reg           builder_csrbank0_init_done0_re = 1'd0;
wire          builder_csrbank0_init_done0_r;
reg           builder_csrbank0_init_done0_we = 1'd0;
wire          builder_csrbank0_init_done0_w;
reg           builder_csrbank0_init_error0_re = 1'd0;
wire          builder_csrbank0_init_error0_r;
reg           builder_csrbank0_init_error0_we = 1'd0;
wire          builder_csrbank0_init_error0_w;
wire          builder_csrbank0_sel;
wire   [13:0] builder_interface1_bank_bus_adr;
wire          builder_interface1_bank_bus_we;
wire   [31:0] builder_interface1_bank_bus_dat_w;
reg    [31:0] builder_interface1_bank_bus_dat_r = 32'd0;
reg           builder_csrbank1_rst0_re = 1'd0;
wire          builder_csrbank1_rst0_r;
reg           builder_csrbank1_rst0_we = 1'd0;
wire          builder_csrbank1_rst0_w;
reg           builder_csrbank1_rdphase0_re = 1'd0;
wire    [2:0] builder_csrbank1_rdphase0_r;
reg           builder_csrbank1_rdphase0_we = 1'd0;
wire    [2:0] builder_csrbank1_rdphase0_w;
reg           builder_csrbank1_wrphase0_re = 1'd0;
wire    [2:0] builder_csrbank1_wrphase0_r;
reg           builder_csrbank1_wrphase0_we = 1'd0;
wire    [2:0] builder_csrbank1_wrphase0_w;
wire          builder_csrbank1_sel;
wire   [13:0] builder_interface2_bank_bus_adr;
wire          builder_interface2_bank_bus_we;
wire   [31:0] builder_interface2_bank_bus_dat_w;
reg    [31:0] builder_interface2_bank_bus_dat_r = 32'd0;
reg           builder_csrbank2_controller_tRP0_re = 1'd0;
wire    [2:0] builder_csrbank2_controller_tRP0_r;
reg           builder_csrbank2_controller_tRP0_we = 1'd0;
wire    [2:0] builder_csrbank2_controller_tRP0_w;
reg           builder_csrbank2_controller_tRCD0_re = 1'd0;
wire    [2:0] builder_csrbank2_controller_tRCD0_r;
reg           builder_csrbank2_controller_tRCD0_we = 1'd0;
wire    [2:0] builder_csrbank2_controller_tRCD0_w;
reg           builder_csrbank2_controller_tWR0_re = 1'd0;
wire    [2:0] builder_csrbank2_controller_tWR0_r;
reg           builder_csrbank2_controller_tWR0_we = 1'd0;
wire    [2:0] builder_csrbank2_controller_tWR0_w;
reg           builder_csrbank2_controller_tWTR0_re = 1'd0;
wire    [2:0] builder_csrbank2_controller_tWTR0_r;
reg           builder_csrbank2_controller_tWTR0_we = 1'd0;
wire    [2:0] builder_csrbank2_controller_tWTR0_w;
reg           builder_csrbank2_controller_tREFI0_re = 1'd0;
wire    [8:0] builder_csrbank2_controller_tREFI0_r;
reg           builder_csrbank2_controller_tREFI0_we = 1'd0;
wire    [8:0] builder_csrbank2_controller_tREFI0_w;
reg           builder_csrbank2_controller_tRFC0_re = 1'd0;
wire    [5:0] builder_csrbank2_controller_tRFC0_r;
reg           builder_csrbank2_controller_tRFC0_we = 1'd0;
wire    [5:0] builder_csrbank2_controller_tRFC0_w;
reg           builder_csrbank2_controller_tFAW0_re = 1'd0;
wire    [2:0] builder_csrbank2_controller_tFAW0_r;
reg           builder_csrbank2_controller_tFAW0_we = 1'd0;
wire    [2:0] builder_csrbank2_controller_tFAW0_w;
reg           builder_csrbank2_controller_tCCD0_re = 1'd0;
wire    [4:0] builder_csrbank2_controller_tCCD0_r;
reg           builder_csrbank2_controller_tCCD0_we = 1'd0;
wire    [4:0] builder_csrbank2_controller_tCCD0_w;
reg           builder_csrbank2_controller_tCCD_WR0_re = 1'd0;
wire          builder_csrbank2_controller_tCCD_WR0_r;
reg           builder_csrbank2_controller_tCCD_WR0_we = 1'd0;
wire          builder_csrbank2_controller_tCCD_WR0_w;
reg           builder_csrbank2_controller_tRTP0_re = 1'd0;
wire          builder_csrbank2_controller_tRTP0_r;
reg           builder_csrbank2_controller_tRTP0_we = 1'd0;
wire          builder_csrbank2_controller_tRTP0_w;
reg           builder_csrbank2_controller_tRRD0_re = 1'd0;
wire    [2:0] builder_csrbank2_controller_tRRD0_r;
reg           builder_csrbank2_controller_tRRD0_we = 1'd0;
wire    [2:0] builder_csrbank2_controller_tRRD0_w;
reg           builder_csrbank2_controller_tRC0_re = 1'd0;
wire    [3:0] builder_csrbank2_controller_tRC0_r;
reg           builder_csrbank2_controller_tRC0_we = 1'd0;
wire    [3:0] builder_csrbank2_controller_tRC0_w;
reg           builder_csrbank2_controller_tRAS0_re = 1'd0;
wire    [2:0] builder_csrbank2_controller_tRAS0_r;
reg           builder_csrbank2_controller_tRAS0_we = 1'd0;
wire    [2:0] builder_csrbank2_controller_tRAS0_w;
reg           builder_csrbank2_controller_phy_ctl0_re = 1'd0;
wire          builder_csrbank2_controller_phy_ctl0_r;
reg           builder_csrbank2_controller_phy_ctl0_we = 1'd0;
wire          builder_csrbank2_controller_phy_ctl0_w;
reg           builder_csrbank2_controller_phy_sts_re = 1'd0;
wire          builder_csrbank2_controller_phy_sts_r;
reg           builder_csrbank2_controller_phy_sts_we = 1'd0;
wire          builder_csrbank2_controller_phy_sts_w;
wire          builder_csrbank2_sel;
wire   [13:0] builder_csr_interconnect_adr;
wire          builder_csr_interconnect_we;
wire   [31:0] builder_csr_interconnect_dat_w;
wire   [31:0] builder_csr_interconnect_dat_r;
reg     [1:0] builder_dramcoresoc_dramcore_refresher_state = 2'd0;
reg     [1:0] builder_dramcoresoc_dramcore_refresher_next_state = 2'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine0_state = 3'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine0_next_state = 3'd0;
reg     [3:0] main_dram_ctrl_bankmachine0_timer_bankmachine0_next_value = 4'd0;
reg           main_dram_ctrl_bankmachine0_timer_bankmachine0_next_value_ce = 1'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine1_state = 3'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine1_next_state = 3'd0;
reg     [3:0] main_dram_ctrl_bankmachine1_timer_bankmachine1_next_value = 4'd0;
reg           main_dram_ctrl_bankmachine1_timer_bankmachine1_next_value_ce = 1'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine2_state = 3'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine2_next_state = 3'd0;
reg     [3:0] main_dram_ctrl_bankmachine2_timer_bankmachine2_next_value = 4'd0;
reg           main_dram_ctrl_bankmachine2_timer_bankmachine2_next_value_ce = 1'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine3_state = 3'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine3_next_state = 3'd0;
reg     [3:0] main_dram_ctrl_bankmachine3_timer_bankmachine3_next_value = 4'd0;
reg           main_dram_ctrl_bankmachine3_timer_bankmachine3_next_value_ce = 1'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine4_state = 3'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine4_next_state = 3'd0;
reg     [3:0] main_dram_ctrl_bankmachine4_timer_bankmachine4_next_value = 4'd0;
reg           main_dram_ctrl_bankmachine4_timer_bankmachine4_next_value_ce = 1'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine5_state = 3'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine5_next_state = 3'd0;
reg     [3:0] main_dram_ctrl_bankmachine5_timer_bankmachine5_next_value = 4'd0;
reg           main_dram_ctrl_bankmachine5_timer_bankmachine5_next_value_ce = 1'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine6_state = 3'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine6_next_state = 3'd0;
reg     [3:0] main_dram_ctrl_bankmachine6_timer_bankmachine6_next_value = 4'd0;
reg           main_dram_ctrl_bankmachine6_timer_bankmachine6_next_value_ce = 1'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine7_state = 3'd0;
reg     [2:0] builder_dramcoresoc_dramcore_bankmachine7_next_state = 3'd0;
reg     [3:0] main_dram_ctrl_bankmachine7_timer_bankmachine7_next_value = 4'd0;
reg           main_dram_ctrl_bankmachine7_timer_bankmachine7_next_value_ce = 1'd0;
reg     [3:0] builder_dramcoresoc_dramcore_multiplexer_state = 4'd0;
reg     [3:0] builder_dramcoresoc_dramcore_multiplexer_next_state = 4'd0;
reg     [1:0] builder_dramcoresoc_dramcore_state = 2'd0;
reg     [1:0] builder_dramcoresoc_dramcore_next_state = 2'd0;
reg    [26:0] main_litedramnativeportconverter_cmd_addr_next_value0 = 27'd0;
reg           main_litedramnativeportconverter_cmd_addr_next_value_ce0 = 1'd0;
reg           main_litedramnativeportconverter_cmd_we_next_value1 = 1'd0;
reg           main_litedramnativeportconverter_cmd_we_next_value_ce1 = 1'd0;
reg           main_litedramnativeportconverter_cmd_last_next_value2 = 1'd0;
reg           main_litedramnativeportconverter_cmd_last_next_value_ce2 = 1'd0;
reg     [7:0] main_litedramnativeportconverter_sel_next_value3 = 8'd0;
reg           main_litedramnativeportconverter_sel_next_value_ce3 = 1'd0;
wire          builder_dramcoresoc_dramcore_roundrobin0_request;
wire          builder_dramcoresoc_dramcore_roundrobin0_grant;
wire          builder_dramcoresoc_dramcore_roundrobin0_ce;
wire          builder_dramcoresoc_dramcore_roundrobin1_request;
wire          builder_dramcoresoc_dramcore_roundrobin1_grant;
wire          builder_dramcoresoc_dramcore_roundrobin1_ce;
wire          builder_dramcoresoc_dramcore_roundrobin2_request;
wire          builder_dramcoresoc_dramcore_roundrobin2_grant;
wire          builder_dramcoresoc_dramcore_roundrobin2_ce;
wire          builder_dramcoresoc_dramcore_roundrobin3_request;
wire          builder_dramcoresoc_dramcore_roundrobin3_grant;
wire          builder_dramcoresoc_dramcore_roundrobin3_ce;
wire          builder_dramcoresoc_dramcore_roundrobin4_request;
wire          builder_dramcoresoc_dramcore_roundrobin4_grant;
wire          builder_dramcoresoc_dramcore_roundrobin4_ce;
wire          builder_dramcoresoc_dramcore_roundrobin5_request;
wire          builder_dramcoresoc_dramcore_roundrobin5_grant;
wire          builder_dramcoresoc_dramcore_roundrobin5_ce;
wire          builder_dramcoresoc_dramcore_roundrobin6_request;
wire          builder_dramcoresoc_dramcore_roundrobin6_grant;
wire          builder_dramcoresoc_dramcore_roundrobin6_ce;
wire          builder_dramcoresoc_dramcore_roundrobin7_request;
wire          builder_dramcoresoc_dramcore_roundrobin7_grant;
wire          builder_dramcoresoc_dramcore_roundrobin7_ce;
reg           builder_dramcoresoc_dramcore_locked0 = 1'd0;
reg           builder_dramcoresoc_dramcore_locked1 = 1'd0;
reg           builder_dramcoresoc_dramcore_locked2 = 1'd0;
reg           builder_dramcoresoc_dramcore_locked3 = 1'd0;
reg           builder_dramcoresoc_dramcore_locked4 = 1'd0;
reg           builder_dramcoresoc_dramcore_locked5 = 1'd0;
reg           builder_dramcoresoc_dramcore_locked6 = 1'd0;
reg           builder_dramcoresoc_dramcore_locked7 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_wdata_ready0 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_wdata_ready1 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_wdata_ready2 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_rdata_valid0 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_rdata_valid1 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_rdata_valid2 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_rdata_valid3 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_rdata_valid4 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_rdata_valid5 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_rdata_valid6 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_rdata_valid7 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_rdata_valid8 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_rdata_valid9 = 1'd0;
reg           builder_dramcoresoc_dramcore_new_master_rdata_valid10 = 1'd0;
reg           builder_dramcoresoc_wishbone2csr_state = 1'd0;
reg           builder_dramcoresoc_wishbone2csr_next_state = 1'd0;
reg    [29:0] builder_rhs_array_muxed0 = 30'd0;
reg    [31:0] builder_rhs_array_muxed1 = 32'd0;
reg     [3:0] builder_rhs_array_muxed2 = 4'd0;
reg           builder_rhs_array_muxed3 = 1'd0;
reg           builder_rhs_array_muxed4 = 1'd0;
reg           builder_rhs_array_muxed5 = 1'd0;
reg     [2:0] builder_rhs_array_muxed6 = 3'd0;
reg     [1:0] builder_rhs_array_muxed7 = 2'd0;
reg           builder_rhs_array_muxed8 = 1'd0;
reg           builder_rhs_array_muxed9 = 1'd0;
reg    [14:0] builder_rhs_array_muxed10 = 15'd0;
reg     [2:0] builder_rhs_array_muxed11 = 3'd0;
reg           builder_rhs_array_muxed12 = 1'd0;
reg           builder_rhs_array_muxed13 = 1'd0;
reg           builder_rhs_array_muxed14 = 1'd0;
reg           builder_t_array_muxed0 = 1'd0;
reg           builder_t_array_muxed1 = 1'd0;
reg           builder_t_array_muxed2 = 1'd0;
reg           builder_rhs_array_muxed15 = 1'd0;
reg    [14:0] builder_rhs_array_muxed16 = 15'd0;
reg     [2:0] builder_rhs_array_muxed17 = 3'd0;
reg           builder_rhs_array_muxed18 = 1'd0;
reg           builder_rhs_array_muxed19 = 1'd0;
reg           builder_rhs_array_muxed20 = 1'd0;
reg           builder_t_array_muxed3 = 1'd0;
reg           builder_t_array_muxed4 = 1'd0;
reg           builder_t_array_muxed5 = 1'd0;
reg    [20:0] builder_rhs_array_muxed21 = 21'd0;
reg           builder_rhs_array_muxed22 = 1'd0;
reg           builder_rhs_array_muxed23 = 1'd0;
reg    [20:0] builder_rhs_array_muxed24 = 21'd0;
reg           builder_rhs_array_muxed25 = 1'd0;
reg           builder_rhs_array_muxed26 = 1'd0;
reg    [20:0] builder_rhs_array_muxed27 = 21'd0;
reg           builder_rhs_array_muxed28 = 1'd0;
reg           builder_rhs_array_muxed29 = 1'd0;
reg    [20:0] builder_rhs_array_muxed30 = 21'd0;
reg           builder_rhs_array_muxed31 = 1'd0;
reg           builder_rhs_array_muxed32 = 1'd0;
reg    [20:0] builder_rhs_array_muxed33 = 21'd0;
reg           builder_rhs_array_muxed34 = 1'd0;
reg           builder_rhs_array_muxed35 = 1'd0;
reg    [20:0] builder_rhs_array_muxed36 = 21'd0;
reg           builder_rhs_array_muxed37 = 1'd0;
reg           builder_rhs_array_muxed38 = 1'd0;
reg    [20:0] builder_rhs_array_muxed39 = 21'd0;
reg           builder_rhs_array_muxed40 = 1'd0;
reg           builder_rhs_array_muxed41 = 1'd0;
reg    [20:0] builder_rhs_array_muxed42 = 21'd0;
reg           builder_rhs_array_muxed43 = 1'd0;
reg           builder_rhs_array_muxed44 = 1'd0;
reg     [2:0] builder_array_muxed0 = 3'd0;
reg    [14:0] builder_array_muxed1 = 15'd0;
reg           builder_array_muxed2 = 1'd0;
reg           builder_array_muxed3 = 1'd0;
reg           builder_array_muxed4 = 1'd0;
reg           builder_array_muxed5 = 1'd0;
reg           builder_array_muxed6 = 1'd0;
reg     [2:0] builder_array_muxed7 = 3'd0;
reg    [14:0] builder_array_muxed8 = 15'd0;
reg           builder_array_muxed9 = 1'd0;
reg           builder_array_muxed10 = 1'd0;
reg           builder_array_muxed11 = 1'd0;
reg           builder_array_muxed12 = 1'd0;
reg           builder_array_muxed13 = 1'd0;
reg     [2:0] builder_array_muxed14 = 3'd0;
reg    [14:0] builder_array_muxed15 = 15'd0;
reg           builder_array_muxed16 = 1'd0;
reg           builder_array_muxed17 = 1'd0;
reg           builder_array_muxed18 = 1'd0;
reg           builder_array_muxed19 = 1'd0;
reg           builder_array_muxed20 = 1'd0;
reg     [2:0] builder_array_muxed21 = 3'd0;
reg    [14:0] builder_array_muxed22 = 15'd0;
reg           builder_array_muxed23 = 1'd0;
reg           builder_array_muxed24 = 1'd0;
reg           builder_array_muxed25 = 1'd0;
reg           builder_array_muxed26 = 1'd0;
reg           builder_array_muxed27 = 1'd0;
reg     [2:0] builder_array_muxed28 = 3'd0;
reg    [14:0] builder_array_muxed29 = 15'd0;
reg           builder_array_muxed30 = 1'd0;
reg           builder_array_muxed31 = 1'd0;
reg           builder_array_muxed32 = 1'd0;
reg           builder_array_muxed33 = 1'd0;
reg           builder_array_muxed34 = 1'd0;
reg     [2:0] builder_array_muxed35 = 3'd0;
reg    [14:0] builder_array_muxed36 = 15'd0;
reg           builder_array_muxed37 = 1'd0;
reg           builder_array_muxed38 = 1'd0;
reg           builder_array_muxed39 = 1'd0;
reg           builder_array_muxed40 = 1'd0;
reg           builder_array_muxed41 = 1'd0;
reg     [2:0] builder_array_muxed42 = 3'd0;
reg    [14:0] builder_array_muxed43 = 15'd0;
reg           builder_array_muxed44 = 1'd0;
reg           builder_array_muxed45 = 1'd0;
reg           builder_array_muxed46 = 1'd0;
reg           builder_array_muxed47 = 1'd0;
reg           builder_array_muxed48 = 1'd0;
reg     [2:0] builder_array_muxed49 = 3'd0;
reg    [14:0] builder_array_muxed50 = 15'd0;
reg           builder_array_muxed51 = 1'd0;
reg           builder_array_muxed52 = 1'd0;
reg           builder_array_muxed53 = 1'd0;
reg           builder_array_muxed54 = 1'd0;
reg           builder_array_muxed55 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign sys_clk = clk;
assign sys_rst = rst;
assign dfi_cke_p0 = main_ddrphy_dfi_p0_cke;
assign dfi_reset_n_p0 = main_ddrphy_dfi_p0_reset_n;
assign dfi_mode_2n_p0 = main_ddrphy_dfi_p0_mode_2n;
assign dfi_address_p0 = main_ddrphy_dfi_p0_address;
assign dfi_bank_p0 = main_ddrphy_dfi_p0_bank;
assign dfi_cas_n_p0 = main_ddrphy_dfi_p0_cas_n;
assign dfi_cs_n_p0 = main_ddrphy_dfi_p0_cs_n;
assign dfi_ras_n_p0 = main_ddrphy_dfi_p0_ras_n;
assign dfi_act_n_p0 = main_ddrphy_dfi_p0_act_n;
assign dfi_odt_p0 = main_ddrphy_dfi_p0_odt;
assign dfi_we_n_p0 = main_ddrphy_dfi_p0_we_n;
assign dfi_wrdata_p0 = main_ddrphy_dfi_p0_wrdata;
assign dfi_wrdata_en_p0 = main_ddrphy_dfi_p0_wrdata_en;
assign dfi_wrdata_mask_p0 = main_ddrphy_dfi_p0_wrdata_mask;
assign dfi_rddata_en_p0 = main_ddrphy_dfi_p0_rddata_en;
assign dfi_cke_p1 = main_ddrphy_dfi_p1_cke;
assign dfi_reset_n_p1 = main_ddrphy_dfi_p1_reset_n;
assign dfi_mode_2n_p1 = main_ddrphy_dfi_p1_mode_2n;
assign dfi_address_p1 = main_ddrphy_dfi_p1_address;
assign dfi_bank_p1 = main_ddrphy_dfi_p1_bank;
assign dfi_cas_n_p1 = main_ddrphy_dfi_p1_cas_n;
assign dfi_cs_n_p1 = main_ddrphy_dfi_p1_cs_n;
assign dfi_ras_n_p1 = main_ddrphy_dfi_p1_ras_n;
assign dfi_act_n_p1 = main_ddrphy_dfi_p1_act_n;
assign dfi_odt_p1 = main_ddrphy_dfi_p1_odt;
assign dfi_we_n_p1 = main_ddrphy_dfi_p1_we_n;
assign dfi_wrdata_p1 = main_ddrphy_dfi_p1_wrdata;
assign dfi_wrdata_en_p1 = main_ddrphy_dfi_p1_wrdata_en;
assign dfi_wrdata_mask_p1 = main_ddrphy_dfi_p1_wrdata_mask;
assign dfi_rddata_en_p1 = main_ddrphy_dfi_p1_rddata_en;
assign dfi_cke_p2 = main_ddrphy_dfi_p2_cke;
assign dfi_reset_n_p2 = main_ddrphy_dfi_p2_reset_n;
assign dfi_mode_2n_p2 = main_ddrphy_dfi_p2_mode_2n;
assign dfi_address_p2 = main_ddrphy_dfi_p2_address;
assign dfi_bank_p2 = main_ddrphy_dfi_p2_bank;
assign dfi_cas_n_p2 = main_ddrphy_dfi_p2_cas_n;
assign dfi_cs_n_p2 = main_ddrphy_dfi_p2_cs_n;
assign dfi_ras_n_p2 = main_ddrphy_dfi_p2_ras_n;
assign dfi_act_n_p2 = main_ddrphy_dfi_p2_act_n;
assign dfi_odt_p2 = main_ddrphy_dfi_p2_odt;
assign dfi_we_n_p2 = main_ddrphy_dfi_p2_we_n;
assign dfi_wrdata_p2 = main_ddrphy_dfi_p2_wrdata;
assign dfi_wrdata_en_p2 = main_ddrphy_dfi_p2_wrdata_en;
assign dfi_wrdata_mask_p2 = main_ddrphy_dfi_p2_wrdata_mask;
assign dfi_rddata_en_p2 = main_ddrphy_dfi_p2_rddata_en;
assign dfi_cke_p3 = main_ddrphy_dfi_p3_cke;
assign dfi_reset_n_p3 = main_ddrphy_dfi_p3_reset_n;
assign dfi_mode_2n_p3 = main_ddrphy_dfi_p3_mode_2n;
assign dfi_address_p3 = main_ddrphy_dfi_p3_address;
assign dfi_bank_p3 = main_ddrphy_dfi_p3_bank;
assign dfi_cas_n_p3 = main_ddrphy_dfi_p3_cas_n;
assign dfi_cs_n_p3 = main_ddrphy_dfi_p3_cs_n;
assign dfi_ras_n_p3 = main_ddrphy_dfi_p3_ras_n;
assign dfi_act_n_p3 = main_ddrphy_dfi_p3_act_n;
assign dfi_odt_p3 = main_ddrphy_dfi_p3_odt;
assign dfi_we_n_p3 = main_ddrphy_dfi_p3_we_n;
assign dfi_wrdata_p3 = main_ddrphy_dfi_p3_wrdata;
assign dfi_wrdata_en_p3 = main_ddrphy_dfi_p3_wrdata_en;
assign dfi_wrdata_mask_p3 = main_ddrphy_dfi_p3_wrdata_mask;
assign dfi_rddata_en_p3 = main_ddrphy_dfi_p3_rddata_en;
assign dfi_cke_p4 = main_ddrphy_dfi_p4_cke;
assign dfi_reset_n_p4 = main_ddrphy_dfi_p4_reset_n;
assign dfi_mode_2n_p4 = main_ddrphy_dfi_p4_mode_2n;
assign dfi_address_p4 = main_ddrphy_dfi_p4_address;
assign dfi_bank_p4 = main_ddrphy_dfi_p4_bank;
assign dfi_cas_n_p4 = main_ddrphy_dfi_p4_cas_n;
assign dfi_cs_n_p4 = main_ddrphy_dfi_p4_cs_n;
assign dfi_ras_n_p4 = main_ddrphy_dfi_p4_ras_n;
assign dfi_act_n_p4 = main_ddrphy_dfi_p4_act_n;
assign dfi_odt_p4 = main_ddrphy_dfi_p4_odt;
assign dfi_we_n_p4 = main_ddrphy_dfi_p4_we_n;
assign dfi_wrdata_p4 = main_ddrphy_dfi_p4_wrdata;
assign dfi_wrdata_en_p4 = main_ddrphy_dfi_p4_wrdata_en;
assign dfi_wrdata_mask_p4 = main_ddrphy_dfi_p4_wrdata_mask;
assign dfi_rddata_en_p4 = main_ddrphy_dfi_p4_rddata_en;
assign dfi_cke_p5 = main_ddrphy_dfi_p5_cke;
assign dfi_reset_n_p5 = main_ddrphy_dfi_p5_reset_n;
assign dfi_mode_2n_p5 = main_ddrphy_dfi_p5_mode_2n;
assign dfi_address_p5 = main_ddrphy_dfi_p5_address;
assign dfi_bank_p5 = main_ddrphy_dfi_p5_bank;
assign dfi_cas_n_p5 = main_ddrphy_dfi_p5_cas_n;
assign dfi_cs_n_p5 = main_ddrphy_dfi_p5_cs_n;
assign dfi_ras_n_p5 = main_ddrphy_dfi_p5_ras_n;
assign dfi_act_n_p5 = main_ddrphy_dfi_p5_act_n;
assign dfi_odt_p5 = main_ddrphy_dfi_p5_odt;
assign dfi_we_n_p5 = main_ddrphy_dfi_p5_we_n;
assign dfi_wrdata_p5 = main_ddrphy_dfi_p5_wrdata;
assign dfi_wrdata_en_p5 = main_ddrphy_dfi_p5_wrdata_en;
assign dfi_wrdata_mask_p5 = main_ddrphy_dfi_p5_wrdata_mask;
assign dfi_rddata_en_p5 = main_ddrphy_dfi_p5_rddata_en;
assign dfi_cke_p6 = main_ddrphy_dfi_p6_cke;
assign dfi_reset_n_p6 = main_ddrphy_dfi_p6_reset_n;
assign dfi_mode_2n_p6 = main_ddrphy_dfi_p6_mode_2n;
assign dfi_address_p6 = main_ddrphy_dfi_p6_address;
assign dfi_bank_p6 = main_ddrphy_dfi_p6_bank;
assign dfi_cas_n_p6 = main_ddrphy_dfi_p6_cas_n;
assign dfi_cs_n_p6 = main_ddrphy_dfi_p6_cs_n;
assign dfi_ras_n_p6 = main_ddrphy_dfi_p6_ras_n;
assign dfi_act_n_p6 = main_ddrphy_dfi_p6_act_n;
assign dfi_odt_p6 = main_ddrphy_dfi_p6_odt;
assign dfi_we_n_p6 = main_ddrphy_dfi_p6_we_n;
assign dfi_wrdata_p6 = main_ddrphy_dfi_p6_wrdata;
assign dfi_wrdata_en_p6 = main_ddrphy_dfi_p6_wrdata_en;
assign dfi_wrdata_mask_p6 = main_ddrphy_dfi_p6_wrdata_mask;
assign dfi_rddata_en_p6 = main_ddrphy_dfi_p6_rddata_en;
assign dfi_cke_p7 = main_ddrphy_dfi_p7_cke;
assign dfi_reset_n_p7 = main_ddrphy_dfi_p7_reset_n;
assign dfi_mode_2n_p7 = main_ddrphy_dfi_p7_mode_2n;
assign dfi_address_p7 = main_ddrphy_dfi_p7_address;
assign dfi_bank_p7 = main_ddrphy_dfi_p7_bank;
assign dfi_cas_n_p7 = main_ddrphy_dfi_p7_cas_n;
assign dfi_cs_n_p7 = main_ddrphy_dfi_p7_cs_n;
assign dfi_ras_n_p7 = main_ddrphy_dfi_p7_ras_n;
assign dfi_act_n_p7 = main_ddrphy_dfi_p7_act_n;
assign dfi_odt_p7 = main_ddrphy_dfi_p7_odt;
assign dfi_we_n_p7 = main_ddrphy_dfi_p7_we_n;
assign dfi_wrdata_p7 = main_ddrphy_dfi_p7_wrdata;
assign dfi_wrdata_en_p7 = main_ddrphy_dfi_p7_wrdata_en;
assign dfi_wrdata_mask_p7 = main_ddrphy_dfi_p7_wrdata_mask;
assign dfi_rddata_en_p7 = main_ddrphy_dfi_p7_rddata_en;
assign dfi_init_start = main_ddrphy_dfi_ctl_init_start;
assign main_ddrphy_dfi_p0_alert_n = dfi_alert_n_w0;
assign main_ddrphy_dfi_p0_rddata = dfi_rddata_w0;
assign main_ddrphy_dfi_p0_rddata_valid = dfi_rddata_valid_w0;
assign main_ddrphy_dfi_p1_alert_n = dfi_alert_n_w1;
assign main_ddrphy_dfi_p1_rddata = dfi_rddata_w1;
assign main_ddrphy_dfi_p1_rddata_valid = dfi_rddata_valid_w1;
assign main_ddrphy_dfi_p2_alert_n = dfi_alert_n_w2;
assign main_ddrphy_dfi_p2_rddata = dfi_rddata_w2;
assign main_ddrphy_dfi_p2_rddata_valid = dfi_rddata_valid_w2;
assign main_ddrphy_dfi_p3_alert_n = dfi_alert_n_w3;
assign main_ddrphy_dfi_p3_rddata = dfi_rddata_w3;
assign main_ddrphy_dfi_p3_rddata_valid = dfi_rddata_valid_w3;
assign main_ddrphy_dfi_p4_alert_n = dfi_alert_n_w4;
assign main_ddrphy_dfi_p4_rddata = dfi_rddata_w4;
assign main_ddrphy_dfi_p4_rddata_valid = dfi_rddata_valid_w4;
assign main_ddrphy_dfi_p5_alert_n = dfi_alert_n_w5;
assign main_ddrphy_dfi_p5_rddata = dfi_rddata_w5;
assign main_ddrphy_dfi_p5_rddata_valid = dfi_rddata_valid_w5;
assign main_ddrphy_dfi_p6_alert_n = dfi_alert_n_w6;
assign main_ddrphy_dfi_p6_rddata = dfi_rddata_w6;
assign main_ddrphy_dfi_p6_rddata_valid = dfi_rddata_valid_w6;
assign main_ddrphy_dfi_p7_alert_n = dfi_alert_n_w7;
assign main_ddrphy_dfi_p7_rddata = dfi_rddata_w7;
assign main_ddrphy_dfi_p7_rddata_valid = dfi_rddata_valid_w7;
assign main_ddrphy_dfi_ctl_init_complete = dfi_init_complete;
assign mem_rst = main_ddrphy_rst_storage;
assign init_done = main_init_done_storage;
assign init_error = main_init_error_storage;
assign main_wb_bus_adr = wb_ctrl_adr;
assign main_wb_bus_dat_w = wb_ctrl_dat_w;
assign wb_ctrl_dat_r = main_wb_bus_dat_r;
assign main_wb_bus_sel = wb_ctrl_sel;
assign main_wb_bus_cyc = wb_ctrl_cyc;
assign main_wb_bus_stb = wb_ctrl_stb;
assign wb_ctrl_ack = main_wb_bus_ack;
assign main_wb_bus_we = wb_ctrl_we;
assign main_wb_bus_cti = wb_ctrl_cti;
assign main_wb_bus_bte = wb_ctrl_bte;
assign wb_ctrl_err = main_wb_bus_err;
assign main_user_enable = 1'd1;
assign main_aw_valid = (user_port_axi_0_awvalid & main_user_enable);
assign user_port_axi_0_awready = (main_aw_ready & main_user_enable);
assign main_aw_payload_addr = user_port_axi_0_awaddr;
assign main_aw_payload_burst = user_port_axi_0_awburst;
assign main_aw_payload_len = user_port_axi_0_awlen;
assign main_aw_payload_size = user_port_axi_0_awsize;
assign main_aw_param_id = user_port_axi_0_awid;
assign main_w_valid = user_port_axi_0_wvalid;
assign user_port_axi_0_wready = main_w_ready;
assign main_w_last = user_port_axi_0_wlast;
assign main_w_payload_strb = user_port_axi_0_wstrb;
assign main_w_payload_data = user_port_axi_0_wdata;
assign user_port_axi_0_bvalid = main_b_valid;
assign main_b_ready = user_port_axi_0_bready;
assign user_port_axi_0_bresp = main_b_payload_resp;
assign user_port_axi_0_bid = main_b_param_id;
assign main_ar_valid = (user_port_axi_0_arvalid & main_user_enable);
assign user_port_axi_0_arready = (main_ar_ready & main_user_enable);
assign main_ar_payload_addr = user_port_axi_0_araddr;
assign main_ar_payload_burst = user_port_axi_0_arburst;
assign main_ar_payload_len = user_port_axi_0_arlen;
assign main_ar_payload_size = user_port_axi_0_arsize;
assign main_ar_param_id = user_port_axi_0_arid;
assign user_port_axi_0_rvalid = main_r_valid;
assign main_r_ready = user_port_axi_0_rready;
assign user_port_axi_0_rlast = main_r_last;
assign user_port_axi_0_rresp = main_r_payload_resp;
assign user_port_axi_0_rdata = main_r_payload_data;
assign user_port_axi_0_rid = main_r_param_id;
assign builder_shared_adr = builder_rhs_array_muxed0;
assign builder_shared_dat_w = builder_rhs_array_muxed1;
assign builder_shared_sel = builder_rhs_array_muxed2;
assign builder_shared_cyc = builder_rhs_array_muxed3;
assign builder_shared_stb = builder_rhs_array_muxed4;
assign builder_shared_we = builder_rhs_array_muxed5;
assign builder_shared_cti = builder_rhs_array_muxed6;
assign builder_shared_bte = builder_rhs_array_muxed7;
assign main_wb_bus_dat_r = builder_shared_dat_r;
assign main_wb_bus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_wb_bus_err = (builder_shared_err & (builder_grant == 1'd0));
assign builder_ce = (builder_shared_ack | (~builder_rhs_array_muxed8));
assign builder_request = {main_wb_bus_cyc};
assign builder_grant = 1'd0;
assign builder_slave_sel = (builder_shared_adr[29:14] == 16'd33536);
assign builder_dramcoresoc_wishbone_adr = builder_shared_adr;
assign builder_dramcoresoc_wishbone_dat_w = builder_shared_dat_w;
assign builder_dramcoresoc_wishbone_sel = builder_shared_sel;
assign builder_dramcoresoc_wishbone_stb = builder_shared_stb;
assign builder_dramcoresoc_wishbone_we = builder_shared_we;
assign builder_dramcoresoc_wishbone_cti = builder_shared_cti;
assign builder_dramcoresoc_wishbone_bte = builder_shared_bte;
assign builder_dramcoresoc_wishbone_cyc = (builder_shared_cyc & builder_slave_sel);
always @(*) begin
	builder_shared_ack = 1'd0;
    builder_shared_ack = builder_dramcoresoc_wishbone_ack;
    if (builder_done) begin
        builder_shared_ack = 1'd1;
    end
end
assign builder_shared_err = builder_dramcoresoc_wishbone_err;
always @(*) begin
	builder_shared_dat_r = 32'd0;
    builder_shared_dat_r = ({32{builder_slave_sel_r}} & builder_dramcoresoc_wishbone_dat_r);
    if (builder_done) begin
        builder_shared_dat_r = 32'd4294967295;
    end
end
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
	builder_error = 1'd0;
    if (builder_done) begin
        builder_error = 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign main_ddrphy_dfi_p0_cke = main_dram_ctrl_dfi_p0_cke;
assign main_ddrphy_dfi_p0_reset_n = main_dram_ctrl_dfi_p0_reset_n;
assign main_ddrphy_dfi_p0_mode_2n = main_dram_ctrl_dfi_p0_mode_2n;
assign main_dram_ctrl_dfi_p0_alert_n = main_ddrphy_dfi_p0_alert_n;
assign main_ddrphy_dfi_p0_address = main_dram_ctrl_dfi_p0_address;
assign main_ddrphy_dfi_p0_bank = main_dram_ctrl_dfi_p0_bank;
assign main_ddrphy_dfi_p0_cas_n = main_dram_ctrl_dfi_p0_cas_n;
assign main_ddrphy_dfi_p0_cs_n = main_dram_ctrl_dfi_p0_cs_n;
assign main_ddrphy_dfi_p0_ras_n = main_dram_ctrl_dfi_p0_ras_n;
assign main_ddrphy_dfi_p0_act_n = main_dram_ctrl_dfi_p0_act_n;
assign main_ddrphy_dfi_p0_odt = main_dram_ctrl_dfi_p0_odt;
assign main_ddrphy_dfi_p0_we_n = main_dram_ctrl_dfi_p0_we_n;
assign main_ddrphy_dfi_p0_wrdata = main_dram_ctrl_dfi_p0_wrdata;
assign main_ddrphy_dfi_p0_wrdata_en = main_dram_ctrl_dfi_p0_wrdata_en;
assign main_ddrphy_dfi_p0_wrdata_mask = main_dram_ctrl_dfi_p0_wrdata_mask;
assign main_ddrphy_dfi_p0_rddata_en = main_dram_ctrl_dfi_p0_rddata_en;
assign main_dram_ctrl_dfi_p0_rddata = main_ddrphy_dfi_p0_rddata;
assign main_dram_ctrl_dfi_p0_rddata_valid = main_ddrphy_dfi_p0_rddata_valid;
assign main_ddrphy_dfi_p1_cke = main_dram_ctrl_dfi_p1_cke;
assign main_ddrphy_dfi_p1_reset_n = main_dram_ctrl_dfi_p1_reset_n;
assign main_ddrphy_dfi_p1_mode_2n = main_dram_ctrl_dfi_p1_mode_2n;
assign main_dram_ctrl_dfi_p1_alert_n = main_ddrphy_dfi_p1_alert_n;
assign main_ddrphy_dfi_p1_address = main_dram_ctrl_dfi_p1_address;
assign main_ddrphy_dfi_p1_bank = main_dram_ctrl_dfi_p1_bank;
assign main_ddrphy_dfi_p1_cas_n = main_dram_ctrl_dfi_p1_cas_n;
assign main_ddrphy_dfi_p1_cs_n = main_dram_ctrl_dfi_p1_cs_n;
assign main_ddrphy_dfi_p1_ras_n = main_dram_ctrl_dfi_p1_ras_n;
assign main_ddrphy_dfi_p1_act_n = main_dram_ctrl_dfi_p1_act_n;
assign main_ddrphy_dfi_p1_odt = main_dram_ctrl_dfi_p1_odt;
assign main_ddrphy_dfi_p1_we_n = main_dram_ctrl_dfi_p1_we_n;
assign main_ddrphy_dfi_p1_wrdata = main_dram_ctrl_dfi_p1_wrdata;
assign main_ddrphy_dfi_p1_wrdata_en = main_dram_ctrl_dfi_p1_wrdata_en;
assign main_ddrphy_dfi_p1_wrdata_mask = main_dram_ctrl_dfi_p1_wrdata_mask;
assign main_ddrphy_dfi_p1_rddata_en = main_dram_ctrl_dfi_p1_rddata_en;
assign main_dram_ctrl_dfi_p1_rddata = main_ddrphy_dfi_p1_rddata;
assign main_dram_ctrl_dfi_p1_rddata_valid = main_ddrphy_dfi_p1_rddata_valid;
assign main_ddrphy_dfi_p2_cke = main_dram_ctrl_dfi_p2_cke;
assign main_ddrphy_dfi_p2_reset_n = main_dram_ctrl_dfi_p2_reset_n;
assign main_ddrphy_dfi_p2_mode_2n = main_dram_ctrl_dfi_p2_mode_2n;
assign main_dram_ctrl_dfi_p2_alert_n = main_ddrphy_dfi_p2_alert_n;
assign main_ddrphy_dfi_p2_address = main_dram_ctrl_dfi_p2_address;
assign main_ddrphy_dfi_p2_bank = main_dram_ctrl_dfi_p2_bank;
assign main_ddrphy_dfi_p2_cas_n = main_dram_ctrl_dfi_p2_cas_n;
assign main_ddrphy_dfi_p2_cs_n = main_dram_ctrl_dfi_p2_cs_n;
assign main_ddrphy_dfi_p2_ras_n = main_dram_ctrl_dfi_p2_ras_n;
assign main_ddrphy_dfi_p2_act_n = main_dram_ctrl_dfi_p2_act_n;
assign main_ddrphy_dfi_p2_odt = main_dram_ctrl_dfi_p2_odt;
assign main_ddrphy_dfi_p2_we_n = main_dram_ctrl_dfi_p2_we_n;
assign main_ddrphy_dfi_p2_wrdata = main_dram_ctrl_dfi_p2_wrdata;
assign main_ddrphy_dfi_p2_wrdata_en = main_dram_ctrl_dfi_p2_wrdata_en;
assign main_ddrphy_dfi_p2_wrdata_mask = main_dram_ctrl_dfi_p2_wrdata_mask;
assign main_ddrphy_dfi_p2_rddata_en = main_dram_ctrl_dfi_p2_rddata_en;
assign main_dram_ctrl_dfi_p2_rddata = main_ddrphy_dfi_p2_rddata;
assign main_dram_ctrl_dfi_p2_rddata_valid = main_ddrphy_dfi_p2_rddata_valid;
assign main_ddrphy_dfi_p3_cke = main_dram_ctrl_dfi_p3_cke;
assign main_ddrphy_dfi_p3_reset_n = main_dram_ctrl_dfi_p3_reset_n;
assign main_ddrphy_dfi_p3_mode_2n = main_dram_ctrl_dfi_p3_mode_2n;
assign main_dram_ctrl_dfi_p3_alert_n = main_ddrphy_dfi_p3_alert_n;
assign main_ddrphy_dfi_p3_address = main_dram_ctrl_dfi_p3_address;
assign main_ddrphy_dfi_p3_bank = main_dram_ctrl_dfi_p3_bank;
assign main_ddrphy_dfi_p3_cas_n = main_dram_ctrl_dfi_p3_cas_n;
assign main_ddrphy_dfi_p3_cs_n = main_dram_ctrl_dfi_p3_cs_n;
assign main_ddrphy_dfi_p3_ras_n = main_dram_ctrl_dfi_p3_ras_n;
assign main_ddrphy_dfi_p3_act_n = main_dram_ctrl_dfi_p3_act_n;
assign main_ddrphy_dfi_p3_odt = main_dram_ctrl_dfi_p3_odt;
assign main_ddrphy_dfi_p3_we_n = main_dram_ctrl_dfi_p3_we_n;
assign main_ddrphy_dfi_p3_wrdata = main_dram_ctrl_dfi_p3_wrdata;
assign main_ddrphy_dfi_p3_wrdata_en = main_dram_ctrl_dfi_p3_wrdata_en;
assign main_ddrphy_dfi_p3_wrdata_mask = main_dram_ctrl_dfi_p3_wrdata_mask;
assign main_ddrphy_dfi_p3_rddata_en = main_dram_ctrl_dfi_p3_rddata_en;
assign main_dram_ctrl_dfi_p3_rddata = main_ddrphy_dfi_p3_rddata;
assign main_dram_ctrl_dfi_p3_rddata_valid = main_ddrphy_dfi_p3_rddata_valid;
assign main_ddrphy_dfi_p4_cke = main_dram_ctrl_dfi_p4_cke;
assign main_ddrphy_dfi_p4_reset_n = main_dram_ctrl_dfi_p4_reset_n;
assign main_ddrphy_dfi_p4_mode_2n = main_dram_ctrl_dfi_p4_mode_2n;
assign main_dram_ctrl_dfi_p4_alert_n = main_ddrphy_dfi_p4_alert_n;
assign main_ddrphy_dfi_p4_address = main_dram_ctrl_dfi_p4_address;
assign main_ddrphy_dfi_p4_bank = main_dram_ctrl_dfi_p4_bank;
assign main_ddrphy_dfi_p4_cas_n = main_dram_ctrl_dfi_p4_cas_n;
assign main_ddrphy_dfi_p4_cs_n = main_dram_ctrl_dfi_p4_cs_n;
assign main_ddrphy_dfi_p4_ras_n = main_dram_ctrl_dfi_p4_ras_n;
assign main_ddrphy_dfi_p4_act_n = main_dram_ctrl_dfi_p4_act_n;
assign main_ddrphy_dfi_p4_odt = main_dram_ctrl_dfi_p4_odt;
assign main_ddrphy_dfi_p4_we_n = main_dram_ctrl_dfi_p4_we_n;
assign main_ddrphy_dfi_p4_wrdata = main_dram_ctrl_dfi_p4_wrdata;
assign main_ddrphy_dfi_p4_wrdata_en = main_dram_ctrl_dfi_p4_wrdata_en;
assign main_ddrphy_dfi_p4_wrdata_mask = main_dram_ctrl_dfi_p4_wrdata_mask;
assign main_ddrphy_dfi_p4_rddata_en = main_dram_ctrl_dfi_p4_rddata_en;
assign main_dram_ctrl_dfi_p4_rddata = main_ddrphy_dfi_p4_rddata;
assign main_dram_ctrl_dfi_p4_rddata_valid = main_ddrphy_dfi_p4_rddata_valid;
assign main_ddrphy_dfi_p5_cke = main_dram_ctrl_dfi_p5_cke;
assign main_ddrphy_dfi_p5_reset_n = main_dram_ctrl_dfi_p5_reset_n;
assign main_ddrphy_dfi_p5_mode_2n = main_dram_ctrl_dfi_p5_mode_2n;
assign main_dram_ctrl_dfi_p5_alert_n = main_ddrphy_dfi_p5_alert_n;
assign main_ddrphy_dfi_p5_address = main_dram_ctrl_dfi_p5_address;
assign main_ddrphy_dfi_p5_bank = main_dram_ctrl_dfi_p5_bank;
assign main_ddrphy_dfi_p5_cas_n = main_dram_ctrl_dfi_p5_cas_n;
assign main_ddrphy_dfi_p5_cs_n = main_dram_ctrl_dfi_p5_cs_n;
assign main_ddrphy_dfi_p5_ras_n = main_dram_ctrl_dfi_p5_ras_n;
assign main_ddrphy_dfi_p5_act_n = main_dram_ctrl_dfi_p5_act_n;
assign main_ddrphy_dfi_p5_odt = main_dram_ctrl_dfi_p5_odt;
assign main_ddrphy_dfi_p5_we_n = main_dram_ctrl_dfi_p5_we_n;
assign main_ddrphy_dfi_p5_wrdata = main_dram_ctrl_dfi_p5_wrdata;
assign main_ddrphy_dfi_p5_wrdata_en = main_dram_ctrl_dfi_p5_wrdata_en;
assign main_ddrphy_dfi_p5_wrdata_mask = main_dram_ctrl_dfi_p5_wrdata_mask;
assign main_ddrphy_dfi_p5_rddata_en = main_dram_ctrl_dfi_p5_rddata_en;
assign main_dram_ctrl_dfi_p5_rddata = main_ddrphy_dfi_p5_rddata;
assign main_dram_ctrl_dfi_p5_rddata_valid = main_ddrphy_dfi_p5_rddata_valid;
assign main_ddrphy_dfi_p6_cke = main_dram_ctrl_dfi_p6_cke;
assign main_ddrphy_dfi_p6_reset_n = main_dram_ctrl_dfi_p6_reset_n;
assign main_ddrphy_dfi_p6_mode_2n = main_dram_ctrl_dfi_p6_mode_2n;
assign main_dram_ctrl_dfi_p6_alert_n = main_ddrphy_dfi_p6_alert_n;
assign main_ddrphy_dfi_p6_address = main_dram_ctrl_dfi_p6_address;
assign main_ddrphy_dfi_p6_bank = main_dram_ctrl_dfi_p6_bank;
assign main_ddrphy_dfi_p6_cas_n = main_dram_ctrl_dfi_p6_cas_n;
assign main_ddrphy_dfi_p6_cs_n = main_dram_ctrl_dfi_p6_cs_n;
assign main_ddrphy_dfi_p6_ras_n = main_dram_ctrl_dfi_p6_ras_n;
assign main_ddrphy_dfi_p6_act_n = main_dram_ctrl_dfi_p6_act_n;
assign main_ddrphy_dfi_p6_odt = main_dram_ctrl_dfi_p6_odt;
assign main_ddrphy_dfi_p6_we_n = main_dram_ctrl_dfi_p6_we_n;
assign main_ddrphy_dfi_p6_wrdata = main_dram_ctrl_dfi_p6_wrdata;
assign main_ddrphy_dfi_p6_wrdata_en = main_dram_ctrl_dfi_p6_wrdata_en;
assign main_ddrphy_dfi_p6_wrdata_mask = main_dram_ctrl_dfi_p6_wrdata_mask;
assign main_ddrphy_dfi_p6_rddata_en = main_dram_ctrl_dfi_p6_rddata_en;
assign main_dram_ctrl_dfi_p6_rddata = main_ddrphy_dfi_p6_rddata;
assign main_dram_ctrl_dfi_p6_rddata_valid = main_ddrphy_dfi_p6_rddata_valid;
assign main_ddrphy_dfi_p7_cke = main_dram_ctrl_dfi_p7_cke;
assign main_ddrphy_dfi_p7_reset_n = main_dram_ctrl_dfi_p7_reset_n;
assign main_ddrphy_dfi_p7_mode_2n = main_dram_ctrl_dfi_p7_mode_2n;
assign main_dram_ctrl_dfi_p7_alert_n = main_ddrphy_dfi_p7_alert_n;
assign main_ddrphy_dfi_p7_address = main_dram_ctrl_dfi_p7_address;
assign main_ddrphy_dfi_p7_bank = main_dram_ctrl_dfi_p7_bank;
assign main_ddrphy_dfi_p7_cas_n = main_dram_ctrl_dfi_p7_cas_n;
assign main_ddrphy_dfi_p7_cs_n = main_dram_ctrl_dfi_p7_cs_n;
assign main_ddrphy_dfi_p7_ras_n = main_dram_ctrl_dfi_p7_ras_n;
assign main_ddrphy_dfi_p7_act_n = main_dram_ctrl_dfi_p7_act_n;
assign main_ddrphy_dfi_p7_odt = main_dram_ctrl_dfi_p7_odt;
assign main_ddrphy_dfi_p7_we_n = main_dram_ctrl_dfi_p7_we_n;
assign main_ddrphy_dfi_p7_wrdata = main_dram_ctrl_dfi_p7_wrdata;
assign main_ddrphy_dfi_p7_wrdata_en = main_dram_ctrl_dfi_p7_wrdata_en;
assign main_ddrphy_dfi_p7_wrdata_mask = main_dram_ctrl_dfi_p7_wrdata_mask;
assign main_ddrphy_dfi_p7_rddata_en = main_dram_ctrl_dfi_p7_rddata_en;
assign main_dram_ctrl_dfi_p7_rddata = main_ddrphy_dfi_p7_rddata;
assign main_dram_ctrl_dfi_p7_rddata_valid = main_ddrphy_dfi_p7_rddata_valid;
assign main_ddrphy_dfi_ctl_init_start = main_dram_ctrl_dfi_ctl_init_start;
assign main_dram_ctrl_dfi_ctl_init_complete = main_ddrphy_dfi_ctl_init_complete;
assign main_dram_ctrl_bankmachine0_req_valid = main_dram_ctrl_interface_bank0_valid;
assign main_dram_ctrl_interface_bank0_ready = main_dram_ctrl_bankmachine0_req_ready;
assign main_dram_ctrl_bankmachine0_req_we = main_dram_ctrl_interface_bank0_we;
assign main_dram_ctrl_bankmachine0_req_addr = main_dram_ctrl_interface_bank0_addr;
assign main_dram_ctrl_interface_bank0_lock = main_dram_ctrl_bankmachine0_req_lock;
assign main_dram_ctrl_interface_bank0_wdata_ready = main_dram_ctrl_bankmachine0_req_wdata_ready;
assign main_dram_ctrl_interface_bank0_rdata_valid = main_dram_ctrl_bankmachine0_req_rdata_valid;
assign main_dram_ctrl_bankmachine1_req_valid = main_dram_ctrl_interface_bank1_valid;
assign main_dram_ctrl_interface_bank1_ready = main_dram_ctrl_bankmachine1_req_ready;
assign main_dram_ctrl_bankmachine1_req_we = main_dram_ctrl_interface_bank1_we;
assign main_dram_ctrl_bankmachine1_req_addr = main_dram_ctrl_interface_bank1_addr;
assign main_dram_ctrl_interface_bank1_lock = main_dram_ctrl_bankmachine1_req_lock;
assign main_dram_ctrl_interface_bank1_wdata_ready = main_dram_ctrl_bankmachine1_req_wdata_ready;
assign main_dram_ctrl_interface_bank1_rdata_valid = main_dram_ctrl_bankmachine1_req_rdata_valid;
assign main_dram_ctrl_bankmachine2_req_valid = main_dram_ctrl_interface_bank2_valid;
assign main_dram_ctrl_interface_bank2_ready = main_dram_ctrl_bankmachine2_req_ready;
assign main_dram_ctrl_bankmachine2_req_we = main_dram_ctrl_interface_bank2_we;
assign main_dram_ctrl_bankmachine2_req_addr = main_dram_ctrl_interface_bank2_addr;
assign main_dram_ctrl_interface_bank2_lock = main_dram_ctrl_bankmachine2_req_lock;
assign main_dram_ctrl_interface_bank2_wdata_ready = main_dram_ctrl_bankmachine2_req_wdata_ready;
assign main_dram_ctrl_interface_bank2_rdata_valid = main_dram_ctrl_bankmachine2_req_rdata_valid;
assign main_dram_ctrl_bankmachine3_req_valid = main_dram_ctrl_interface_bank3_valid;
assign main_dram_ctrl_interface_bank3_ready = main_dram_ctrl_bankmachine3_req_ready;
assign main_dram_ctrl_bankmachine3_req_we = main_dram_ctrl_interface_bank3_we;
assign main_dram_ctrl_bankmachine3_req_addr = main_dram_ctrl_interface_bank3_addr;
assign main_dram_ctrl_interface_bank3_lock = main_dram_ctrl_bankmachine3_req_lock;
assign main_dram_ctrl_interface_bank3_wdata_ready = main_dram_ctrl_bankmachine3_req_wdata_ready;
assign main_dram_ctrl_interface_bank3_rdata_valid = main_dram_ctrl_bankmachine3_req_rdata_valid;
assign main_dram_ctrl_bankmachine4_req_valid = main_dram_ctrl_interface_bank4_valid;
assign main_dram_ctrl_interface_bank4_ready = main_dram_ctrl_bankmachine4_req_ready;
assign main_dram_ctrl_bankmachine4_req_we = main_dram_ctrl_interface_bank4_we;
assign main_dram_ctrl_bankmachine4_req_addr = main_dram_ctrl_interface_bank4_addr;
assign main_dram_ctrl_interface_bank4_lock = main_dram_ctrl_bankmachine4_req_lock;
assign main_dram_ctrl_interface_bank4_wdata_ready = main_dram_ctrl_bankmachine4_req_wdata_ready;
assign main_dram_ctrl_interface_bank4_rdata_valid = main_dram_ctrl_bankmachine4_req_rdata_valid;
assign main_dram_ctrl_bankmachine5_req_valid = main_dram_ctrl_interface_bank5_valid;
assign main_dram_ctrl_interface_bank5_ready = main_dram_ctrl_bankmachine5_req_ready;
assign main_dram_ctrl_bankmachine5_req_we = main_dram_ctrl_interface_bank5_we;
assign main_dram_ctrl_bankmachine5_req_addr = main_dram_ctrl_interface_bank5_addr;
assign main_dram_ctrl_interface_bank5_lock = main_dram_ctrl_bankmachine5_req_lock;
assign main_dram_ctrl_interface_bank5_wdata_ready = main_dram_ctrl_bankmachine5_req_wdata_ready;
assign main_dram_ctrl_interface_bank5_rdata_valid = main_dram_ctrl_bankmachine5_req_rdata_valid;
assign main_dram_ctrl_bankmachine6_req_valid = main_dram_ctrl_interface_bank6_valid;
assign main_dram_ctrl_interface_bank6_ready = main_dram_ctrl_bankmachine6_req_ready;
assign main_dram_ctrl_bankmachine6_req_we = main_dram_ctrl_interface_bank6_we;
assign main_dram_ctrl_bankmachine6_req_addr = main_dram_ctrl_interface_bank6_addr;
assign main_dram_ctrl_interface_bank6_lock = main_dram_ctrl_bankmachine6_req_lock;
assign main_dram_ctrl_interface_bank6_wdata_ready = main_dram_ctrl_bankmachine6_req_wdata_ready;
assign main_dram_ctrl_interface_bank6_rdata_valid = main_dram_ctrl_bankmachine6_req_rdata_valid;
assign main_dram_ctrl_bankmachine7_req_valid = main_dram_ctrl_interface_bank7_valid;
assign main_dram_ctrl_interface_bank7_ready = main_dram_ctrl_bankmachine7_req_ready;
assign main_dram_ctrl_bankmachine7_req_we = main_dram_ctrl_interface_bank7_we;
assign main_dram_ctrl_bankmachine7_req_addr = main_dram_ctrl_interface_bank7_addr;
assign main_dram_ctrl_interface_bank7_lock = main_dram_ctrl_bankmachine7_req_lock;
assign main_dram_ctrl_interface_bank7_wdata_ready = main_dram_ctrl_bankmachine7_req_wdata_ready;
assign main_dram_ctrl_interface_bank7_rdata_valid = main_dram_ctrl_bankmachine7_req_rdata_valid;
assign main_dram_ctrl_dfi_ctl_init_start = main_dram_ctrl_init_start;
assign main_dram_ctrl_init_complete = main_dram_ctrl_dfi_ctl_init_complete;
assign main_dram_ctrl_timer_wait = (~main_dram_ctrl_timer_done0);
assign main_dram_ctrl_postponer_req_i = main_dram_ctrl_timer_done0;
assign main_dram_ctrl_wants_refresh = main_dram_ctrl_postponer_req_o;
assign main_dram_ctrl_timer_done1 = (main_dram_ctrl_timer_count1 == 1'd0);
assign main_dram_ctrl_timer_done0 = main_dram_ctrl_timer_done1;
assign main_dram_ctrl_timer_count0 = main_dram_ctrl_timer_count1;
assign main_dram_ctrl_sequencer_trigger = main_dram_ctrl_sequencer_start1;
assign main_dram_ctrl_sequencer_target = main_dram_ctrl_sequencer_counter1;
always @(*) begin
	builder_dramcoresoc_dramcore_refresher_next_state = 2'd0;
    builder_dramcoresoc_dramcore_refresher_next_state = builder_dramcoresoc_dramcore_refresher_state;
    case (builder_dramcoresoc_dramcore_refresher_state)
        1'd1: begin
            if (main_dram_ctrl_cmd_ready) begin
                builder_dramcoresoc_dramcore_refresher_next_state = 2'd2;
            end
        end
        2'd2: begin
            if (main_dram_ctrl_sequencer_done0) begin
                builder_dramcoresoc_dramcore_refresher_next_state = 1'd0;
            end
        end
        default: begin
            if (1'd1) begin
                if (main_dram_ctrl_wants_refresh) begin
                    builder_dramcoresoc_dramcore_refresher_next_state = 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_cmd_last = 1'd0;
    case (builder_dramcoresoc_dramcore_refresher_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_dram_ctrl_sequencer_done0) begin
                main_dram_ctrl_cmd_last = 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_sequencer_start0 = 1'd0;
    case (builder_dramcoresoc_dramcore_refresher_state)
        1'd1: begin
            if (main_dram_ctrl_cmd_ready) begin
                main_dram_ctrl_sequencer_start0 = 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_cmd_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_refresher_state)
        1'd1: begin
            main_dram_ctrl_cmd_valid = 1'd1;
        end
        2'd2: begin
            main_dram_ctrl_cmd_valid = 1'd1;
            if (main_dram_ctrl_sequencer_done0) begin
                main_dram_ctrl_cmd_valid = 1'd0;
            end
        end
        default: begin
        end
    endcase
end
assign main_dram_ctrl_bankmachine0_timer_done = (main_dram_ctrl_bankmachine0_timer == 1'd0);
assign main_dram_ctrl_bankmachine0_sink_valid = main_dram_ctrl_bankmachine0_req_valid;
assign main_dram_ctrl_bankmachine0_req_ready = main_dram_ctrl_bankmachine0_sink_ready;
assign main_dram_ctrl_bankmachine0_sink_payload_we = main_dram_ctrl_bankmachine0_req_we;
assign main_dram_ctrl_bankmachine0_sink_payload_addr = main_dram_ctrl_bankmachine0_req_addr;
assign main_dram_ctrl_bankmachine0_sink_sink_valid = main_dram_ctrl_bankmachine0_source_valid;
assign main_dram_ctrl_bankmachine0_source_ready = main_dram_ctrl_bankmachine0_sink_sink_ready;
assign main_dram_ctrl_bankmachine0_sink_sink_first = main_dram_ctrl_bankmachine0_source_first;
assign main_dram_ctrl_bankmachine0_sink_sink_last = main_dram_ctrl_bankmachine0_source_last;
assign main_dram_ctrl_bankmachine0_sink_sink_payload_we = main_dram_ctrl_bankmachine0_source_payload_we;
assign main_dram_ctrl_bankmachine0_sink_sink_payload_addr = main_dram_ctrl_bankmachine0_source_payload_addr;
assign main_dram_ctrl_bankmachine0_source_source_ready = (main_dram_ctrl_bankmachine0_req_wdata_ready | main_dram_ctrl_bankmachine0_req_rdata_valid);
assign main_dram_ctrl_bankmachine0_req_lock = (main_dram_ctrl_bankmachine0_source_valid | main_dram_ctrl_bankmachine0_source_source_valid);
assign main_dram_ctrl_bankmachine0_pre_sig = (main_dram_ctrl_bankmachine0_auto_precharge <<< 4'd10);
assign main_dram_ctrl_bankmachine0_cmd_payload_ba = 1'd0;
always @(*) begin
	main_dram_ctrl_bankmachine0_cmd_payload_a = 15'd0;
    if (main_dram_ctrl_bankmachine0_row_col_n_addr_sel) begin
        main_dram_ctrl_bankmachine0_cmd_payload_a = main_dram_ctrl_bankmachine0_source_source_payload_addr[20:6];
    end else begin
        if (main_dram_ctrl_bankmachine0_pre_n_addr_sel) begin
            main_dram_ctrl_bankmachine0_cmd_payload_a = 1'd0;
        end else begin
            main_dram_ctrl_bankmachine0_cmd_payload_a = (main_dram_ctrl_bankmachine0_pre_sig | {main_dram_ctrl_bankmachine0_source_source_payload_addr[5:0], {4{1'd0}}});
        end
    end
end
assign main_dram_ctrl_bankmachine0_twtpcon_valid = ((main_dram_ctrl_bankmachine0_cmd_valid & main_dram_ctrl_bankmachine0_cmd_ready) & main_dram_ctrl_bankmachine0_cmd_payload_is_write);
assign main_dram_ctrl_bankmachine0_trccon_valid = ((main_dram_ctrl_bankmachine0_cmd_valid & main_dram_ctrl_bankmachine0_cmd_ready) & main_dram_ctrl_bankmachine0_row_open);
assign main_dram_ctrl_bankmachine0_trascon_valid = ((main_dram_ctrl_bankmachine0_cmd_valid & main_dram_ctrl_bankmachine0_cmd_ready) & main_dram_ctrl_bankmachine0_row_open);
always @(*) begin
	main_dram_ctrl_bankmachine0_auto_precharge = 1'd0;
    if ((main_dram_ctrl_bankmachine0_source_valid & main_dram_ctrl_bankmachine0_source_source_valid)) begin
        if ((main_dram_ctrl_bankmachine0_source_payload_addr[20:6] != main_dram_ctrl_bankmachine0_source_source_payload_addr[20:6])) begin
            main_dram_ctrl_bankmachine0_auto_precharge = (main_dram_ctrl_bankmachine0_row_close == 1'd0);
        end
    end
end
assign main_dram_ctrl_bankmachine0_simplesyncfifo0_din = {main_dram_ctrl_bankmachine0_fifo_in_last, main_dram_ctrl_bankmachine0_fifo_in_first, main_dram_ctrl_bankmachine0_fifo_in_payload_addr, main_dram_ctrl_bankmachine0_fifo_in_payload_we};
assign {main_dram_ctrl_bankmachine0_fifo_out_last, main_dram_ctrl_bankmachine0_fifo_out_first, main_dram_ctrl_bankmachine0_fifo_out_payload_addr, main_dram_ctrl_bankmachine0_fifo_out_payload_we} = main_dram_ctrl_bankmachine0_simplesyncfifo0_dout;
assign {main_dram_ctrl_bankmachine0_fifo_out_last, main_dram_ctrl_bankmachine0_fifo_out_first, main_dram_ctrl_bankmachine0_fifo_out_payload_addr, main_dram_ctrl_bankmachine0_fifo_out_payload_we} = main_dram_ctrl_bankmachine0_simplesyncfifo0_dout;
assign {main_dram_ctrl_bankmachine0_fifo_out_last, main_dram_ctrl_bankmachine0_fifo_out_first, main_dram_ctrl_bankmachine0_fifo_out_payload_addr, main_dram_ctrl_bankmachine0_fifo_out_payload_we} = main_dram_ctrl_bankmachine0_simplesyncfifo0_dout;
assign {main_dram_ctrl_bankmachine0_fifo_out_last, main_dram_ctrl_bankmachine0_fifo_out_first, main_dram_ctrl_bankmachine0_fifo_out_payload_addr, main_dram_ctrl_bankmachine0_fifo_out_payload_we} = main_dram_ctrl_bankmachine0_simplesyncfifo0_dout;
assign main_dram_ctrl_bankmachine0_sink_ready = main_dram_ctrl_bankmachine0_simplesyncfifo0_writable;
assign main_dram_ctrl_bankmachine0_simplesyncfifo0_we = main_dram_ctrl_bankmachine0_sink_valid;
assign main_dram_ctrl_bankmachine0_fifo_in_first = main_dram_ctrl_bankmachine0_sink_first;
assign main_dram_ctrl_bankmachine0_fifo_in_last = main_dram_ctrl_bankmachine0_sink_last;
assign main_dram_ctrl_bankmachine0_fifo_in_payload_we = main_dram_ctrl_bankmachine0_sink_payload_we;
assign main_dram_ctrl_bankmachine0_fifo_in_payload_addr = main_dram_ctrl_bankmachine0_sink_payload_addr;
assign main_dram_ctrl_bankmachine0_source_valid = main_dram_ctrl_bankmachine0_simplesyncfifo0_readable;
assign main_dram_ctrl_bankmachine0_source_first = main_dram_ctrl_bankmachine0_fifo_out_first;
assign main_dram_ctrl_bankmachine0_source_last = main_dram_ctrl_bankmachine0_fifo_out_last;
assign main_dram_ctrl_bankmachine0_source_payload_we = main_dram_ctrl_bankmachine0_fifo_out_payload_we;
assign main_dram_ctrl_bankmachine0_source_payload_addr = main_dram_ctrl_bankmachine0_fifo_out_payload_addr;
assign main_dram_ctrl_bankmachine0_simplesyncfifo0_re = main_dram_ctrl_bankmachine0_source_ready;
assign main_dram_ctrl_bankmachine0_wrport_adr = main_dram_ctrl_bankmachine0_w_cnt;
assign main_dram_ctrl_bankmachine0_wrport_dat_w = main_dram_ctrl_bankmachine0_simplesyncfifo0_din;
assign main_dram_ctrl_bankmachine0_wrport_we = (main_dram_ctrl_bankmachine0_simplesyncfifo0_we & main_dram_ctrl_bankmachine0_simplesyncfifo0_writable);
assign main_dram_ctrl_bankmachine0_wrport_re = 1'd0;
assign main_dram_ctrl_bankmachine0_do_read = (main_dram_ctrl_bankmachine0_simplesyncfifo0_readable & main_dram_ctrl_bankmachine0_simplesyncfifo0_re);
assign main_dram_ctrl_bankmachine0_rdport_adr = main_dram_ctrl_bankmachine0_r_cnt;
assign main_dram_ctrl_bankmachine0_simplesyncfifo0_dout = main_dram_ctrl_bankmachine0_rdport_dat_r;
assign main_dram_ctrl_bankmachine0_half_way = (main_dram_ctrl_bankmachine0_w_cnt[3:0] == main_dram_ctrl_bankmachine0_r_cnt[3:0]);
assign main_dram_ctrl_bankmachine0_simplesyncfifo0_writable = (~(main_dram_ctrl_bankmachine0_half_way & (main_dram_ctrl_bankmachine0_w_cnt[4] != main_dram_ctrl_bankmachine0_r_cnt[4])));
assign main_dram_ctrl_bankmachine0_simplesyncfifo0_readable = (~(main_dram_ctrl_bankmachine0_half_way & (main_dram_ctrl_bankmachine0_w_cnt[4] == main_dram_ctrl_bankmachine0_r_cnt[4])));
assign main_dram_ctrl_bankmachine0_pipe_valid_sink_ready = ((~main_dram_ctrl_bankmachine0_pipe_valid_source_valid) | main_dram_ctrl_bankmachine0_pipe_valid_source_ready);
assign main_dram_ctrl_bankmachine0_pipe_valid_sink_valid = main_dram_ctrl_bankmachine0_sink_sink_valid;
assign main_dram_ctrl_bankmachine0_sink_sink_ready = main_dram_ctrl_bankmachine0_pipe_valid_sink_ready;
assign main_dram_ctrl_bankmachine0_pipe_valid_sink_first = main_dram_ctrl_bankmachine0_sink_sink_first;
assign main_dram_ctrl_bankmachine0_pipe_valid_sink_last = main_dram_ctrl_bankmachine0_sink_sink_last;
assign main_dram_ctrl_bankmachine0_pipe_valid_sink_payload_we = main_dram_ctrl_bankmachine0_sink_sink_payload_we;
assign main_dram_ctrl_bankmachine0_pipe_valid_sink_payload_addr = main_dram_ctrl_bankmachine0_sink_sink_payload_addr;
assign main_dram_ctrl_bankmachine0_source_source_valid = main_dram_ctrl_bankmachine0_pipe_valid_source_valid;
assign main_dram_ctrl_bankmachine0_pipe_valid_source_ready = main_dram_ctrl_bankmachine0_source_source_ready;
assign main_dram_ctrl_bankmachine0_source_source_first = main_dram_ctrl_bankmachine0_pipe_valid_source_first;
assign main_dram_ctrl_bankmachine0_source_source_last = main_dram_ctrl_bankmachine0_pipe_valid_source_last;
assign main_dram_ctrl_bankmachine0_source_source_payload_we = main_dram_ctrl_bankmachine0_pipe_valid_source_payload_we;
assign main_dram_ctrl_bankmachine0_source_source_payload_addr = main_dram_ctrl_bankmachine0_pipe_valid_source_payload_addr;
always @(*) begin
	builder_dramcoresoc_dramcore_bankmachine0_next_state = 3'd0;
    builder_dramcoresoc_dramcore_bankmachine0_next_state = builder_dramcoresoc_dramcore_bankmachine0_state;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine0_twtpcon_ready & main_dram_ctrl_bankmachine0_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine0_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine0_next_state = 2'd3;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine0_twtpcon_ready & main_dram_ctrl_bankmachine0_trascon_ready)) begin
                builder_dramcoresoc_dramcore_bankmachine0_next_state = 2'd3;
            end
        end
        2'd3: begin
            if (main_dram_ctrl_bankmachine0_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine0_next_state = 3'd4;
            end
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine0_trccon_ready) begin
                if (main_dram_ctrl_bankmachine0_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine0_next_state = 3'd5;
                end
            end
        end
        3'd5: begin
            if (main_dram_ctrl_bankmachine0_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine0_next_state = 1'd0;
            end
        end
        3'd6: begin
            if ((~main_dram_ctrl_bankmachine0_refresh_req)) begin
                builder_dramcoresoc_dramcore_bankmachine0_next_state = 1'd0;
            end
        end
        default: begin
            if (main_dram_ctrl_bankmachine0_refresh_req) begin
                builder_dramcoresoc_dramcore_bankmachine0_next_state = 3'd6;
            end else begin
                if (((main_dram_ctrl_bankmachine0_source_source_valid & main_dram_ctrl_bankmachine0_row_opened) & main_dram_ctrl_bankmachine0_row_hit)) begin
                    if ((main_dram_ctrl_bankmachine0_cmd_ready & main_dram_ctrl_bankmachine0_auto_precharge)) begin
                        builder_dramcoresoc_dramcore_bankmachine0_next_state = 2'd2;
                    end
                end else begin
                    if ((main_dram_ctrl_bankmachine0_source_source_valid & main_dram_ctrl_bankmachine0_row_opened)) begin
                        builder_dramcoresoc_dramcore_bankmachine0_next_state = 1'd1;
                    end else begin
                        if (main_dram_ctrl_bankmachine0_source_source_valid) begin
                            builder_dramcoresoc_dramcore_bankmachine0_next_state = 3'd4;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_timer_bankmachine0_next_value = 4'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine0_twtpcon_ready & main_dram_ctrl_bankmachine0_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine0_cmd_ready) begin
                    main_dram_ctrl_bankmachine0_timer_bankmachine0_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine0_twtpcon_ready & main_dram_ctrl_bankmachine0_trascon_ready)) begin
                main_dram_ctrl_bankmachine0_timer_bankmachine0_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine0_trccon_ready) begin
                if (main_dram_ctrl_bankmachine0_cmd_ready) begin
                    main_dram_ctrl_bankmachine0_timer_bankmachine0_next_value = (main_dram_ctrl_csrstorage1_storage - 1'd1);
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_cmd_payload_cas = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine0_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine0_source_source_valid & main_dram_ctrl_bankmachine0_row_opened) & main_dram_ctrl_bankmachine0_row_hit)) begin
                    main_dram_ctrl_bankmachine0_cmd_payload_cas = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_timer_bankmachine0_next_value_ce = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine0_twtpcon_ready & main_dram_ctrl_bankmachine0_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine0_cmd_ready) begin
                    main_dram_ctrl_bankmachine0_timer_bankmachine0_next_value_ce = 1'd1;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine0_twtpcon_ready & main_dram_ctrl_bankmachine0_trascon_ready)) begin
                main_dram_ctrl_bankmachine0_timer_bankmachine0_next_value_ce = 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine0_trccon_ready) begin
                if (main_dram_ctrl_bankmachine0_cmd_ready) begin
                    main_dram_ctrl_bankmachine0_timer_bankmachine0_next_value_ce = 1'd1;
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_cmd_payload_ras = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine0_twtpcon_ready & main_dram_ctrl_bankmachine0_trascon_ready)) begin
                main_dram_ctrl_bankmachine0_cmd_payload_ras = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine0_trccon_ready) begin
                main_dram_ctrl_bankmachine0_cmd_payload_ras = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_row_close = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
            main_dram_ctrl_bankmachine0_row_close = 1'd1;
        end
        2'd2: begin
            main_dram_ctrl_bankmachine0_row_close = 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine0_row_close = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_cmd_payload_we = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine0_twtpcon_ready & main_dram_ctrl_bankmachine0_trascon_ready)) begin
                main_dram_ctrl_bankmachine0_cmd_payload_we = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine0_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine0_source_source_valid & main_dram_ctrl_bankmachine0_row_opened) & main_dram_ctrl_bankmachine0_row_hit)) begin
                    if (main_dram_ctrl_bankmachine0_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine0_cmd_payload_we = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_row_hit_reeval = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            main_dram_ctrl_bankmachine0_row_hit_reeval = 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_cmd_payload_is_cmd = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine0_twtpcon_ready & main_dram_ctrl_bankmachine0_trascon_ready)) begin
                main_dram_ctrl_bankmachine0_cmd_payload_is_cmd = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine0_trccon_ready) begin
                main_dram_ctrl_bankmachine0_cmd_payload_is_cmd = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine0_cmd_payload_is_cmd = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_row_open = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine0_trccon_ready) begin
                main_dram_ctrl_bankmachine0_row_open = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_cmd_payload_is_read = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine0_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine0_source_source_valid & main_dram_ctrl_bankmachine0_row_opened) & main_dram_ctrl_bankmachine0_row_hit)) begin
                    if (main_dram_ctrl_bankmachine0_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine0_cmd_payload_is_read = 1'd1;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_cmd_payload_is_write = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine0_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine0_source_source_valid & main_dram_ctrl_bankmachine0_row_opened) & main_dram_ctrl_bankmachine0_row_hit)) begin
                    if (main_dram_ctrl_bankmachine0_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine0_cmd_payload_is_write = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_req_wdata_ready = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine0_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine0_source_source_valid & main_dram_ctrl_bankmachine0_row_opened) & main_dram_ctrl_bankmachine0_row_hit)) begin
                    if (main_dram_ctrl_bankmachine0_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine0_req_wdata_ready = main_dram_ctrl_bankmachine0_cmd_ready;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_row_col_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine0_trccon_ready) begin
                main_dram_ctrl_bankmachine0_row_col_n_addr_sel = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_req_rdata_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine0_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine0_source_source_valid & main_dram_ctrl_bankmachine0_row_opened) & main_dram_ctrl_bankmachine0_row_hit)) begin
                    if (main_dram_ctrl_bankmachine0_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine0_req_rdata_valid = main_dram_ctrl_bankmachine0_cmd_ready;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_pre_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine0_twtpcon_ready & main_dram_ctrl_bankmachine0_trascon_ready)) begin
                main_dram_ctrl_bankmachine0_pre_n_addr_sel = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_refresh_gnt = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            if (main_dram_ctrl_bankmachine0_twtpcon_ready) begin
                main_dram_ctrl_bankmachine0_refresh_gnt = 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine0_cmd_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine0_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine0_twtpcon_ready & main_dram_ctrl_bankmachine0_trascon_ready)) begin
                main_dram_ctrl_bankmachine0_cmd_valid = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine0_trccon_ready) begin
                main_dram_ctrl_bankmachine0_cmd_valid = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine0_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine0_source_source_valid & main_dram_ctrl_bankmachine0_row_opened) & main_dram_ctrl_bankmachine0_row_hit)) begin
                    main_dram_ctrl_bankmachine0_cmd_valid = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
assign main_dram_ctrl_bankmachine1_timer_done = (main_dram_ctrl_bankmachine1_timer == 1'd0);
assign main_dram_ctrl_bankmachine1_sink_valid = main_dram_ctrl_bankmachine1_req_valid;
assign main_dram_ctrl_bankmachine1_req_ready = main_dram_ctrl_bankmachine1_sink_ready;
assign main_dram_ctrl_bankmachine1_sink_payload_we = main_dram_ctrl_bankmachine1_req_we;
assign main_dram_ctrl_bankmachine1_sink_payload_addr = main_dram_ctrl_bankmachine1_req_addr;
assign main_dram_ctrl_bankmachine1_sink_sink_valid = main_dram_ctrl_bankmachine1_source_valid;
assign main_dram_ctrl_bankmachine1_source_ready = main_dram_ctrl_bankmachine1_sink_sink_ready;
assign main_dram_ctrl_bankmachine1_sink_sink_first = main_dram_ctrl_bankmachine1_source_first;
assign main_dram_ctrl_bankmachine1_sink_sink_last = main_dram_ctrl_bankmachine1_source_last;
assign main_dram_ctrl_bankmachine1_sink_sink_payload_we = main_dram_ctrl_bankmachine1_source_payload_we;
assign main_dram_ctrl_bankmachine1_sink_sink_payload_addr = main_dram_ctrl_bankmachine1_source_payload_addr;
assign main_dram_ctrl_bankmachine1_source_source_ready = (main_dram_ctrl_bankmachine1_req_wdata_ready | main_dram_ctrl_bankmachine1_req_rdata_valid);
assign main_dram_ctrl_bankmachine1_req_lock = (main_dram_ctrl_bankmachine1_source_valid | main_dram_ctrl_bankmachine1_source_source_valid);
assign main_dram_ctrl_bankmachine1_pre_sig = (main_dram_ctrl_bankmachine1_auto_precharge <<< 4'd10);
assign main_dram_ctrl_bankmachine1_cmd_payload_ba = 1'd1;
always @(*) begin
	main_dram_ctrl_bankmachine1_cmd_payload_a = 15'd0;
    if (main_dram_ctrl_bankmachine1_row_col_n_addr_sel) begin
        main_dram_ctrl_bankmachine1_cmd_payload_a = main_dram_ctrl_bankmachine1_source_source_payload_addr[20:6];
    end else begin
        if (main_dram_ctrl_bankmachine1_pre_n_addr_sel) begin
            main_dram_ctrl_bankmachine1_cmd_payload_a = 1'd0;
        end else begin
            main_dram_ctrl_bankmachine1_cmd_payload_a = (main_dram_ctrl_bankmachine1_pre_sig | {main_dram_ctrl_bankmachine1_source_source_payload_addr[5:0], {4{1'd0}}});
        end
    end
end
assign main_dram_ctrl_bankmachine1_twtpcon_valid = ((main_dram_ctrl_bankmachine1_cmd_valid & main_dram_ctrl_bankmachine1_cmd_ready) & main_dram_ctrl_bankmachine1_cmd_payload_is_write);
assign main_dram_ctrl_bankmachine1_trccon_valid = ((main_dram_ctrl_bankmachine1_cmd_valid & main_dram_ctrl_bankmachine1_cmd_ready) & main_dram_ctrl_bankmachine1_row_open);
assign main_dram_ctrl_bankmachine1_trascon_valid = ((main_dram_ctrl_bankmachine1_cmd_valid & main_dram_ctrl_bankmachine1_cmd_ready) & main_dram_ctrl_bankmachine1_row_open);
always @(*) begin
	main_dram_ctrl_bankmachine1_auto_precharge = 1'd0;
    if ((main_dram_ctrl_bankmachine1_source_valid & main_dram_ctrl_bankmachine1_source_source_valid)) begin
        if ((main_dram_ctrl_bankmachine1_source_payload_addr[20:6] != main_dram_ctrl_bankmachine1_source_source_payload_addr[20:6])) begin
            main_dram_ctrl_bankmachine1_auto_precharge = (main_dram_ctrl_bankmachine1_row_close == 1'd0);
        end
    end
end
assign main_dram_ctrl_bankmachine1_simplesyncfifo1_din = {main_dram_ctrl_bankmachine1_fifo_in_last, main_dram_ctrl_bankmachine1_fifo_in_first, main_dram_ctrl_bankmachine1_fifo_in_payload_addr, main_dram_ctrl_bankmachine1_fifo_in_payload_we};
assign {main_dram_ctrl_bankmachine1_fifo_out_last, main_dram_ctrl_bankmachine1_fifo_out_first, main_dram_ctrl_bankmachine1_fifo_out_payload_addr, main_dram_ctrl_bankmachine1_fifo_out_payload_we} = main_dram_ctrl_bankmachine1_simplesyncfifo1_dout;
assign {main_dram_ctrl_bankmachine1_fifo_out_last, main_dram_ctrl_bankmachine1_fifo_out_first, main_dram_ctrl_bankmachine1_fifo_out_payload_addr, main_dram_ctrl_bankmachine1_fifo_out_payload_we} = main_dram_ctrl_bankmachine1_simplesyncfifo1_dout;
assign {main_dram_ctrl_bankmachine1_fifo_out_last, main_dram_ctrl_bankmachine1_fifo_out_first, main_dram_ctrl_bankmachine1_fifo_out_payload_addr, main_dram_ctrl_bankmachine1_fifo_out_payload_we} = main_dram_ctrl_bankmachine1_simplesyncfifo1_dout;
assign {main_dram_ctrl_bankmachine1_fifo_out_last, main_dram_ctrl_bankmachine1_fifo_out_first, main_dram_ctrl_bankmachine1_fifo_out_payload_addr, main_dram_ctrl_bankmachine1_fifo_out_payload_we} = main_dram_ctrl_bankmachine1_simplesyncfifo1_dout;
assign main_dram_ctrl_bankmachine1_sink_ready = main_dram_ctrl_bankmachine1_simplesyncfifo1_writable;
assign main_dram_ctrl_bankmachine1_simplesyncfifo1_we = main_dram_ctrl_bankmachine1_sink_valid;
assign main_dram_ctrl_bankmachine1_fifo_in_first = main_dram_ctrl_bankmachine1_sink_first;
assign main_dram_ctrl_bankmachine1_fifo_in_last = main_dram_ctrl_bankmachine1_sink_last;
assign main_dram_ctrl_bankmachine1_fifo_in_payload_we = main_dram_ctrl_bankmachine1_sink_payload_we;
assign main_dram_ctrl_bankmachine1_fifo_in_payload_addr = main_dram_ctrl_bankmachine1_sink_payload_addr;
assign main_dram_ctrl_bankmachine1_source_valid = main_dram_ctrl_bankmachine1_simplesyncfifo1_readable;
assign main_dram_ctrl_bankmachine1_source_first = main_dram_ctrl_bankmachine1_fifo_out_first;
assign main_dram_ctrl_bankmachine1_source_last = main_dram_ctrl_bankmachine1_fifo_out_last;
assign main_dram_ctrl_bankmachine1_source_payload_we = main_dram_ctrl_bankmachine1_fifo_out_payload_we;
assign main_dram_ctrl_bankmachine1_source_payload_addr = main_dram_ctrl_bankmachine1_fifo_out_payload_addr;
assign main_dram_ctrl_bankmachine1_simplesyncfifo1_re = main_dram_ctrl_bankmachine1_source_ready;
assign main_dram_ctrl_bankmachine1_wrport_adr = main_dram_ctrl_bankmachine1_w_cnt;
assign main_dram_ctrl_bankmachine1_wrport_dat_w = main_dram_ctrl_bankmachine1_simplesyncfifo1_din;
assign main_dram_ctrl_bankmachine1_wrport_we = (main_dram_ctrl_bankmachine1_simplesyncfifo1_we & main_dram_ctrl_bankmachine1_simplesyncfifo1_writable);
assign main_dram_ctrl_bankmachine1_wrport_re = 1'd0;
assign main_dram_ctrl_bankmachine1_do_read = (main_dram_ctrl_bankmachine1_simplesyncfifo1_readable & main_dram_ctrl_bankmachine1_simplesyncfifo1_re);
assign main_dram_ctrl_bankmachine1_rdport_adr = main_dram_ctrl_bankmachine1_r_cnt;
assign main_dram_ctrl_bankmachine1_simplesyncfifo1_dout = main_dram_ctrl_bankmachine1_rdport_dat_r;
assign main_dram_ctrl_bankmachine1_half_way = (main_dram_ctrl_bankmachine1_w_cnt[3:0] == main_dram_ctrl_bankmachine1_r_cnt[3:0]);
assign main_dram_ctrl_bankmachine1_simplesyncfifo1_writable = (~(main_dram_ctrl_bankmachine1_half_way & (main_dram_ctrl_bankmachine1_w_cnt[4] != main_dram_ctrl_bankmachine1_r_cnt[4])));
assign main_dram_ctrl_bankmachine1_simplesyncfifo1_readable = (~(main_dram_ctrl_bankmachine1_half_way & (main_dram_ctrl_bankmachine1_w_cnt[4] == main_dram_ctrl_bankmachine1_r_cnt[4])));
assign main_dram_ctrl_bankmachine1_pipe_valid_sink_ready = ((~main_dram_ctrl_bankmachine1_pipe_valid_source_valid) | main_dram_ctrl_bankmachine1_pipe_valid_source_ready);
assign main_dram_ctrl_bankmachine1_pipe_valid_sink_valid = main_dram_ctrl_bankmachine1_sink_sink_valid;
assign main_dram_ctrl_bankmachine1_sink_sink_ready = main_dram_ctrl_bankmachine1_pipe_valid_sink_ready;
assign main_dram_ctrl_bankmachine1_pipe_valid_sink_first = main_dram_ctrl_bankmachine1_sink_sink_first;
assign main_dram_ctrl_bankmachine1_pipe_valid_sink_last = main_dram_ctrl_bankmachine1_sink_sink_last;
assign main_dram_ctrl_bankmachine1_pipe_valid_sink_payload_we = main_dram_ctrl_bankmachine1_sink_sink_payload_we;
assign main_dram_ctrl_bankmachine1_pipe_valid_sink_payload_addr = main_dram_ctrl_bankmachine1_sink_sink_payload_addr;
assign main_dram_ctrl_bankmachine1_source_source_valid = main_dram_ctrl_bankmachine1_pipe_valid_source_valid;
assign main_dram_ctrl_bankmachine1_pipe_valid_source_ready = main_dram_ctrl_bankmachine1_source_source_ready;
assign main_dram_ctrl_bankmachine1_source_source_first = main_dram_ctrl_bankmachine1_pipe_valid_source_first;
assign main_dram_ctrl_bankmachine1_source_source_last = main_dram_ctrl_bankmachine1_pipe_valid_source_last;
assign main_dram_ctrl_bankmachine1_source_source_payload_we = main_dram_ctrl_bankmachine1_pipe_valid_source_payload_we;
assign main_dram_ctrl_bankmachine1_source_source_payload_addr = main_dram_ctrl_bankmachine1_pipe_valid_source_payload_addr;
always @(*) begin
	builder_dramcoresoc_dramcore_bankmachine1_next_state = 3'd0;
    builder_dramcoresoc_dramcore_bankmachine1_next_state = builder_dramcoresoc_dramcore_bankmachine1_state;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine1_twtpcon_ready & main_dram_ctrl_bankmachine1_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine1_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine1_next_state = 2'd3;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine1_twtpcon_ready & main_dram_ctrl_bankmachine1_trascon_ready)) begin
                builder_dramcoresoc_dramcore_bankmachine1_next_state = 2'd3;
            end
        end
        2'd3: begin
            if (main_dram_ctrl_bankmachine1_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine1_next_state = 3'd4;
            end
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine1_trccon_ready) begin
                if (main_dram_ctrl_bankmachine1_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine1_next_state = 3'd5;
                end
            end
        end
        3'd5: begin
            if (main_dram_ctrl_bankmachine1_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine1_next_state = 1'd0;
            end
        end
        3'd6: begin
            if ((~main_dram_ctrl_bankmachine1_refresh_req)) begin
                builder_dramcoresoc_dramcore_bankmachine1_next_state = 1'd0;
            end
        end
        default: begin
            if (main_dram_ctrl_bankmachine1_refresh_req) begin
                builder_dramcoresoc_dramcore_bankmachine1_next_state = 3'd6;
            end else begin
                if (((main_dram_ctrl_bankmachine1_source_source_valid & main_dram_ctrl_bankmachine1_row_opened) & main_dram_ctrl_bankmachine1_row_hit)) begin
                    if ((main_dram_ctrl_bankmachine1_cmd_ready & main_dram_ctrl_bankmachine1_auto_precharge)) begin
                        builder_dramcoresoc_dramcore_bankmachine1_next_state = 2'd2;
                    end
                end else begin
                    if ((main_dram_ctrl_bankmachine1_source_source_valid & main_dram_ctrl_bankmachine1_row_opened)) begin
                        builder_dramcoresoc_dramcore_bankmachine1_next_state = 1'd1;
                    end else begin
                        if (main_dram_ctrl_bankmachine1_source_source_valid) begin
                            builder_dramcoresoc_dramcore_bankmachine1_next_state = 3'd4;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_timer_bankmachine1_next_value = 4'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine1_twtpcon_ready & main_dram_ctrl_bankmachine1_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine1_cmd_ready) begin
                    main_dram_ctrl_bankmachine1_timer_bankmachine1_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine1_twtpcon_ready & main_dram_ctrl_bankmachine1_trascon_ready)) begin
                main_dram_ctrl_bankmachine1_timer_bankmachine1_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine1_trccon_ready) begin
                if (main_dram_ctrl_bankmachine1_cmd_ready) begin
                    main_dram_ctrl_bankmachine1_timer_bankmachine1_next_value = (main_dram_ctrl_csrstorage1_storage - 1'd1);
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_timer_bankmachine1_next_value_ce = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine1_twtpcon_ready & main_dram_ctrl_bankmachine1_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine1_cmd_ready) begin
                    main_dram_ctrl_bankmachine1_timer_bankmachine1_next_value_ce = 1'd1;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine1_twtpcon_ready & main_dram_ctrl_bankmachine1_trascon_ready)) begin
                main_dram_ctrl_bankmachine1_timer_bankmachine1_next_value_ce = 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine1_trccon_ready) begin
                if (main_dram_ctrl_bankmachine1_cmd_ready) begin
                    main_dram_ctrl_bankmachine1_timer_bankmachine1_next_value_ce = 1'd1;
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_row_open = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine1_trccon_ready) begin
                main_dram_ctrl_bankmachine1_row_open = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_cmd_payload_cas = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine1_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine1_source_source_valid & main_dram_ctrl_bankmachine1_row_opened) & main_dram_ctrl_bankmachine1_row_hit)) begin
                    main_dram_ctrl_bankmachine1_cmd_payload_cas = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_row_close = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
            main_dram_ctrl_bankmachine1_row_close = 1'd1;
        end
        2'd2: begin
            main_dram_ctrl_bankmachine1_row_close = 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine1_row_close = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_cmd_payload_ras = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine1_twtpcon_ready & main_dram_ctrl_bankmachine1_trascon_ready)) begin
                main_dram_ctrl_bankmachine1_cmd_payload_ras = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine1_trccon_ready) begin
                main_dram_ctrl_bankmachine1_cmd_payload_ras = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_row_hit_reeval = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            main_dram_ctrl_bankmachine1_row_hit_reeval = 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_cmd_payload_we = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine1_twtpcon_ready & main_dram_ctrl_bankmachine1_trascon_ready)) begin
                main_dram_ctrl_bankmachine1_cmd_payload_we = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine1_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine1_source_source_valid & main_dram_ctrl_bankmachine1_row_opened) & main_dram_ctrl_bankmachine1_row_hit)) begin
                    if (main_dram_ctrl_bankmachine1_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine1_cmd_payload_we = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_cmd_payload_is_cmd = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine1_twtpcon_ready & main_dram_ctrl_bankmachine1_trascon_ready)) begin
                main_dram_ctrl_bankmachine1_cmd_payload_is_cmd = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine1_trccon_ready) begin
                main_dram_ctrl_bankmachine1_cmd_payload_is_cmd = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine1_cmd_payload_is_cmd = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_cmd_payload_is_read = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine1_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine1_source_source_valid & main_dram_ctrl_bankmachine1_row_opened) & main_dram_ctrl_bankmachine1_row_hit)) begin
                    if (main_dram_ctrl_bankmachine1_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine1_cmd_payload_is_read = 1'd1;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_cmd_payload_is_write = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine1_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine1_source_source_valid & main_dram_ctrl_bankmachine1_row_opened) & main_dram_ctrl_bankmachine1_row_hit)) begin
                    if (main_dram_ctrl_bankmachine1_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine1_cmd_payload_is_write = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_pre_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine1_twtpcon_ready & main_dram_ctrl_bankmachine1_trascon_ready)) begin
                main_dram_ctrl_bankmachine1_pre_n_addr_sel = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_req_wdata_ready = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine1_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine1_source_source_valid & main_dram_ctrl_bankmachine1_row_opened) & main_dram_ctrl_bankmachine1_row_hit)) begin
                    if (main_dram_ctrl_bankmachine1_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine1_req_wdata_ready = main_dram_ctrl_bankmachine1_cmd_ready;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_row_col_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine1_trccon_ready) begin
                main_dram_ctrl_bankmachine1_row_col_n_addr_sel = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_req_rdata_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine1_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine1_source_source_valid & main_dram_ctrl_bankmachine1_row_opened) & main_dram_ctrl_bankmachine1_row_hit)) begin
                    if (main_dram_ctrl_bankmachine1_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine1_req_rdata_valid = main_dram_ctrl_bankmachine1_cmd_ready;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_refresh_gnt = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            if (main_dram_ctrl_bankmachine1_twtpcon_ready) begin
                main_dram_ctrl_bankmachine1_refresh_gnt = 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine1_cmd_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine1_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine1_twtpcon_ready & main_dram_ctrl_bankmachine1_trascon_ready)) begin
                main_dram_ctrl_bankmachine1_cmd_valid = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine1_trccon_ready) begin
                main_dram_ctrl_bankmachine1_cmd_valid = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine1_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine1_source_source_valid & main_dram_ctrl_bankmachine1_row_opened) & main_dram_ctrl_bankmachine1_row_hit)) begin
                    main_dram_ctrl_bankmachine1_cmd_valid = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
assign main_dram_ctrl_bankmachine2_timer_done = (main_dram_ctrl_bankmachine2_timer == 1'd0);
assign main_dram_ctrl_bankmachine2_sink_valid = main_dram_ctrl_bankmachine2_req_valid;
assign main_dram_ctrl_bankmachine2_req_ready = main_dram_ctrl_bankmachine2_sink_ready;
assign main_dram_ctrl_bankmachine2_sink_payload_we = main_dram_ctrl_bankmachine2_req_we;
assign main_dram_ctrl_bankmachine2_sink_payload_addr = main_dram_ctrl_bankmachine2_req_addr;
assign main_dram_ctrl_bankmachine2_sink_sink_valid = main_dram_ctrl_bankmachine2_source_valid;
assign main_dram_ctrl_bankmachine2_source_ready = main_dram_ctrl_bankmachine2_sink_sink_ready;
assign main_dram_ctrl_bankmachine2_sink_sink_first = main_dram_ctrl_bankmachine2_source_first;
assign main_dram_ctrl_bankmachine2_sink_sink_last = main_dram_ctrl_bankmachine2_source_last;
assign main_dram_ctrl_bankmachine2_sink_sink_payload_we = main_dram_ctrl_bankmachine2_source_payload_we;
assign main_dram_ctrl_bankmachine2_sink_sink_payload_addr = main_dram_ctrl_bankmachine2_source_payload_addr;
assign main_dram_ctrl_bankmachine2_source_source_ready = (main_dram_ctrl_bankmachine2_req_wdata_ready | main_dram_ctrl_bankmachine2_req_rdata_valid);
assign main_dram_ctrl_bankmachine2_req_lock = (main_dram_ctrl_bankmachine2_source_valid | main_dram_ctrl_bankmachine2_source_source_valid);
assign main_dram_ctrl_bankmachine2_pre_sig = (main_dram_ctrl_bankmachine2_auto_precharge <<< 4'd10);
assign main_dram_ctrl_bankmachine2_cmd_payload_ba = 2'd2;
always @(*) begin
	main_dram_ctrl_bankmachine2_cmd_payload_a = 15'd0;
    if (main_dram_ctrl_bankmachine2_row_col_n_addr_sel) begin
        main_dram_ctrl_bankmachine2_cmd_payload_a = main_dram_ctrl_bankmachine2_source_source_payload_addr[20:6];
    end else begin
        if (main_dram_ctrl_bankmachine2_pre_n_addr_sel) begin
            main_dram_ctrl_bankmachine2_cmd_payload_a = 1'd0;
        end else begin
            main_dram_ctrl_bankmachine2_cmd_payload_a = (main_dram_ctrl_bankmachine2_pre_sig | {main_dram_ctrl_bankmachine2_source_source_payload_addr[5:0], {4{1'd0}}});
        end
    end
end
assign main_dram_ctrl_bankmachine2_twtpcon_valid = ((main_dram_ctrl_bankmachine2_cmd_valid & main_dram_ctrl_bankmachine2_cmd_ready) & main_dram_ctrl_bankmachine2_cmd_payload_is_write);
assign main_dram_ctrl_bankmachine2_trccon_valid = ((main_dram_ctrl_bankmachine2_cmd_valid & main_dram_ctrl_bankmachine2_cmd_ready) & main_dram_ctrl_bankmachine2_row_open);
assign main_dram_ctrl_bankmachine2_trascon_valid = ((main_dram_ctrl_bankmachine2_cmd_valid & main_dram_ctrl_bankmachine2_cmd_ready) & main_dram_ctrl_bankmachine2_row_open);
always @(*) begin
	main_dram_ctrl_bankmachine2_auto_precharge = 1'd0;
    if ((main_dram_ctrl_bankmachine2_source_valid & main_dram_ctrl_bankmachine2_source_source_valid)) begin
        if ((main_dram_ctrl_bankmachine2_source_payload_addr[20:6] != main_dram_ctrl_bankmachine2_source_source_payload_addr[20:6])) begin
            main_dram_ctrl_bankmachine2_auto_precharge = (main_dram_ctrl_bankmachine2_row_close == 1'd0);
        end
    end
end
assign main_dram_ctrl_bankmachine2_simplesyncfifo2_din = {main_dram_ctrl_bankmachine2_fifo_in_last, main_dram_ctrl_bankmachine2_fifo_in_first, main_dram_ctrl_bankmachine2_fifo_in_payload_addr, main_dram_ctrl_bankmachine2_fifo_in_payload_we};
assign {main_dram_ctrl_bankmachine2_fifo_out_last, main_dram_ctrl_bankmachine2_fifo_out_first, main_dram_ctrl_bankmachine2_fifo_out_payload_addr, main_dram_ctrl_bankmachine2_fifo_out_payload_we} = main_dram_ctrl_bankmachine2_simplesyncfifo2_dout;
assign {main_dram_ctrl_bankmachine2_fifo_out_last, main_dram_ctrl_bankmachine2_fifo_out_first, main_dram_ctrl_bankmachine2_fifo_out_payload_addr, main_dram_ctrl_bankmachine2_fifo_out_payload_we} = main_dram_ctrl_bankmachine2_simplesyncfifo2_dout;
assign {main_dram_ctrl_bankmachine2_fifo_out_last, main_dram_ctrl_bankmachine2_fifo_out_first, main_dram_ctrl_bankmachine2_fifo_out_payload_addr, main_dram_ctrl_bankmachine2_fifo_out_payload_we} = main_dram_ctrl_bankmachine2_simplesyncfifo2_dout;
assign {main_dram_ctrl_bankmachine2_fifo_out_last, main_dram_ctrl_bankmachine2_fifo_out_first, main_dram_ctrl_bankmachine2_fifo_out_payload_addr, main_dram_ctrl_bankmachine2_fifo_out_payload_we} = main_dram_ctrl_bankmachine2_simplesyncfifo2_dout;
assign main_dram_ctrl_bankmachine2_sink_ready = main_dram_ctrl_bankmachine2_simplesyncfifo2_writable;
assign main_dram_ctrl_bankmachine2_simplesyncfifo2_we = main_dram_ctrl_bankmachine2_sink_valid;
assign main_dram_ctrl_bankmachine2_fifo_in_first = main_dram_ctrl_bankmachine2_sink_first;
assign main_dram_ctrl_bankmachine2_fifo_in_last = main_dram_ctrl_bankmachine2_sink_last;
assign main_dram_ctrl_bankmachine2_fifo_in_payload_we = main_dram_ctrl_bankmachine2_sink_payload_we;
assign main_dram_ctrl_bankmachine2_fifo_in_payload_addr = main_dram_ctrl_bankmachine2_sink_payload_addr;
assign main_dram_ctrl_bankmachine2_source_valid = main_dram_ctrl_bankmachine2_simplesyncfifo2_readable;
assign main_dram_ctrl_bankmachine2_source_first = main_dram_ctrl_bankmachine2_fifo_out_first;
assign main_dram_ctrl_bankmachine2_source_last = main_dram_ctrl_bankmachine2_fifo_out_last;
assign main_dram_ctrl_bankmachine2_source_payload_we = main_dram_ctrl_bankmachine2_fifo_out_payload_we;
assign main_dram_ctrl_bankmachine2_source_payload_addr = main_dram_ctrl_bankmachine2_fifo_out_payload_addr;
assign main_dram_ctrl_bankmachine2_simplesyncfifo2_re = main_dram_ctrl_bankmachine2_source_ready;
assign main_dram_ctrl_bankmachine2_wrport_adr = main_dram_ctrl_bankmachine2_w_cnt;
assign main_dram_ctrl_bankmachine2_wrport_dat_w = main_dram_ctrl_bankmachine2_simplesyncfifo2_din;
assign main_dram_ctrl_bankmachine2_wrport_we = (main_dram_ctrl_bankmachine2_simplesyncfifo2_we & main_dram_ctrl_bankmachine2_simplesyncfifo2_writable);
assign main_dram_ctrl_bankmachine2_wrport_re = 1'd0;
assign main_dram_ctrl_bankmachine2_do_read = (main_dram_ctrl_bankmachine2_simplesyncfifo2_readable & main_dram_ctrl_bankmachine2_simplesyncfifo2_re);
assign main_dram_ctrl_bankmachine2_rdport_adr = main_dram_ctrl_bankmachine2_r_cnt;
assign main_dram_ctrl_bankmachine2_simplesyncfifo2_dout = main_dram_ctrl_bankmachine2_rdport_dat_r;
assign main_dram_ctrl_bankmachine2_half_way = (main_dram_ctrl_bankmachine2_w_cnt[3:0] == main_dram_ctrl_bankmachine2_r_cnt[3:0]);
assign main_dram_ctrl_bankmachine2_simplesyncfifo2_writable = (~(main_dram_ctrl_bankmachine2_half_way & (main_dram_ctrl_bankmachine2_w_cnt[4] != main_dram_ctrl_bankmachine2_r_cnt[4])));
assign main_dram_ctrl_bankmachine2_simplesyncfifo2_readable = (~(main_dram_ctrl_bankmachine2_half_way & (main_dram_ctrl_bankmachine2_w_cnt[4] == main_dram_ctrl_bankmachine2_r_cnt[4])));
assign main_dram_ctrl_bankmachine2_pipe_valid_sink_ready = ((~main_dram_ctrl_bankmachine2_pipe_valid_source_valid) | main_dram_ctrl_bankmachine2_pipe_valid_source_ready);
assign main_dram_ctrl_bankmachine2_pipe_valid_sink_valid = main_dram_ctrl_bankmachine2_sink_sink_valid;
assign main_dram_ctrl_bankmachine2_sink_sink_ready = main_dram_ctrl_bankmachine2_pipe_valid_sink_ready;
assign main_dram_ctrl_bankmachine2_pipe_valid_sink_first = main_dram_ctrl_bankmachine2_sink_sink_first;
assign main_dram_ctrl_bankmachine2_pipe_valid_sink_last = main_dram_ctrl_bankmachine2_sink_sink_last;
assign main_dram_ctrl_bankmachine2_pipe_valid_sink_payload_we = main_dram_ctrl_bankmachine2_sink_sink_payload_we;
assign main_dram_ctrl_bankmachine2_pipe_valid_sink_payload_addr = main_dram_ctrl_bankmachine2_sink_sink_payload_addr;
assign main_dram_ctrl_bankmachine2_source_source_valid = main_dram_ctrl_bankmachine2_pipe_valid_source_valid;
assign main_dram_ctrl_bankmachine2_pipe_valid_source_ready = main_dram_ctrl_bankmachine2_source_source_ready;
assign main_dram_ctrl_bankmachine2_source_source_first = main_dram_ctrl_bankmachine2_pipe_valid_source_first;
assign main_dram_ctrl_bankmachine2_source_source_last = main_dram_ctrl_bankmachine2_pipe_valid_source_last;
assign main_dram_ctrl_bankmachine2_source_source_payload_we = main_dram_ctrl_bankmachine2_pipe_valid_source_payload_we;
assign main_dram_ctrl_bankmachine2_source_source_payload_addr = main_dram_ctrl_bankmachine2_pipe_valid_source_payload_addr;
always @(*) begin
	builder_dramcoresoc_dramcore_bankmachine2_next_state = 3'd0;
    builder_dramcoresoc_dramcore_bankmachine2_next_state = builder_dramcoresoc_dramcore_bankmachine2_state;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine2_twtpcon_ready & main_dram_ctrl_bankmachine2_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine2_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine2_next_state = 2'd3;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine2_twtpcon_ready & main_dram_ctrl_bankmachine2_trascon_ready)) begin
                builder_dramcoresoc_dramcore_bankmachine2_next_state = 2'd3;
            end
        end
        2'd3: begin
            if (main_dram_ctrl_bankmachine2_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine2_next_state = 3'd4;
            end
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine2_trccon_ready) begin
                if (main_dram_ctrl_bankmachine2_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine2_next_state = 3'd5;
                end
            end
        end
        3'd5: begin
            if (main_dram_ctrl_bankmachine2_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine2_next_state = 1'd0;
            end
        end
        3'd6: begin
            if ((~main_dram_ctrl_bankmachine2_refresh_req)) begin
                builder_dramcoresoc_dramcore_bankmachine2_next_state = 1'd0;
            end
        end
        default: begin
            if (main_dram_ctrl_bankmachine2_refresh_req) begin
                builder_dramcoresoc_dramcore_bankmachine2_next_state = 3'd6;
            end else begin
                if (((main_dram_ctrl_bankmachine2_source_source_valid & main_dram_ctrl_bankmachine2_row_opened) & main_dram_ctrl_bankmachine2_row_hit)) begin
                    if ((main_dram_ctrl_bankmachine2_cmd_ready & main_dram_ctrl_bankmachine2_auto_precharge)) begin
                        builder_dramcoresoc_dramcore_bankmachine2_next_state = 2'd2;
                    end
                end else begin
                    if ((main_dram_ctrl_bankmachine2_source_source_valid & main_dram_ctrl_bankmachine2_row_opened)) begin
                        builder_dramcoresoc_dramcore_bankmachine2_next_state = 1'd1;
                    end else begin
                        if (main_dram_ctrl_bankmachine2_source_source_valid) begin
                            builder_dramcoresoc_dramcore_bankmachine2_next_state = 3'd4;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_req_rdata_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine2_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine2_source_source_valid & main_dram_ctrl_bankmachine2_row_opened) & main_dram_ctrl_bankmachine2_row_hit)) begin
                    if (main_dram_ctrl_bankmachine2_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine2_req_rdata_valid = main_dram_ctrl_bankmachine2_cmd_ready;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_pre_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine2_twtpcon_ready & main_dram_ctrl_bankmachine2_trascon_ready)) begin
                main_dram_ctrl_bankmachine2_pre_n_addr_sel = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_row_col_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine2_trccon_ready) begin
                main_dram_ctrl_bankmachine2_row_col_n_addr_sel = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_refresh_gnt = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            if (main_dram_ctrl_bankmachine2_twtpcon_ready) begin
                main_dram_ctrl_bankmachine2_refresh_gnt = 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_cmd_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine2_twtpcon_ready & main_dram_ctrl_bankmachine2_trascon_ready)) begin
                main_dram_ctrl_bankmachine2_cmd_valid = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine2_trccon_ready) begin
                main_dram_ctrl_bankmachine2_cmd_valid = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine2_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine2_source_source_valid & main_dram_ctrl_bankmachine2_row_opened) & main_dram_ctrl_bankmachine2_row_hit)) begin
                    main_dram_ctrl_bankmachine2_cmd_valid = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_timer_bankmachine2_next_value = 4'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine2_twtpcon_ready & main_dram_ctrl_bankmachine2_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine2_cmd_ready) begin
                    main_dram_ctrl_bankmachine2_timer_bankmachine2_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine2_twtpcon_ready & main_dram_ctrl_bankmachine2_trascon_ready)) begin
                main_dram_ctrl_bankmachine2_timer_bankmachine2_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine2_trccon_ready) begin
                if (main_dram_ctrl_bankmachine2_cmd_ready) begin
                    main_dram_ctrl_bankmachine2_timer_bankmachine2_next_value = (main_dram_ctrl_csrstorage1_storage - 1'd1);
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_timer_bankmachine2_next_value_ce = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine2_twtpcon_ready & main_dram_ctrl_bankmachine2_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine2_cmd_ready) begin
                    main_dram_ctrl_bankmachine2_timer_bankmachine2_next_value_ce = 1'd1;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine2_twtpcon_ready & main_dram_ctrl_bankmachine2_trascon_ready)) begin
                main_dram_ctrl_bankmachine2_timer_bankmachine2_next_value_ce = 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine2_trccon_ready) begin
                if (main_dram_ctrl_bankmachine2_cmd_ready) begin
                    main_dram_ctrl_bankmachine2_timer_bankmachine2_next_value_ce = 1'd1;
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_row_open = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine2_trccon_ready) begin
                main_dram_ctrl_bankmachine2_row_open = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_cmd_payload_cas = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine2_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine2_source_source_valid & main_dram_ctrl_bankmachine2_row_opened) & main_dram_ctrl_bankmachine2_row_hit)) begin
                    main_dram_ctrl_bankmachine2_cmd_payload_cas = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_row_close = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
            main_dram_ctrl_bankmachine2_row_close = 1'd1;
        end
        2'd2: begin
            main_dram_ctrl_bankmachine2_row_close = 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine2_row_close = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_cmd_payload_ras = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine2_twtpcon_ready & main_dram_ctrl_bankmachine2_trascon_ready)) begin
                main_dram_ctrl_bankmachine2_cmd_payload_ras = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine2_trccon_ready) begin
                main_dram_ctrl_bankmachine2_cmd_payload_ras = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_row_hit_reeval = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            main_dram_ctrl_bankmachine2_row_hit_reeval = 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_cmd_payload_we = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine2_twtpcon_ready & main_dram_ctrl_bankmachine2_trascon_ready)) begin
                main_dram_ctrl_bankmachine2_cmd_payload_we = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine2_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine2_source_source_valid & main_dram_ctrl_bankmachine2_row_opened) & main_dram_ctrl_bankmachine2_row_hit)) begin
                    if (main_dram_ctrl_bankmachine2_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine2_cmd_payload_we = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_cmd_payload_is_cmd = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine2_twtpcon_ready & main_dram_ctrl_bankmachine2_trascon_ready)) begin
                main_dram_ctrl_bankmachine2_cmd_payload_is_cmd = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine2_trccon_ready) begin
                main_dram_ctrl_bankmachine2_cmd_payload_is_cmd = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine2_cmd_payload_is_cmd = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_cmd_payload_is_read = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine2_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine2_source_source_valid & main_dram_ctrl_bankmachine2_row_opened) & main_dram_ctrl_bankmachine2_row_hit)) begin
                    if (main_dram_ctrl_bankmachine2_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine2_cmd_payload_is_read = 1'd1;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_cmd_payload_is_write = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine2_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine2_source_source_valid & main_dram_ctrl_bankmachine2_row_opened) & main_dram_ctrl_bankmachine2_row_hit)) begin
                    if (main_dram_ctrl_bankmachine2_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine2_cmd_payload_is_write = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine2_req_wdata_ready = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine2_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine2_source_source_valid & main_dram_ctrl_bankmachine2_row_opened) & main_dram_ctrl_bankmachine2_row_hit)) begin
                    if (main_dram_ctrl_bankmachine2_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine2_req_wdata_ready = main_dram_ctrl_bankmachine2_cmd_ready;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
assign main_dram_ctrl_bankmachine3_timer_done = (main_dram_ctrl_bankmachine3_timer == 1'd0);
assign main_dram_ctrl_bankmachine3_sink_valid = main_dram_ctrl_bankmachine3_req_valid;
assign main_dram_ctrl_bankmachine3_req_ready = main_dram_ctrl_bankmachine3_sink_ready;
assign main_dram_ctrl_bankmachine3_sink_payload_we = main_dram_ctrl_bankmachine3_req_we;
assign main_dram_ctrl_bankmachine3_sink_payload_addr = main_dram_ctrl_bankmachine3_req_addr;
assign main_dram_ctrl_bankmachine3_sink_sink_valid = main_dram_ctrl_bankmachine3_source_valid;
assign main_dram_ctrl_bankmachine3_source_ready = main_dram_ctrl_bankmachine3_sink_sink_ready;
assign main_dram_ctrl_bankmachine3_sink_sink_first = main_dram_ctrl_bankmachine3_source_first;
assign main_dram_ctrl_bankmachine3_sink_sink_last = main_dram_ctrl_bankmachine3_source_last;
assign main_dram_ctrl_bankmachine3_sink_sink_payload_we = main_dram_ctrl_bankmachine3_source_payload_we;
assign main_dram_ctrl_bankmachine3_sink_sink_payload_addr = main_dram_ctrl_bankmachine3_source_payload_addr;
assign main_dram_ctrl_bankmachine3_source_source_ready = (main_dram_ctrl_bankmachine3_req_wdata_ready | main_dram_ctrl_bankmachine3_req_rdata_valid);
assign main_dram_ctrl_bankmachine3_req_lock = (main_dram_ctrl_bankmachine3_source_valid | main_dram_ctrl_bankmachine3_source_source_valid);
assign main_dram_ctrl_bankmachine3_pre_sig = (main_dram_ctrl_bankmachine3_auto_precharge <<< 4'd10);
assign main_dram_ctrl_bankmachine3_cmd_payload_ba = 2'd3;
always @(*) begin
	main_dram_ctrl_bankmachine3_cmd_payload_a = 15'd0;
    if (main_dram_ctrl_bankmachine3_row_col_n_addr_sel) begin
        main_dram_ctrl_bankmachine3_cmd_payload_a = main_dram_ctrl_bankmachine3_source_source_payload_addr[20:6];
    end else begin
        if (main_dram_ctrl_bankmachine3_pre_n_addr_sel) begin
            main_dram_ctrl_bankmachine3_cmd_payload_a = 1'd0;
        end else begin
            main_dram_ctrl_bankmachine3_cmd_payload_a = (main_dram_ctrl_bankmachine3_pre_sig | {main_dram_ctrl_bankmachine3_source_source_payload_addr[5:0], {4{1'd0}}});
        end
    end
end
assign main_dram_ctrl_bankmachine3_twtpcon_valid = ((main_dram_ctrl_bankmachine3_cmd_valid & main_dram_ctrl_bankmachine3_cmd_ready) & main_dram_ctrl_bankmachine3_cmd_payload_is_write);
assign main_dram_ctrl_bankmachine3_trccon_valid = ((main_dram_ctrl_bankmachine3_cmd_valid & main_dram_ctrl_bankmachine3_cmd_ready) & main_dram_ctrl_bankmachine3_row_open);
assign main_dram_ctrl_bankmachine3_trascon_valid = ((main_dram_ctrl_bankmachine3_cmd_valid & main_dram_ctrl_bankmachine3_cmd_ready) & main_dram_ctrl_bankmachine3_row_open);
always @(*) begin
	main_dram_ctrl_bankmachine3_auto_precharge = 1'd0;
    if ((main_dram_ctrl_bankmachine3_source_valid & main_dram_ctrl_bankmachine3_source_source_valid)) begin
        if ((main_dram_ctrl_bankmachine3_source_payload_addr[20:6] != main_dram_ctrl_bankmachine3_source_source_payload_addr[20:6])) begin
            main_dram_ctrl_bankmachine3_auto_precharge = (main_dram_ctrl_bankmachine3_row_close == 1'd0);
        end
    end
end
assign main_dram_ctrl_bankmachine3_simplesyncfifo3_din = {main_dram_ctrl_bankmachine3_fifo_in_last, main_dram_ctrl_bankmachine3_fifo_in_first, main_dram_ctrl_bankmachine3_fifo_in_payload_addr, main_dram_ctrl_bankmachine3_fifo_in_payload_we};
assign {main_dram_ctrl_bankmachine3_fifo_out_last, main_dram_ctrl_bankmachine3_fifo_out_first, main_dram_ctrl_bankmachine3_fifo_out_payload_addr, main_dram_ctrl_bankmachine3_fifo_out_payload_we} = main_dram_ctrl_bankmachine3_simplesyncfifo3_dout;
assign {main_dram_ctrl_bankmachine3_fifo_out_last, main_dram_ctrl_bankmachine3_fifo_out_first, main_dram_ctrl_bankmachine3_fifo_out_payload_addr, main_dram_ctrl_bankmachine3_fifo_out_payload_we} = main_dram_ctrl_bankmachine3_simplesyncfifo3_dout;
assign {main_dram_ctrl_bankmachine3_fifo_out_last, main_dram_ctrl_bankmachine3_fifo_out_first, main_dram_ctrl_bankmachine3_fifo_out_payload_addr, main_dram_ctrl_bankmachine3_fifo_out_payload_we} = main_dram_ctrl_bankmachine3_simplesyncfifo3_dout;
assign {main_dram_ctrl_bankmachine3_fifo_out_last, main_dram_ctrl_bankmachine3_fifo_out_first, main_dram_ctrl_bankmachine3_fifo_out_payload_addr, main_dram_ctrl_bankmachine3_fifo_out_payload_we} = main_dram_ctrl_bankmachine3_simplesyncfifo3_dout;
assign main_dram_ctrl_bankmachine3_sink_ready = main_dram_ctrl_bankmachine3_simplesyncfifo3_writable;
assign main_dram_ctrl_bankmachine3_simplesyncfifo3_we = main_dram_ctrl_bankmachine3_sink_valid;
assign main_dram_ctrl_bankmachine3_fifo_in_first = main_dram_ctrl_bankmachine3_sink_first;
assign main_dram_ctrl_bankmachine3_fifo_in_last = main_dram_ctrl_bankmachine3_sink_last;
assign main_dram_ctrl_bankmachine3_fifo_in_payload_we = main_dram_ctrl_bankmachine3_sink_payload_we;
assign main_dram_ctrl_bankmachine3_fifo_in_payload_addr = main_dram_ctrl_bankmachine3_sink_payload_addr;
assign main_dram_ctrl_bankmachine3_source_valid = main_dram_ctrl_bankmachine3_simplesyncfifo3_readable;
assign main_dram_ctrl_bankmachine3_source_first = main_dram_ctrl_bankmachine3_fifo_out_first;
assign main_dram_ctrl_bankmachine3_source_last = main_dram_ctrl_bankmachine3_fifo_out_last;
assign main_dram_ctrl_bankmachine3_source_payload_we = main_dram_ctrl_bankmachine3_fifo_out_payload_we;
assign main_dram_ctrl_bankmachine3_source_payload_addr = main_dram_ctrl_bankmachine3_fifo_out_payload_addr;
assign main_dram_ctrl_bankmachine3_simplesyncfifo3_re = main_dram_ctrl_bankmachine3_source_ready;
assign main_dram_ctrl_bankmachine3_wrport_adr = main_dram_ctrl_bankmachine3_w_cnt;
assign main_dram_ctrl_bankmachine3_wrport_dat_w = main_dram_ctrl_bankmachine3_simplesyncfifo3_din;
assign main_dram_ctrl_bankmachine3_wrport_we = (main_dram_ctrl_bankmachine3_simplesyncfifo3_we & main_dram_ctrl_bankmachine3_simplesyncfifo3_writable);
assign main_dram_ctrl_bankmachine3_wrport_re = 1'd0;
assign main_dram_ctrl_bankmachine3_do_read = (main_dram_ctrl_bankmachine3_simplesyncfifo3_readable & main_dram_ctrl_bankmachine3_simplesyncfifo3_re);
assign main_dram_ctrl_bankmachine3_rdport_adr = main_dram_ctrl_bankmachine3_r_cnt;
assign main_dram_ctrl_bankmachine3_simplesyncfifo3_dout = main_dram_ctrl_bankmachine3_rdport_dat_r;
assign main_dram_ctrl_bankmachine3_half_way = (main_dram_ctrl_bankmachine3_w_cnt[3:0] == main_dram_ctrl_bankmachine3_r_cnt[3:0]);
assign main_dram_ctrl_bankmachine3_simplesyncfifo3_writable = (~(main_dram_ctrl_bankmachine3_half_way & (main_dram_ctrl_bankmachine3_w_cnt[4] != main_dram_ctrl_bankmachine3_r_cnt[4])));
assign main_dram_ctrl_bankmachine3_simplesyncfifo3_readable = (~(main_dram_ctrl_bankmachine3_half_way & (main_dram_ctrl_bankmachine3_w_cnt[4] == main_dram_ctrl_bankmachine3_r_cnt[4])));
assign main_dram_ctrl_bankmachine3_pipe_valid_sink_ready = ((~main_dram_ctrl_bankmachine3_pipe_valid_source_valid) | main_dram_ctrl_bankmachine3_pipe_valid_source_ready);
assign main_dram_ctrl_bankmachine3_pipe_valid_sink_valid = main_dram_ctrl_bankmachine3_sink_sink_valid;
assign main_dram_ctrl_bankmachine3_sink_sink_ready = main_dram_ctrl_bankmachine3_pipe_valid_sink_ready;
assign main_dram_ctrl_bankmachine3_pipe_valid_sink_first = main_dram_ctrl_bankmachine3_sink_sink_first;
assign main_dram_ctrl_bankmachine3_pipe_valid_sink_last = main_dram_ctrl_bankmachine3_sink_sink_last;
assign main_dram_ctrl_bankmachine3_pipe_valid_sink_payload_we = main_dram_ctrl_bankmachine3_sink_sink_payload_we;
assign main_dram_ctrl_bankmachine3_pipe_valid_sink_payload_addr = main_dram_ctrl_bankmachine3_sink_sink_payload_addr;
assign main_dram_ctrl_bankmachine3_source_source_valid = main_dram_ctrl_bankmachine3_pipe_valid_source_valid;
assign main_dram_ctrl_bankmachine3_pipe_valid_source_ready = main_dram_ctrl_bankmachine3_source_source_ready;
assign main_dram_ctrl_bankmachine3_source_source_first = main_dram_ctrl_bankmachine3_pipe_valid_source_first;
assign main_dram_ctrl_bankmachine3_source_source_last = main_dram_ctrl_bankmachine3_pipe_valid_source_last;
assign main_dram_ctrl_bankmachine3_source_source_payload_we = main_dram_ctrl_bankmachine3_pipe_valid_source_payload_we;
assign main_dram_ctrl_bankmachine3_source_source_payload_addr = main_dram_ctrl_bankmachine3_pipe_valid_source_payload_addr;
always @(*) begin
	builder_dramcoresoc_dramcore_bankmachine3_next_state = 3'd0;
    builder_dramcoresoc_dramcore_bankmachine3_next_state = builder_dramcoresoc_dramcore_bankmachine3_state;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine3_twtpcon_ready & main_dram_ctrl_bankmachine3_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine3_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine3_next_state = 2'd3;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine3_twtpcon_ready & main_dram_ctrl_bankmachine3_trascon_ready)) begin
                builder_dramcoresoc_dramcore_bankmachine3_next_state = 2'd3;
            end
        end
        2'd3: begin
            if (main_dram_ctrl_bankmachine3_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine3_next_state = 3'd4;
            end
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine3_trccon_ready) begin
                if (main_dram_ctrl_bankmachine3_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine3_next_state = 3'd5;
                end
            end
        end
        3'd5: begin
            if (main_dram_ctrl_bankmachine3_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine3_next_state = 1'd0;
            end
        end
        3'd6: begin
            if ((~main_dram_ctrl_bankmachine3_refresh_req)) begin
                builder_dramcoresoc_dramcore_bankmachine3_next_state = 1'd0;
            end
        end
        default: begin
            if (main_dram_ctrl_bankmachine3_refresh_req) begin
                builder_dramcoresoc_dramcore_bankmachine3_next_state = 3'd6;
            end else begin
                if (((main_dram_ctrl_bankmachine3_source_source_valid & main_dram_ctrl_bankmachine3_row_opened) & main_dram_ctrl_bankmachine3_row_hit)) begin
                    if ((main_dram_ctrl_bankmachine3_cmd_ready & main_dram_ctrl_bankmachine3_auto_precharge)) begin
                        builder_dramcoresoc_dramcore_bankmachine3_next_state = 2'd2;
                    end
                end else begin
                    if ((main_dram_ctrl_bankmachine3_source_source_valid & main_dram_ctrl_bankmachine3_row_opened)) begin
                        builder_dramcoresoc_dramcore_bankmachine3_next_state = 1'd1;
                    end else begin
                        if (main_dram_ctrl_bankmachine3_source_source_valid) begin
                            builder_dramcoresoc_dramcore_bankmachine3_next_state = 3'd4;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_cmd_payload_we = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine3_twtpcon_ready & main_dram_ctrl_bankmachine3_trascon_ready)) begin
                main_dram_ctrl_bankmachine3_cmd_payload_we = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine3_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine3_source_source_valid & main_dram_ctrl_bankmachine3_row_opened) & main_dram_ctrl_bankmachine3_row_hit)) begin
                    if (main_dram_ctrl_bankmachine3_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine3_cmd_payload_we = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_cmd_payload_is_cmd = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine3_twtpcon_ready & main_dram_ctrl_bankmachine3_trascon_ready)) begin
                main_dram_ctrl_bankmachine3_cmd_payload_is_cmd = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine3_trccon_ready) begin
                main_dram_ctrl_bankmachine3_cmd_payload_is_cmd = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine3_cmd_payload_is_cmd = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_cmd_payload_is_read = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine3_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine3_source_source_valid & main_dram_ctrl_bankmachine3_row_opened) & main_dram_ctrl_bankmachine3_row_hit)) begin
                    if (main_dram_ctrl_bankmachine3_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine3_cmd_payload_is_read = 1'd1;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_cmd_payload_is_write = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine3_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine3_source_source_valid & main_dram_ctrl_bankmachine3_row_opened) & main_dram_ctrl_bankmachine3_row_hit)) begin
                    if (main_dram_ctrl_bankmachine3_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine3_cmd_payload_is_write = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_req_wdata_ready = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine3_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine3_source_source_valid & main_dram_ctrl_bankmachine3_row_opened) & main_dram_ctrl_bankmachine3_row_hit)) begin
                    if (main_dram_ctrl_bankmachine3_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine3_req_wdata_ready = main_dram_ctrl_bankmachine3_cmd_ready;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_row_col_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine3_trccon_ready) begin
                main_dram_ctrl_bankmachine3_row_col_n_addr_sel = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_req_rdata_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine3_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine3_source_source_valid & main_dram_ctrl_bankmachine3_row_opened) & main_dram_ctrl_bankmachine3_row_hit)) begin
                    if (main_dram_ctrl_bankmachine3_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine3_req_rdata_valid = main_dram_ctrl_bankmachine3_cmd_ready;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_pre_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine3_twtpcon_ready & main_dram_ctrl_bankmachine3_trascon_ready)) begin
                main_dram_ctrl_bankmachine3_pre_n_addr_sel = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_refresh_gnt = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            if (main_dram_ctrl_bankmachine3_twtpcon_ready) begin
                main_dram_ctrl_bankmachine3_refresh_gnt = 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_cmd_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine3_twtpcon_ready & main_dram_ctrl_bankmachine3_trascon_ready)) begin
                main_dram_ctrl_bankmachine3_cmd_valid = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine3_trccon_ready) begin
                main_dram_ctrl_bankmachine3_cmd_valid = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine3_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine3_source_source_valid & main_dram_ctrl_bankmachine3_row_opened) & main_dram_ctrl_bankmachine3_row_hit)) begin
                    main_dram_ctrl_bankmachine3_cmd_valid = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_timer_bankmachine3_next_value = 4'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine3_twtpcon_ready & main_dram_ctrl_bankmachine3_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine3_cmd_ready) begin
                    main_dram_ctrl_bankmachine3_timer_bankmachine3_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine3_twtpcon_ready & main_dram_ctrl_bankmachine3_trascon_ready)) begin
                main_dram_ctrl_bankmachine3_timer_bankmachine3_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine3_trccon_ready) begin
                if (main_dram_ctrl_bankmachine3_cmd_ready) begin
                    main_dram_ctrl_bankmachine3_timer_bankmachine3_next_value = (main_dram_ctrl_csrstorage1_storage - 1'd1);
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_timer_bankmachine3_next_value_ce = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine3_twtpcon_ready & main_dram_ctrl_bankmachine3_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine3_cmd_ready) begin
                    main_dram_ctrl_bankmachine3_timer_bankmachine3_next_value_ce = 1'd1;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine3_twtpcon_ready & main_dram_ctrl_bankmachine3_trascon_ready)) begin
                main_dram_ctrl_bankmachine3_timer_bankmachine3_next_value_ce = 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine3_trccon_ready) begin
                if (main_dram_ctrl_bankmachine3_cmd_ready) begin
                    main_dram_ctrl_bankmachine3_timer_bankmachine3_next_value_ce = 1'd1;
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_row_open = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine3_trccon_ready) begin
                main_dram_ctrl_bankmachine3_row_open = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_cmd_payload_cas = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine3_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine3_source_source_valid & main_dram_ctrl_bankmachine3_row_opened) & main_dram_ctrl_bankmachine3_row_hit)) begin
                    main_dram_ctrl_bankmachine3_cmd_payload_cas = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_row_close = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
            main_dram_ctrl_bankmachine3_row_close = 1'd1;
        end
        2'd2: begin
            main_dram_ctrl_bankmachine3_row_close = 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine3_row_close = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_cmd_payload_ras = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine3_twtpcon_ready & main_dram_ctrl_bankmachine3_trascon_ready)) begin
                main_dram_ctrl_bankmachine3_cmd_payload_ras = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine3_trccon_ready) begin
                main_dram_ctrl_bankmachine3_cmd_payload_ras = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine3_row_hit_reeval = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            main_dram_ctrl_bankmachine3_row_hit_reeval = 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
assign main_dram_ctrl_bankmachine4_timer_done = (main_dram_ctrl_bankmachine4_timer == 1'd0);
assign main_dram_ctrl_bankmachine4_sink_valid = main_dram_ctrl_bankmachine4_req_valid;
assign main_dram_ctrl_bankmachine4_req_ready = main_dram_ctrl_bankmachine4_sink_ready;
assign main_dram_ctrl_bankmachine4_sink_payload_we = main_dram_ctrl_bankmachine4_req_we;
assign main_dram_ctrl_bankmachine4_sink_payload_addr = main_dram_ctrl_bankmachine4_req_addr;
assign main_dram_ctrl_bankmachine4_sink_sink_valid = main_dram_ctrl_bankmachine4_source_valid;
assign main_dram_ctrl_bankmachine4_source_ready = main_dram_ctrl_bankmachine4_sink_sink_ready;
assign main_dram_ctrl_bankmachine4_sink_sink_first = main_dram_ctrl_bankmachine4_source_first;
assign main_dram_ctrl_bankmachine4_sink_sink_last = main_dram_ctrl_bankmachine4_source_last;
assign main_dram_ctrl_bankmachine4_sink_sink_payload_we = main_dram_ctrl_bankmachine4_source_payload_we;
assign main_dram_ctrl_bankmachine4_sink_sink_payload_addr = main_dram_ctrl_bankmachine4_source_payload_addr;
assign main_dram_ctrl_bankmachine4_source_source_ready = (main_dram_ctrl_bankmachine4_req_wdata_ready | main_dram_ctrl_bankmachine4_req_rdata_valid);
assign main_dram_ctrl_bankmachine4_req_lock = (main_dram_ctrl_bankmachine4_source_valid | main_dram_ctrl_bankmachine4_source_source_valid);
assign main_dram_ctrl_bankmachine4_pre_sig = (main_dram_ctrl_bankmachine4_auto_precharge <<< 4'd10);
assign main_dram_ctrl_bankmachine4_cmd_payload_ba = 3'd4;
always @(*) begin
	main_dram_ctrl_bankmachine4_cmd_payload_a = 15'd0;
    if (main_dram_ctrl_bankmachine4_row_col_n_addr_sel) begin
        main_dram_ctrl_bankmachine4_cmd_payload_a = main_dram_ctrl_bankmachine4_source_source_payload_addr[20:6];
    end else begin
        if (main_dram_ctrl_bankmachine4_pre_n_addr_sel) begin
            main_dram_ctrl_bankmachine4_cmd_payload_a = 1'd0;
        end else begin
            main_dram_ctrl_bankmachine4_cmd_payload_a = (main_dram_ctrl_bankmachine4_pre_sig | {main_dram_ctrl_bankmachine4_source_source_payload_addr[5:0], {4{1'd0}}});
        end
    end
end
assign main_dram_ctrl_bankmachine4_twtpcon_valid = ((main_dram_ctrl_bankmachine4_cmd_valid & main_dram_ctrl_bankmachine4_cmd_ready) & main_dram_ctrl_bankmachine4_cmd_payload_is_write);
assign main_dram_ctrl_bankmachine4_trccon_valid = ((main_dram_ctrl_bankmachine4_cmd_valid & main_dram_ctrl_bankmachine4_cmd_ready) & main_dram_ctrl_bankmachine4_row_open);
assign main_dram_ctrl_bankmachine4_trascon_valid = ((main_dram_ctrl_bankmachine4_cmd_valid & main_dram_ctrl_bankmachine4_cmd_ready) & main_dram_ctrl_bankmachine4_row_open);
always @(*) begin
	main_dram_ctrl_bankmachine4_auto_precharge = 1'd0;
    if ((main_dram_ctrl_bankmachine4_source_valid & main_dram_ctrl_bankmachine4_source_source_valid)) begin
        if ((main_dram_ctrl_bankmachine4_source_payload_addr[20:6] != main_dram_ctrl_bankmachine4_source_source_payload_addr[20:6])) begin
            main_dram_ctrl_bankmachine4_auto_precharge = (main_dram_ctrl_bankmachine4_row_close == 1'd0);
        end
    end
end
assign main_dram_ctrl_bankmachine4_simplesyncfifo4_din = {main_dram_ctrl_bankmachine4_fifo_in_last, main_dram_ctrl_bankmachine4_fifo_in_first, main_dram_ctrl_bankmachine4_fifo_in_payload_addr, main_dram_ctrl_bankmachine4_fifo_in_payload_we};
assign {main_dram_ctrl_bankmachine4_fifo_out_last, main_dram_ctrl_bankmachine4_fifo_out_first, main_dram_ctrl_bankmachine4_fifo_out_payload_addr, main_dram_ctrl_bankmachine4_fifo_out_payload_we} = main_dram_ctrl_bankmachine4_simplesyncfifo4_dout;
assign {main_dram_ctrl_bankmachine4_fifo_out_last, main_dram_ctrl_bankmachine4_fifo_out_first, main_dram_ctrl_bankmachine4_fifo_out_payload_addr, main_dram_ctrl_bankmachine4_fifo_out_payload_we} = main_dram_ctrl_bankmachine4_simplesyncfifo4_dout;
assign {main_dram_ctrl_bankmachine4_fifo_out_last, main_dram_ctrl_bankmachine4_fifo_out_first, main_dram_ctrl_bankmachine4_fifo_out_payload_addr, main_dram_ctrl_bankmachine4_fifo_out_payload_we} = main_dram_ctrl_bankmachine4_simplesyncfifo4_dout;
assign {main_dram_ctrl_bankmachine4_fifo_out_last, main_dram_ctrl_bankmachine4_fifo_out_first, main_dram_ctrl_bankmachine4_fifo_out_payload_addr, main_dram_ctrl_bankmachine4_fifo_out_payload_we} = main_dram_ctrl_bankmachine4_simplesyncfifo4_dout;
assign main_dram_ctrl_bankmachine4_sink_ready = main_dram_ctrl_bankmachine4_simplesyncfifo4_writable;
assign main_dram_ctrl_bankmachine4_simplesyncfifo4_we = main_dram_ctrl_bankmachine4_sink_valid;
assign main_dram_ctrl_bankmachine4_fifo_in_first = main_dram_ctrl_bankmachine4_sink_first;
assign main_dram_ctrl_bankmachine4_fifo_in_last = main_dram_ctrl_bankmachine4_sink_last;
assign main_dram_ctrl_bankmachine4_fifo_in_payload_we = main_dram_ctrl_bankmachine4_sink_payload_we;
assign main_dram_ctrl_bankmachine4_fifo_in_payload_addr = main_dram_ctrl_bankmachine4_sink_payload_addr;
assign main_dram_ctrl_bankmachine4_source_valid = main_dram_ctrl_bankmachine4_simplesyncfifo4_readable;
assign main_dram_ctrl_bankmachine4_source_first = main_dram_ctrl_bankmachine4_fifo_out_first;
assign main_dram_ctrl_bankmachine4_source_last = main_dram_ctrl_bankmachine4_fifo_out_last;
assign main_dram_ctrl_bankmachine4_source_payload_we = main_dram_ctrl_bankmachine4_fifo_out_payload_we;
assign main_dram_ctrl_bankmachine4_source_payload_addr = main_dram_ctrl_bankmachine4_fifo_out_payload_addr;
assign main_dram_ctrl_bankmachine4_simplesyncfifo4_re = main_dram_ctrl_bankmachine4_source_ready;
assign main_dram_ctrl_bankmachine4_wrport_adr = main_dram_ctrl_bankmachine4_w_cnt;
assign main_dram_ctrl_bankmachine4_wrport_dat_w = main_dram_ctrl_bankmachine4_simplesyncfifo4_din;
assign main_dram_ctrl_bankmachine4_wrport_we = (main_dram_ctrl_bankmachine4_simplesyncfifo4_we & main_dram_ctrl_bankmachine4_simplesyncfifo4_writable);
assign main_dram_ctrl_bankmachine4_wrport_re = 1'd0;
assign main_dram_ctrl_bankmachine4_do_read = (main_dram_ctrl_bankmachine4_simplesyncfifo4_readable & main_dram_ctrl_bankmachine4_simplesyncfifo4_re);
assign main_dram_ctrl_bankmachine4_rdport_adr = main_dram_ctrl_bankmachine4_r_cnt;
assign main_dram_ctrl_bankmachine4_simplesyncfifo4_dout = main_dram_ctrl_bankmachine4_rdport_dat_r;
assign main_dram_ctrl_bankmachine4_half_way = (main_dram_ctrl_bankmachine4_w_cnt[3:0] == main_dram_ctrl_bankmachine4_r_cnt[3:0]);
assign main_dram_ctrl_bankmachine4_simplesyncfifo4_writable = (~(main_dram_ctrl_bankmachine4_half_way & (main_dram_ctrl_bankmachine4_w_cnt[4] != main_dram_ctrl_bankmachine4_r_cnt[4])));
assign main_dram_ctrl_bankmachine4_simplesyncfifo4_readable = (~(main_dram_ctrl_bankmachine4_half_way & (main_dram_ctrl_bankmachine4_w_cnt[4] == main_dram_ctrl_bankmachine4_r_cnt[4])));
assign main_dram_ctrl_bankmachine4_pipe_valid_sink_ready = ((~main_dram_ctrl_bankmachine4_pipe_valid_source_valid) | main_dram_ctrl_bankmachine4_pipe_valid_source_ready);
assign main_dram_ctrl_bankmachine4_pipe_valid_sink_valid = main_dram_ctrl_bankmachine4_sink_sink_valid;
assign main_dram_ctrl_bankmachine4_sink_sink_ready = main_dram_ctrl_bankmachine4_pipe_valid_sink_ready;
assign main_dram_ctrl_bankmachine4_pipe_valid_sink_first = main_dram_ctrl_bankmachine4_sink_sink_first;
assign main_dram_ctrl_bankmachine4_pipe_valid_sink_last = main_dram_ctrl_bankmachine4_sink_sink_last;
assign main_dram_ctrl_bankmachine4_pipe_valid_sink_payload_we = main_dram_ctrl_bankmachine4_sink_sink_payload_we;
assign main_dram_ctrl_bankmachine4_pipe_valid_sink_payload_addr = main_dram_ctrl_bankmachine4_sink_sink_payload_addr;
assign main_dram_ctrl_bankmachine4_source_source_valid = main_dram_ctrl_bankmachine4_pipe_valid_source_valid;
assign main_dram_ctrl_bankmachine4_pipe_valid_source_ready = main_dram_ctrl_bankmachine4_source_source_ready;
assign main_dram_ctrl_bankmachine4_source_source_first = main_dram_ctrl_bankmachine4_pipe_valid_source_first;
assign main_dram_ctrl_bankmachine4_source_source_last = main_dram_ctrl_bankmachine4_pipe_valid_source_last;
assign main_dram_ctrl_bankmachine4_source_source_payload_we = main_dram_ctrl_bankmachine4_pipe_valid_source_payload_we;
assign main_dram_ctrl_bankmachine4_source_source_payload_addr = main_dram_ctrl_bankmachine4_pipe_valid_source_payload_addr;
always @(*) begin
	builder_dramcoresoc_dramcore_bankmachine4_next_state = 3'd0;
    builder_dramcoresoc_dramcore_bankmachine4_next_state = builder_dramcoresoc_dramcore_bankmachine4_state;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine4_twtpcon_ready & main_dram_ctrl_bankmachine4_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine4_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine4_next_state = 2'd3;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine4_twtpcon_ready & main_dram_ctrl_bankmachine4_trascon_ready)) begin
                builder_dramcoresoc_dramcore_bankmachine4_next_state = 2'd3;
            end
        end
        2'd3: begin
            if (main_dram_ctrl_bankmachine4_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine4_next_state = 3'd4;
            end
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine4_trccon_ready) begin
                if (main_dram_ctrl_bankmachine4_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine4_next_state = 3'd5;
                end
            end
        end
        3'd5: begin
            if (main_dram_ctrl_bankmachine4_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine4_next_state = 1'd0;
            end
        end
        3'd6: begin
            if ((~main_dram_ctrl_bankmachine4_refresh_req)) begin
                builder_dramcoresoc_dramcore_bankmachine4_next_state = 1'd0;
            end
        end
        default: begin
            if (main_dram_ctrl_bankmachine4_refresh_req) begin
                builder_dramcoresoc_dramcore_bankmachine4_next_state = 3'd6;
            end else begin
                if (((main_dram_ctrl_bankmachine4_source_source_valid & main_dram_ctrl_bankmachine4_row_opened) & main_dram_ctrl_bankmachine4_row_hit)) begin
                    if ((main_dram_ctrl_bankmachine4_cmd_ready & main_dram_ctrl_bankmachine4_auto_precharge)) begin
                        builder_dramcoresoc_dramcore_bankmachine4_next_state = 2'd2;
                    end
                end else begin
                    if ((main_dram_ctrl_bankmachine4_source_source_valid & main_dram_ctrl_bankmachine4_row_opened)) begin
                        builder_dramcoresoc_dramcore_bankmachine4_next_state = 1'd1;
                    end else begin
                        if (main_dram_ctrl_bankmachine4_source_source_valid) begin
                            builder_dramcoresoc_dramcore_bankmachine4_next_state = 3'd4;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_row_open = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine4_trccon_ready) begin
                main_dram_ctrl_bankmachine4_row_open = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_cmd_payload_cas = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine4_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine4_source_source_valid & main_dram_ctrl_bankmachine4_row_opened) & main_dram_ctrl_bankmachine4_row_hit)) begin
                    main_dram_ctrl_bankmachine4_cmd_payload_cas = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_row_close = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
            main_dram_ctrl_bankmachine4_row_close = 1'd1;
        end
        2'd2: begin
            main_dram_ctrl_bankmachine4_row_close = 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine4_row_close = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_cmd_payload_ras = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine4_twtpcon_ready & main_dram_ctrl_bankmachine4_trascon_ready)) begin
                main_dram_ctrl_bankmachine4_cmd_payload_ras = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine4_trccon_ready) begin
                main_dram_ctrl_bankmachine4_cmd_payload_ras = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_row_hit_reeval = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            main_dram_ctrl_bankmachine4_row_hit_reeval = 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_cmd_payload_we = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine4_twtpcon_ready & main_dram_ctrl_bankmachine4_trascon_ready)) begin
                main_dram_ctrl_bankmachine4_cmd_payload_we = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine4_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine4_source_source_valid & main_dram_ctrl_bankmachine4_row_opened) & main_dram_ctrl_bankmachine4_row_hit)) begin
                    if (main_dram_ctrl_bankmachine4_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine4_cmd_payload_we = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_cmd_payload_is_cmd = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine4_twtpcon_ready & main_dram_ctrl_bankmachine4_trascon_ready)) begin
                main_dram_ctrl_bankmachine4_cmd_payload_is_cmd = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine4_trccon_ready) begin
                main_dram_ctrl_bankmachine4_cmd_payload_is_cmd = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine4_cmd_payload_is_cmd = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_cmd_payload_is_read = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine4_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine4_source_source_valid & main_dram_ctrl_bankmachine4_row_opened) & main_dram_ctrl_bankmachine4_row_hit)) begin
                    if (main_dram_ctrl_bankmachine4_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine4_cmd_payload_is_read = 1'd1;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_cmd_payload_is_write = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine4_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine4_source_source_valid & main_dram_ctrl_bankmachine4_row_opened) & main_dram_ctrl_bankmachine4_row_hit)) begin
                    if (main_dram_ctrl_bankmachine4_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine4_cmd_payload_is_write = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_req_wdata_ready = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine4_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine4_source_source_valid & main_dram_ctrl_bankmachine4_row_opened) & main_dram_ctrl_bankmachine4_row_hit)) begin
                    if (main_dram_ctrl_bankmachine4_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine4_req_wdata_ready = main_dram_ctrl_bankmachine4_cmd_ready;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_row_col_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine4_trccon_ready) begin
                main_dram_ctrl_bankmachine4_row_col_n_addr_sel = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_req_rdata_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine4_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine4_source_source_valid & main_dram_ctrl_bankmachine4_row_opened) & main_dram_ctrl_bankmachine4_row_hit)) begin
                    if (main_dram_ctrl_bankmachine4_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine4_req_rdata_valid = main_dram_ctrl_bankmachine4_cmd_ready;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_pre_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine4_twtpcon_ready & main_dram_ctrl_bankmachine4_trascon_ready)) begin
                main_dram_ctrl_bankmachine4_pre_n_addr_sel = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_refresh_gnt = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            if (main_dram_ctrl_bankmachine4_twtpcon_ready) begin
                main_dram_ctrl_bankmachine4_refresh_gnt = 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_timer_bankmachine4_next_value = 4'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine4_twtpcon_ready & main_dram_ctrl_bankmachine4_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine4_cmd_ready) begin
                    main_dram_ctrl_bankmachine4_timer_bankmachine4_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine4_twtpcon_ready & main_dram_ctrl_bankmachine4_trascon_ready)) begin
                main_dram_ctrl_bankmachine4_timer_bankmachine4_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine4_trccon_ready) begin
                if (main_dram_ctrl_bankmachine4_cmd_ready) begin
                    main_dram_ctrl_bankmachine4_timer_bankmachine4_next_value = (main_dram_ctrl_csrstorage1_storage - 1'd1);
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_cmd_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine4_twtpcon_ready & main_dram_ctrl_bankmachine4_trascon_ready)) begin
                main_dram_ctrl_bankmachine4_cmd_valid = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine4_trccon_ready) begin
                main_dram_ctrl_bankmachine4_cmd_valid = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine4_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine4_source_source_valid & main_dram_ctrl_bankmachine4_row_opened) & main_dram_ctrl_bankmachine4_row_hit)) begin
                    main_dram_ctrl_bankmachine4_cmd_valid = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine4_timer_bankmachine4_next_value_ce = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine4_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine4_twtpcon_ready & main_dram_ctrl_bankmachine4_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine4_cmd_ready) begin
                    main_dram_ctrl_bankmachine4_timer_bankmachine4_next_value_ce = 1'd1;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine4_twtpcon_ready & main_dram_ctrl_bankmachine4_trascon_ready)) begin
                main_dram_ctrl_bankmachine4_timer_bankmachine4_next_value_ce = 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine4_trccon_ready) begin
                if (main_dram_ctrl_bankmachine4_cmd_ready) begin
                    main_dram_ctrl_bankmachine4_timer_bankmachine4_next_value_ce = 1'd1;
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
assign main_dram_ctrl_bankmachine5_timer_done = (main_dram_ctrl_bankmachine5_timer == 1'd0);
assign main_dram_ctrl_bankmachine5_sink_valid = main_dram_ctrl_bankmachine5_req_valid;
assign main_dram_ctrl_bankmachine5_req_ready = main_dram_ctrl_bankmachine5_sink_ready;
assign main_dram_ctrl_bankmachine5_sink_payload_we = main_dram_ctrl_bankmachine5_req_we;
assign main_dram_ctrl_bankmachine5_sink_payload_addr = main_dram_ctrl_bankmachine5_req_addr;
assign main_dram_ctrl_bankmachine5_sink_sink_valid = main_dram_ctrl_bankmachine5_source_valid;
assign main_dram_ctrl_bankmachine5_source_ready = main_dram_ctrl_bankmachine5_sink_sink_ready;
assign main_dram_ctrl_bankmachine5_sink_sink_first = main_dram_ctrl_bankmachine5_source_first;
assign main_dram_ctrl_bankmachine5_sink_sink_last = main_dram_ctrl_bankmachine5_source_last;
assign main_dram_ctrl_bankmachine5_sink_sink_payload_we = main_dram_ctrl_bankmachine5_source_payload_we;
assign main_dram_ctrl_bankmachine5_sink_sink_payload_addr = main_dram_ctrl_bankmachine5_source_payload_addr;
assign main_dram_ctrl_bankmachine5_source_source_ready = (main_dram_ctrl_bankmachine5_req_wdata_ready | main_dram_ctrl_bankmachine5_req_rdata_valid);
assign main_dram_ctrl_bankmachine5_req_lock = (main_dram_ctrl_bankmachine5_source_valid | main_dram_ctrl_bankmachine5_source_source_valid);
assign main_dram_ctrl_bankmachine5_pre_sig = (main_dram_ctrl_bankmachine5_auto_precharge <<< 4'd10);
assign main_dram_ctrl_bankmachine5_cmd_payload_ba = 3'd5;
always @(*) begin
	main_dram_ctrl_bankmachine5_cmd_payload_a = 15'd0;
    if (main_dram_ctrl_bankmachine5_row_col_n_addr_sel) begin
        main_dram_ctrl_bankmachine5_cmd_payload_a = main_dram_ctrl_bankmachine5_source_source_payload_addr[20:6];
    end else begin
        if (main_dram_ctrl_bankmachine5_pre_n_addr_sel) begin
            main_dram_ctrl_bankmachine5_cmd_payload_a = 1'd0;
        end else begin
            main_dram_ctrl_bankmachine5_cmd_payload_a = (main_dram_ctrl_bankmachine5_pre_sig | {main_dram_ctrl_bankmachine5_source_source_payload_addr[5:0], {4{1'd0}}});
        end
    end
end
assign main_dram_ctrl_bankmachine5_twtpcon_valid = ((main_dram_ctrl_bankmachine5_cmd_valid & main_dram_ctrl_bankmachine5_cmd_ready) & main_dram_ctrl_bankmachine5_cmd_payload_is_write);
assign main_dram_ctrl_bankmachine5_trccon_valid = ((main_dram_ctrl_bankmachine5_cmd_valid & main_dram_ctrl_bankmachine5_cmd_ready) & main_dram_ctrl_bankmachine5_row_open);
assign main_dram_ctrl_bankmachine5_trascon_valid = ((main_dram_ctrl_bankmachine5_cmd_valid & main_dram_ctrl_bankmachine5_cmd_ready) & main_dram_ctrl_bankmachine5_row_open);
always @(*) begin
	main_dram_ctrl_bankmachine5_auto_precharge = 1'd0;
    if ((main_dram_ctrl_bankmachine5_source_valid & main_dram_ctrl_bankmachine5_source_source_valid)) begin
        if ((main_dram_ctrl_bankmachine5_source_payload_addr[20:6] != main_dram_ctrl_bankmachine5_source_source_payload_addr[20:6])) begin
            main_dram_ctrl_bankmachine5_auto_precharge = (main_dram_ctrl_bankmachine5_row_close == 1'd0);
        end
    end
end
assign main_dram_ctrl_bankmachine5_simplesyncfifo5_din = {main_dram_ctrl_bankmachine5_fifo_in_last, main_dram_ctrl_bankmachine5_fifo_in_first, main_dram_ctrl_bankmachine5_fifo_in_payload_addr, main_dram_ctrl_bankmachine5_fifo_in_payload_we};
assign {main_dram_ctrl_bankmachine5_fifo_out_last, main_dram_ctrl_bankmachine5_fifo_out_first, main_dram_ctrl_bankmachine5_fifo_out_payload_addr, main_dram_ctrl_bankmachine5_fifo_out_payload_we} = main_dram_ctrl_bankmachine5_simplesyncfifo5_dout;
assign {main_dram_ctrl_bankmachine5_fifo_out_last, main_dram_ctrl_bankmachine5_fifo_out_first, main_dram_ctrl_bankmachine5_fifo_out_payload_addr, main_dram_ctrl_bankmachine5_fifo_out_payload_we} = main_dram_ctrl_bankmachine5_simplesyncfifo5_dout;
assign {main_dram_ctrl_bankmachine5_fifo_out_last, main_dram_ctrl_bankmachine5_fifo_out_first, main_dram_ctrl_bankmachine5_fifo_out_payload_addr, main_dram_ctrl_bankmachine5_fifo_out_payload_we} = main_dram_ctrl_bankmachine5_simplesyncfifo5_dout;
assign {main_dram_ctrl_bankmachine5_fifo_out_last, main_dram_ctrl_bankmachine5_fifo_out_first, main_dram_ctrl_bankmachine5_fifo_out_payload_addr, main_dram_ctrl_bankmachine5_fifo_out_payload_we} = main_dram_ctrl_bankmachine5_simplesyncfifo5_dout;
assign main_dram_ctrl_bankmachine5_sink_ready = main_dram_ctrl_bankmachine5_simplesyncfifo5_writable;
assign main_dram_ctrl_bankmachine5_simplesyncfifo5_we = main_dram_ctrl_bankmachine5_sink_valid;
assign main_dram_ctrl_bankmachine5_fifo_in_first = main_dram_ctrl_bankmachine5_sink_first;
assign main_dram_ctrl_bankmachine5_fifo_in_last = main_dram_ctrl_bankmachine5_sink_last;
assign main_dram_ctrl_bankmachine5_fifo_in_payload_we = main_dram_ctrl_bankmachine5_sink_payload_we;
assign main_dram_ctrl_bankmachine5_fifo_in_payload_addr = main_dram_ctrl_bankmachine5_sink_payload_addr;
assign main_dram_ctrl_bankmachine5_source_valid = main_dram_ctrl_bankmachine5_simplesyncfifo5_readable;
assign main_dram_ctrl_bankmachine5_source_first = main_dram_ctrl_bankmachine5_fifo_out_first;
assign main_dram_ctrl_bankmachine5_source_last = main_dram_ctrl_bankmachine5_fifo_out_last;
assign main_dram_ctrl_bankmachine5_source_payload_we = main_dram_ctrl_bankmachine5_fifo_out_payload_we;
assign main_dram_ctrl_bankmachine5_source_payload_addr = main_dram_ctrl_bankmachine5_fifo_out_payload_addr;
assign main_dram_ctrl_bankmachine5_simplesyncfifo5_re = main_dram_ctrl_bankmachine5_source_ready;
assign main_dram_ctrl_bankmachine5_wrport_adr = main_dram_ctrl_bankmachine5_w_cnt;
assign main_dram_ctrl_bankmachine5_wrport_dat_w = main_dram_ctrl_bankmachine5_simplesyncfifo5_din;
assign main_dram_ctrl_bankmachine5_wrport_we = (main_dram_ctrl_bankmachine5_simplesyncfifo5_we & main_dram_ctrl_bankmachine5_simplesyncfifo5_writable);
assign main_dram_ctrl_bankmachine5_wrport_re = 1'd0;
assign main_dram_ctrl_bankmachine5_do_read = (main_dram_ctrl_bankmachine5_simplesyncfifo5_readable & main_dram_ctrl_bankmachine5_simplesyncfifo5_re);
assign main_dram_ctrl_bankmachine5_rdport_adr = main_dram_ctrl_bankmachine5_r_cnt;
assign main_dram_ctrl_bankmachine5_simplesyncfifo5_dout = main_dram_ctrl_bankmachine5_rdport_dat_r;
assign main_dram_ctrl_bankmachine5_half_way = (main_dram_ctrl_bankmachine5_w_cnt[3:0] == main_dram_ctrl_bankmachine5_r_cnt[3:0]);
assign main_dram_ctrl_bankmachine5_simplesyncfifo5_writable = (~(main_dram_ctrl_bankmachine5_half_way & (main_dram_ctrl_bankmachine5_w_cnt[4] != main_dram_ctrl_bankmachine5_r_cnt[4])));
assign main_dram_ctrl_bankmachine5_simplesyncfifo5_readable = (~(main_dram_ctrl_bankmachine5_half_way & (main_dram_ctrl_bankmachine5_w_cnt[4] == main_dram_ctrl_bankmachine5_r_cnt[4])));
assign main_dram_ctrl_bankmachine5_pipe_valid_sink_ready = ((~main_dram_ctrl_bankmachine5_pipe_valid_source_valid) | main_dram_ctrl_bankmachine5_pipe_valid_source_ready);
assign main_dram_ctrl_bankmachine5_pipe_valid_sink_valid = main_dram_ctrl_bankmachine5_sink_sink_valid;
assign main_dram_ctrl_bankmachine5_sink_sink_ready = main_dram_ctrl_bankmachine5_pipe_valid_sink_ready;
assign main_dram_ctrl_bankmachine5_pipe_valid_sink_first = main_dram_ctrl_bankmachine5_sink_sink_first;
assign main_dram_ctrl_bankmachine5_pipe_valid_sink_last = main_dram_ctrl_bankmachine5_sink_sink_last;
assign main_dram_ctrl_bankmachine5_pipe_valid_sink_payload_we = main_dram_ctrl_bankmachine5_sink_sink_payload_we;
assign main_dram_ctrl_bankmachine5_pipe_valid_sink_payload_addr = main_dram_ctrl_bankmachine5_sink_sink_payload_addr;
assign main_dram_ctrl_bankmachine5_source_source_valid = main_dram_ctrl_bankmachine5_pipe_valid_source_valid;
assign main_dram_ctrl_bankmachine5_pipe_valid_source_ready = main_dram_ctrl_bankmachine5_source_source_ready;
assign main_dram_ctrl_bankmachine5_source_source_first = main_dram_ctrl_bankmachine5_pipe_valid_source_first;
assign main_dram_ctrl_bankmachine5_source_source_last = main_dram_ctrl_bankmachine5_pipe_valid_source_last;
assign main_dram_ctrl_bankmachine5_source_source_payload_we = main_dram_ctrl_bankmachine5_pipe_valid_source_payload_we;
assign main_dram_ctrl_bankmachine5_source_source_payload_addr = main_dram_ctrl_bankmachine5_pipe_valid_source_payload_addr;
always @(*) begin
	builder_dramcoresoc_dramcore_bankmachine5_next_state = 3'd0;
    builder_dramcoresoc_dramcore_bankmachine5_next_state = builder_dramcoresoc_dramcore_bankmachine5_state;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine5_twtpcon_ready & main_dram_ctrl_bankmachine5_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine5_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine5_next_state = 2'd3;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine5_twtpcon_ready & main_dram_ctrl_bankmachine5_trascon_ready)) begin
                builder_dramcoresoc_dramcore_bankmachine5_next_state = 2'd3;
            end
        end
        2'd3: begin
            if (main_dram_ctrl_bankmachine5_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine5_next_state = 3'd4;
            end
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine5_trccon_ready) begin
                if (main_dram_ctrl_bankmachine5_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine5_next_state = 3'd5;
                end
            end
        end
        3'd5: begin
            if (main_dram_ctrl_bankmachine5_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine5_next_state = 1'd0;
            end
        end
        3'd6: begin
            if ((~main_dram_ctrl_bankmachine5_refresh_req)) begin
                builder_dramcoresoc_dramcore_bankmachine5_next_state = 1'd0;
            end
        end
        default: begin
            if (main_dram_ctrl_bankmachine5_refresh_req) begin
                builder_dramcoresoc_dramcore_bankmachine5_next_state = 3'd6;
            end else begin
                if (((main_dram_ctrl_bankmachine5_source_source_valid & main_dram_ctrl_bankmachine5_row_opened) & main_dram_ctrl_bankmachine5_row_hit)) begin
                    if ((main_dram_ctrl_bankmachine5_cmd_ready & main_dram_ctrl_bankmachine5_auto_precharge)) begin
                        builder_dramcoresoc_dramcore_bankmachine5_next_state = 2'd2;
                    end
                end else begin
                    if ((main_dram_ctrl_bankmachine5_source_source_valid & main_dram_ctrl_bankmachine5_row_opened)) begin
                        builder_dramcoresoc_dramcore_bankmachine5_next_state = 1'd1;
                    end else begin
                        if (main_dram_ctrl_bankmachine5_source_source_valid) begin
                            builder_dramcoresoc_dramcore_bankmachine5_next_state = 3'd4;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_timer_bankmachine5_next_value_ce = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine5_twtpcon_ready & main_dram_ctrl_bankmachine5_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine5_cmd_ready) begin
                    main_dram_ctrl_bankmachine5_timer_bankmachine5_next_value_ce = 1'd1;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine5_twtpcon_ready & main_dram_ctrl_bankmachine5_trascon_ready)) begin
                main_dram_ctrl_bankmachine5_timer_bankmachine5_next_value_ce = 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine5_trccon_ready) begin
                if (main_dram_ctrl_bankmachine5_cmd_ready) begin
                    main_dram_ctrl_bankmachine5_timer_bankmachine5_next_value_ce = 1'd1;
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_refresh_gnt = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            if (main_dram_ctrl_bankmachine5_twtpcon_ready) begin
                main_dram_ctrl_bankmachine5_refresh_gnt = 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_cmd_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine5_twtpcon_ready & main_dram_ctrl_bankmachine5_trascon_ready)) begin
                main_dram_ctrl_bankmachine5_cmd_valid = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine5_trccon_ready) begin
                main_dram_ctrl_bankmachine5_cmd_valid = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine5_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine5_source_source_valid & main_dram_ctrl_bankmachine5_row_opened) & main_dram_ctrl_bankmachine5_row_hit)) begin
                    main_dram_ctrl_bankmachine5_cmd_valid = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_row_col_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine5_trccon_ready) begin
                main_dram_ctrl_bankmachine5_row_col_n_addr_sel = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_row_open = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine5_trccon_ready) begin
                main_dram_ctrl_bankmachine5_row_open = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_cmd_payload_cas = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine5_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine5_source_source_valid & main_dram_ctrl_bankmachine5_row_opened) & main_dram_ctrl_bankmachine5_row_hit)) begin
                    main_dram_ctrl_bankmachine5_cmd_payload_cas = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_row_close = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
            main_dram_ctrl_bankmachine5_row_close = 1'd1;
        end
        2'd2: begin
            main_dram_ctrl_bankmachine5_row_close = 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine5_row_close = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_cmd_payload_ras = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine5_twtpcon_ready & main_dram_ctrl_bankmachine5_trascon_ready)) begin
                main_dram_ctrl_bankmachine5_cmd_payload_ras = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine5_trccon_ready) begin
                main_dram_ctrl_bankmachine5_cmd_payload_ras = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_row_hit_reeval = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            main_dram_ctrl_bankmachine5_row_hit_reeval = 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_cmd_payload_we = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine5_twtpcon_ready & main_dram_ctrl_bankmachine5_trascon_ready)) begin
                main_dram_ctrl_bankmachine5_cmd_payload_we = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine5_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine5_source_source_valid & main_dram_ctrl_bankmachine5_row_opened) & main_dram_ctrl_bankmachine5_row_hit)) begin
                    if (main_dram_ctrl_bankmachine5_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine5_cmd_payload_we = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_cmd_payload_is_cmd = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine5_twtpcon_ready & main_dram_ctrl_bankmachine5_trascon_ready)) begin
                main_dram_ctrl_bankmachine5_cmd_payload_is_cmd = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine5_trccon_ready) begin
                main_dram_ctrl_bankmachine5_cmd_payload_is_cmd = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine5_cmd_payload_is_cmd = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_cmd_payload_is_read = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine5_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine5_source_source_valid & main_dram_ctrl_bankmachine5_row_opened) & main_dram_ctrl_bankmachine5_row_hit)) begin
                    if (main_dram_ctrl_bankmachine5_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine5_cmd_payload_is_read = 1'd1;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_pre_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine5_twtpcon_ready & main_dram_ctrl_bankmachine5_trascon_ready)) begin
                main_dram_ctrl_bankmachine5_pre_n_addr_sel = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_cmd_payload_is_write = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine5_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine5_source_source_valid & main_dram_ctrl_bankmachine5_row_opened) & main_dram_ctrl_bankmachine5_row_hit)) begin
                    if (main_dram_ctrl_bankmachine5_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine5_cmd_payload_is_write = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_req_wdata_ready = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine5_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine5_source_source_valid & main_dram_ctrl_bankmachine5_row_opened) & main_dram_ctrl_bankmachine5_row_hit)) begin
                    if (main_dram_ctrl_bankmachine5_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine5_req_wdata_ready = main_dram_ctrl_bankmachine5_cmd_ready;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_req_rdata_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine5_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine5_source_source_valid & main_dram_ctrl_bankmachine5_row_opened) & main_dram_ctrl_bankmachine5_row_hit)) begin
                    if (main_dram_ctrl_bankmachine5_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine5_req_rdata_valid = main_dram_ctrl_bankmachine5_cmd_ready;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine5_timer_bankmachine5_next_value = 4'd0;
    case (builder_dramcoresoc_dramcore_bankmachine5_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine5_twtpcon_ready & main_dram_ctrl_bankmachine5_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine5_cmd_ready) begin
                    main_dram_ctrl_bankmachine5_timer_bankmachine5_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine5_twtpcon_ready & main_dram_ctrl_bankmachine5_trascon_ready)) begin
                main_dram_ctrl_bankmachine5_timer_bankmachine5_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine5_trccon_ready) begin
                if (main_dram_ctrl_bankmachine5_cmd_ready) begin
                    main_dram_ctrl_bankmachine5_timer_bankmachine5_next_value = (main_dram_ctrl_csrstorage1_storage - 1'd1);
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
assign main_dram_ctrl_bankmachine6_timer_done = (main_dram_ctrl_bankmachine6_timer == 1'd0);
assign main_dram_ctrl_bankmachine6_sink_valid = main_dram_ctrl_bankmachine6_req_valid;
assign main_dram_ctrl_bankmachine6_req_ready = main_dram_ctrl_bankmachine6_sink_ready;
assign main_dram_ctrl_bankmachine6_sink_payload_we = main_dram_ctrl_bankmachine6_req_we;
assign main_dram_ctrl_bankmachine6_sink_payload_addr = main_dram_ctrl_bankmachine6_req_addr;
assign main_dram_ctrl_bankmachine6_sink_sink_valid = main_dram_ctrl_bankmachine6_source_valid;
assign main_dram_ctrl_bankmachine6_source_ready = main_dram_ctrl_bankmachine6_sink_sink_ready;
assign main_dram_ctrl_bankmachine6_sink_sink_first = main_dram_ctrl_bankmachine6_source_first;
assign main_dram_ctrl_bankmachine6_sink_sink_last = main_dram_ctrl_bankmachine6_source_last;
assign main_dram_ctrl_bankmachine6_sink_sink_payload_we = main_dram_ctrl_bankmachine6_source_payload_we;
assign main_dram_ctrl_bankmachine6_sink_sink_payload_addr = main_dram_ctrl_bankmachine6_source_payload_addr;
assign main_dram_ctrl_bankmachine6_source_source_ready = (main_dram_ctrl_bankmachine6_req_wdata_ready | main_dram_ctrl_bankmachine6_req_rdata_valid);
assign main_dram_ctrl_bankmachine6_req_lock = (main_dram_ctrl_bankmachine6_source_valid | main_dram_ctrl_bankmachine6_source_source_valid);
assign main_dram_ctrl_bankmachine6_pre_sig = (main_dram_ctrl_bankmachine6_auto_precharge <<< 4'd10);
assign main_dram_ctrl_bankmachine6_cmd_payload_ba = 3'd6;
always @(*) begin
	main_dram_ctrl_bankmachine6_cmd_payload_a = 15'd0;
    if (main_dram_ctrl_bankmachine6_row_col_n_addr_sel) begin
        main_dram_ctrl_bankmachine6_cmd_payload_a = main_dram_ctrl_bankmachine6_source_source_payload_addr[20:6];
    end else begin
        if (main_dram_ctrl_bankmachine6_pre_n_addr_sel) begin
            main_dram_ctrl_bankmachine6_cmd_payload_a = 1'd0;
        end else begin
            main_dram_ctrl_bankmachine6_cmd_payload_a = (main_dram_ctrl_bankmachine6_pre_sig | {main_dram_ctrl_bankmachine6_source_source_payload_addr[5:0], {4{1'd0}}});
        end
    end
end
assign main_dram_ctrl_bankmachine6_twtpcon_valid = ((main_dram_ctrl_bankmachine6_cmd_valid & main_dram_ctrl_bankmachine6_cmd_ready) & main_dram_ctrl_bankmachine6_cmd_payload_is_write);
assign main_dram_ctrl_bankmachine6_trccon_valid = ((main_dram_ctrl_bankmachine6_cmd_valid & main_dram_ctrl_bankmachine6_cmd_ready) & main_dram_ctrl_bankmachine6_row_open);
assign main_dram_ctrl_bankmachine6_trascon_valid = ((main_dram_ctrl_bankmachine6_cmd_valid & main_dram_ctrl_bankmachine6_cmd_ready) & main_dram_ctrl_bankmachine6_row_open);
always @(*) begin
	main_dram_ctrl_bankmachine6_auto_precharge = 1'd0;
    if ((main_dram_ctrl_bankmachine6_source_valid & main_dram_ctrl_bankmachine6_source_source_valid)) begin
        if ((main_dram_ctrl_bankmachine6_source_payload_addr[20:6] != main_dram_ctrl_bankmachine6_source_source_payload_addr[20:6])) begin
            main_dram_ctrl_bankmachine6_auto_precharge = (main_dram_ctrl_bankmachine6_row_close == 1'd0);
        end
    end
end
assign main_dram_ctrl_bankmachine6_simplesyncfifo6_din = {main_dram_ctrl_bankmachine6_fifo_in_last, main_dram_ctrl_bankmachine6_fifo_in_first, main_dram_ctrl_bankmachine6_fifo_in_payload_addr, main_dram_ctrl_bankmachine6_fifo_in_payload_we};
assign {main_dram_ctrl_bankmachine6_fifo_out_last, main_dram_ctrl_bankmachine6_fifo_out_first, main_dram_ctrl_bankmachine6_fifo_out_payload_addr, main_dram_ctrl_bankmachine6_fifo_out_payload_we} = main_dram_ctrl_bankmachine6_simplesyncfifo6_dout;
assign {main_dram_ctrl_bankmachine6_fifo_out_last, main_dram_ctrl_bankmachine6_fifo_out_first, main_dram_ctrl_bankmachine6_fifo_out_payload_addr, main_dram_ctrl_bankmachine6_fifo_out_payload_we} = main_dram_ctrl_bankmachine6_simplesyncfifo6_dout;
assign {main_dram_ctrl_bankmachine6_fifo_out_last, main_dram_ctrl_bankmachine6_fifo_out_first, main_dram_ctrl_bankmachine6_fifo_out_payload_addr, main_dram_ctrl_bankmachine6_fifo_out_payload_we} = main_dram_ctrl_bankmachine6_simplesyncfifo6_dout;
assign {main_dram_ctrl_bankmachine6_fifo_out_last, main_dram_ctrl_bankmachine6_fifo_out_first, main_dram_ctrl_bankmachine6_fifo_out_payload_addr, main_dram_ctrl_bankmachine6_fifo_out_payload_we} = main_dram_ctrl_bankmachine6_simplesyncfifo6_dout;
assign main_dram_ctrl_bankmachine6_sink_ready = main_dram_ctrl_bankmachine6_simplesyncfifo6_writable;
assign main_dram_ctrl_bankmachine6_simplesyncfifo6_we = main_dram_ctrl_bankmachine6_sink_valid;
assign main_dram_ctrl_bankmachine6_fifo_in_first = main_dram_ctrl_bankmachine6_sink_first;
assign main_dram_ctrl_bankmachine6_fifo_in_last = main_dram_ctrl_bankmachine6_sink_last;
assign main_dram_ctrl_bankmachine6_fifo_in_payload_we = main_dram_ctrl_bankmachine6_sink_payload_we;
assign main_dram_ctrl_bankmachine6_fifo_in_payload_addr = main_dram_ctrl_bankmachine6_sink_payload_addr;
assign main_dram_ctrl_bankmachine6_source_valid = main_dram_ctrl_bankmachine6_simplesyncfifo6_readable;
assign main_dram_ctrl_bankmachine6_source_first = main_dram_ctrl_bankmachine6_fifo_out_first;
assign main_dram_ctrl_bankmachine6_source_last = main_dram_ctrl_bankmachine6_fifo_out_last;
assign main_dram_ctrl_bankmachine6_source_payload_we = main_dram_ctrl_bankmachine6_fifo_out_payload_we;
assign main_dram_ctrl_bankmachine6_source_payload_addr = main_dram_ctrl_bankmachine6_fifo_out_payload_addr;
assign main_dram_ctrl_bankmachine6_simplesyncfifo6_re = main_dram_ctrl_bankmachine6_source_ready;
assign main_dram_ctrl_bankmachine6_wrport_adr = main_dram_ctrl_bankmachine6_w_cnt;
assign main_dram_ctrl_bankmachine6_wrport_dat_w = main_dram_ctrl_bankmachine6_simplesyncfifo6_din;
assign main_dram_ctrl_bankmachine6_wrport_we = (main_dram_ctrl_bankmachine6_simplesyncfifo6_we & main_dram_ctrl_bankmachine6_simplesyncfifo6_writable);
assign main_dram_ctrl_bankmachine6_wrport_re = 1'd0;
assign main_dram_ctrl_bankmachine6_do_read = (main_dram_ctrl_bankmachine6_simplesyncfifo6_readable & main_dram_ctrl_bankmachine6_simplesyncfifo6_re);
assign main_dram_ctrl_bankmachine6_rdport_adr = main_dram_ctrl_bankmachine6_r_cnt;
assign main_dram_ctrl_bankmachine6_simplesyncfifo6_dout = main_dram_ctrl_bankmachine6_rdport_dat_r;
assign main_dram_ctrl_bankmachine6_half_way = (main_dram_ctrl_bankmachine6_w_cnt[3:0] == main_dram_ctrl_bankmachine6_r_cnt[3:0]);
assign main_dram_ctrl_bankmachine6_simplesyncfifo6_writable = (~(main_dram_ctrl_bankmachine6_half_way & (main_dram_ctrl_bankmachine6_w_cnt[4] != main_dram_ctrl_bankmachine6_r_cnt[4])));
assign main_dram_ctrl_bankmachine6_simplesyncfifo6_readable = (~(main_dram_ctrl_bankmachine6_half_way & (main_dram_ctrl_bankmachine6_w_cnt[4] == main_dram_ctrl_bankmachine6_r_cnt[4])));
assign main_dram_ctrl_bankmachine6_pipe_valid_sink_ready = ((~main_dram_ctrl_bankmachine6_pipe_valid_source_valid) | main_dram_ctrl_bankmachine6_pipe_valid_source_ready);
assign main_dram_ctrl_bankmachine6_pipe_valid_sink_valid = main_dram_ctrl_bankmachine6_sink_sink_valid;
assign main_dram_ctrl_bankmachine6_sink_sink_ready = main_dram_ctrl_bankmachine6_pipe_valid_sink_ready;
assign main_dram_ctrl_bankmachine6_pipe_valid_sink_first = main_dram_ctrl_bankmachine6_sink_sink_first;
assign main_dram_ctrl_bankmachine6_pipe_valid_sink_last = main_dram_ctrl_bankmachine6_sink_sink_last;
assign main_dram_ctrl_bankmachine6_pipe_valid_sink_payload_we = main_dram_ctrl_bankmachine6_sink_sink_payload_we;
assign main_dram_ctrl_bankmachine6_pipe_valid_sink_payload_addr = main_dram_ctrl_bankmachine6_sink_sink_payload_addr;
assign main_dram_ctrl_bankmachine6_source_source_valid = main_dram_ctrl_bankmachine6_pipe_valid_source_valid;
assign main_dram_ctrl_bankmachine6_pipe_valid_source_ready = main_dram_ctrl_bankmachine6_source_source_ready;
assign main_dram_ctrl_bankmachine6_source_source_first = main_dram_ctrl_bankmachine6_pipe_valid_source_first;
assign main_dram_ctrl_bankmachine6_source_source_last = main_dram_ctrl_bankmachine6_pipe_valid_source_last;
assign main_dram_ctrl_bankmachine6_source_source_payload_we = main_dram_ctrl_bankmachine6_pipe_valid_source_payload_we;
assign main_dram_ctrl_bankmachine6_source_source_payload_addr = main_dram_ctrl_bankmachine6_pipe_valid_source_payload_addr;
always @(*) begin
	builder_dramcoresoc_dramcore_bankmachine6_next_state = 3'd0;
    builder_dramcoresoc_dramcore_bankmachine6_next_state = builder_dramcoresoc_dramcore_bankmachine6_state;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine6_twtpcon_ready & main_dram_ctrl_bankmachine6_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine6_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine6_next_state = 2'd3;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine6_twtpcon_ready & main_dram_ctrl_bankmachine6_trascon_ready)) begin
                builder_dramcoresoc_dramcore_bankmachine6_next_state = 2'd3;
            end
        end
        2'd3: begin
            if (main_dram_ctrl_bankmachine6_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine6_next_state = 3'd4;
            end
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine6_trccon_ready) begin
                if (main_dram_ctrl_bankmachine6_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine6_next_state = 3'd5;
                end
            end
        end
        3'd5: begin
            if (main_dram_ctrl_bankmachine6_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine6_next_state = 1'd0;
            end
        end
        3'd6: begin
            if ((~main_dram_ctrl_bankmachine6_refresh_req)) begin
                builder_dramcoresoc_dramcore_bankmachine6_next_state = 1'd0;
            end
        end
        default: begin
            if (main_dram_ctrl_bankmachine6_refresh_req) begin
                builder_dramcoresoc_dramcore_bankmachine6_next_state = 3'd6;
            end else begin
                if (((main_dram_ctrl_bankmachine6_source_source_valid & main_dram_ctrl_bankmachine6_row_opened) & main_dram_ctrl_bankmachine6_row_hit)) begin
                    if ((main_dram_ctrl_bankmachine6_cmd_ready & main_dram_ctrl_bankmachine6_auto_precharge)) begin
                        builder_dramcoresoc_dramcore_bankmachine6_next_state = 2'd2;
                    end
                end else begin
                    if ((main_dram_ctrl_bankmachine6_source_source_valid & main_dram_ctrl_bankmachine6_row_opened)) begin
                        builder_dramcoresoc_dramcore_bankmachine6_next_state = 1'd1;
                    end else begin
                        if (main_dram_ctrl_bankmachine6_source_source_valid) begin
                            builder_dramcoresoc_dramcore_bankmachine6_next_state = 3'd4;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_cmd_payload_is_write = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine6_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine6_source_source_valid & main_dram_ctrl_bankmachine6_row_opened) & main_dram_ctrl_bankmachine6_row_hit)) begin
                    if (main_dram_ctrl_bankmachine6_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine6_cmd_payload_is_write = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_req_wdata_ready = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine6_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine6_source_source_valid & main_dram_ctrl_bankmachine6_row_opened) & main_dram_ctrl_bankmachine6_row_hit)) begin
                    if (main_dram_ctrl_bankmachine6_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine6_req_wdata_ready = main_dram_ctrl_bankmachine6_cmd_ready;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_timer_bankmachine6_next_value = 4'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine6_twtpcon_ready & main_dram_ctrl_bankmachine6_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine6_cmd_ready) begin
                    main_dram_ctrl_bankmachine6_timer_bankmachine6_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine6_twtpcon_ready & main_dram_ctrl_bankmachine6_trascon_ready)) begin
                main_dram_ctrl_bankmachine6_timer_bankmachine6_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine6_trccon_ready) begin
                if (main_dram_ctrl_bankmachine6_cmd_ready) begin
                    main_dram_ctrl_bankmachine6_timer_bankmachine6_next_value = (main_dram_ctrl_csrstorage1_storage - 1'd1);
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_req_rdata_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine6_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine6_source_source_valid & main_dram_ctrl_bankmachine6_row_opened) & main_dram_ctrl_bankmachine6_row_hit)) begin
                    if (main_dram_ctrl_bankmachine6_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine6_req_rdata_valid = main_dram_ctrl_bankmachine6_cmd_ready;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_timer_bankmachine6_next_value_ce = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine6_twtpcon_ready & main_dram_ctrl_bankmachine6_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine6_cmd_ready) begin
                    main_dram_ctrl_bankmachine6_timer_bankmachine6_next_value_ce = 1'd1;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine6_twtpcon_ready & main_dram_ctrl_bankmachine6_trascon_ready)) begin
                main_dram_ctrl_bankmachine6_timer_bankmachine6_next_value_ce = 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine6_trccon_ready) begin
                if (main_dram_ctrl_bankmachine6_cmd_ready) begin
                    main_dram_ctrl_bankmachine6_timer_bankmachine6_next_value_ce = 1'd1;
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_pre_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine6_twtpcon_ready & main_dram_ctrl_bankmachine6_trascon_ready)) begin
                main_dram_ctrl_bankmachine6_pre_n_addr_sel = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_row_col_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine6_trccon_ready) begin
                main_dram_ctrl_bankmachine6_row_col_n_addr_sel = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_refresh_gnt = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            if (main_dram_ctrl_bankmachine6_twtpcon_ready) begin
                main_dram_ctrl_bankmachine6_refresh_gnt = 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_cmd_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine6_twtpcon_ready & main_dram_ctrl_bankmachine6_trascon_ready)) begin
                main_dram_ctrl_bankmachine6_cmd_valid = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine6_trccon_ready) begin
                main_dram_ctrl_bankmachine6_cmd_valid = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine6_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine6_source_source_valid & main_dram_ctrl_bankmachine6_row_opened) & main_dram_ctrl_bankmachine6_row_hit)) begin
                    main_dram_ctrl_bankmachine6_cmd_valid = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_cmd_payload_ras = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine6_twtpcon_ready & main_dram_ctrl_bankmachine6_trascon_ready)) begin
                main_dram_ctrl_bankmachine6_cmd_payload_ras = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine6_trccon_ready) begin
                main_dram_ctrl_bankmachine6_cmd_payload_ras = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_row_open = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine6_trccon_ready) begin
                main_dram_ctrl_bankmachine6_row_open = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_cmd_payload_cas = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine6_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine6_source_source_valid & main_dram_ctrl_bankmachine6_row_opened) & main_dram_ctrl_bankmachine6_row_hit)) begin
                    main_dram_ctrl_bankmachine6_cmd_payload_cas = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_row_close = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
            main_dram_ctrl_bankmachine6_row_close = 1'd1;
        end
        2'd2: begin
            main_dram_ctrl_bankmachine6_row_close = 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine6_row_close = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_row_hit_reeval = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            main_dram_ctrl_bankmachine6_row_hit_reeval = 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_cmd_payload_we = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine6_twtpcon_ready & main_dram_ctrl_bankmachine6_trascon_ready)) begin
                main_dram_ctrl_bankmachine6_cmd_payload_we = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine6_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine6_source_source_valid & main_dram_ctrl_bankmachine6_row_opened) & main_dram_ctrl_bankmachine6_row_hit)) begin
                    if (main_dram_ctrl_bankmachine6_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine6_cmd_payload_we = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_cmd_payload_is_cmd = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine6_twtpcon_ready & main_dram_ctrl_bankmachine6_trascon_ready)) begin
                main_dram_ctrl_bankmachine6_cmd_payload_is_cmd = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine6_trccon_ready) begin
                main_dram_ctrl_bankmachine6_cmd_payload_is_cmd = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine6_cmd_payload_is_cmd = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine6_cmd_payload_is_read = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine6_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine6_source_source_valid & main_dram_ctrl_bankmachine6_row_opened) & main_dram_ctrl_bankmachine6_row_hit)) begin
                    if (main_dram_ctrl_bankmachine6_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine6_cmd_payload_is_read = 1'd1;
                    end
                end else begin
                end
            end
        end
    endcase
end
assign main_dram_ctrl_bankmachine7_timer_done = (main_dram_ctrl_bankmachine7_timer == 1'd0);
assign main_dram_ctrl_bankmachine7_sink_valid = main_dram_ctrl_bankmachine7_req_valid;
assign main_dram_ctrl_bankmachine7_req_ready = main_dram_ctrl_bankmachine7_sink_ready;
assign main_dram_ctrl_bankmachine7_sink_payload_we = main_dram_ctrl_bankmachine7_req_we;
assign main_dram_ctrl_bankmachine7_sink_payload_addr = main_dram_ctrl_bankmachine7_req_addr;
assign main_dram_ctrl_bankmachine7_sink_sink_valid = main_dram_ctrl_bankmachine7_source_valid;
assign main_dram_ctrl_bankmachine7_source_ready = main_dram_ctrl_bankmachine7_sink_sink_ready;
assign main_dram_ctrl_bankmachine7_sink_sink_first = main_dram_ctrl_bankmachine7_source_first;
assign main_dram_ctrl_bankmachine7_sink_sink_last = main_dram_ctrl_bankmachine7_source_last;
assign main_dram_ctrl_bankmachine7_sink_sink_payload_we = main_dram_ctrl_bankmachine7_source_payload_we;
assign main_dram_ctrl_bankmachine7_sink_sink_payload_addr = main_dram_ctrl_bankmachine7_source_payload_addr;
assign main_dram_ctrl_bankmachine7_source_source_ready = (main_dram_ctrl_bankmachine7_req_wdata_ready | main_dram_ctrl_bankmachine7_req_rdata_valid);
assign main_dram_ctrl_bankmachine7_req_lock = (main_dram_ctrl_bankmachine7_source_valid | main_dram_ctrl_bankmachine7_source_source_valid);
assign main_dram_ctrl_bankmachine7_pre_sig = (main_dram_ctrl_bankmachine7_auto_precharge <<< 4'd10);
assign main_dram_ctrl_bankmachine7_cmd_payload_ba = 3'd7;
always @(*) begin
	main_dram_ctrl_bankmachine7_cmd_payload_a = 15'd0;
    if (main_dram_ctrl_bankmachine7_row_col_n_addr_sel) begin
        main_dram_ctrl_bankmachine7_cmd_payload_a = main_dram_ctrl_bankmachine7_source_source_payload_addr[20:6];
    end else begin
        if (main_dram_ctrl_bankmachine7_pre_n_addr_sel) begin
            main_dram_ctrl_bankmachine7_cmd_payload_a = 1'd0;
        end else begin
            main_dram_ctrl_bankmachine7_cmd_payload_a = (main_dram_ctrl_bankmachine7_pre_sig | {main_dram_ctrl_bankmachine7_source_source_payload_addr[5:0], {4{1'd0}}});
        end
    end
end
assign main_dram_ctrl_bankmachine7_twtpcon_valid = ((main_dram_ctrl_bankmachine7_cmd_valid & main_dram_ctrl_bankmachine7_cmd_ready) & main_dram_ctrl_bankmachine7_cmd_payload_is_write);
assign main_dram_ctrl_bankmachine7_trccon_valid = ((main_dram_ctrl_bankmachine7_cmd_valid & main_dram_ctrl_bankmachine7_cmd_ready) & main_dram_ctrl_bankmachine7_row_open);
assign main_dram_ctrl_bankmachine7_trascon_valid = ((main_dram_ctrl_bankmachine7_cmd_valid & main_dram_ctrl_bankmachine7_cmd_ready) & main_dram_ctrl_bankmachine7_row_open);
always @(*) begin
	main_dram_ctrl_bankmachine7_auto_precharge = 1'd0;
    if ((main_dram_ctrl_bankmachine7_source_valid & main_dram_ctrl_bankmachine7_source_source_valid)) begin
        if ((main_dram_ctrl_bankmachine7_source_payload_addr[20:6] != main_dram_ctrl_bankmachine7_source_source_payload_addr[20:6])) begin
            main_dram_ctrl_bankmachine7_auto_precharge = (main_dram_ctrl_bankmachine7_row_close == 1'd0);
        end
    end
end
assign main_dram_ctrl_bankmachine7_simplesyncfifo7_din = {main_dram_ctrl_bankmachine7_fifo_in_last, main_dram_ctrl_bankmachine7_fifo_in_first, main_dram_ctrl_bankmachine7_fifo_in_payload_addr, main_dram_ctrl_bankmachine7_fifo_in_payload_we};
assign {main_dram_ctrl_bankmachine7_fifo_out_last, main_dram_ctrl_bankmachine7_fifo_out_first, main_dram_ctrl_bankmachine7_fifo_out_payload_addr, main_dram_ctrl_bankmachine7_fifo_out_payload_we} = main_dram_ctrl_bankmachine7_simplesyncfifo7_dout;
assign {main_dram_ctrl_bankmachine7_fifo_out_last, main_dram_ctrl_bankmachine7_fifo_out_first, main_dram_ctrl_bankmachine7_fifo_out_payload_addr, main_dram_ctrl_bankmachine7_fifo_out_payload_we} = main_dram_ctrl_bankmachine7_simplesyncfifo7_dout;
assign {main_dram_ctrl_bankmachine7_fifo_out_last, main_dram_ctrl_bankmachine7_fifo_out_first, main_dram_ctrl_bankmachine7_fifo_out_payload_addr, main_dram_ctrl_bankmachine7_fifo_out_payload_we} = main_dram_ctrl_bankmachine7_simplesyncfifo7_dout;
assign {main_dram_ctrl_bankmachine7_fifo_out_last, main_dram_ctrl_bankmachine7_fifo_out_first, main_dram_ctrl_bankmachine7_fifo_out_payload_addr, main_dram_ctrl_bankmachine7_fifo_out_payload_we} = main_dram_ctrl_bankmachine7_simplesyncfifo7_dout;
assign main_dram_ctrl_bankmachine7_sink_ready = main_dram_ctrl_bankmachine7_simplesyncfifo7_writable;
assign main_dram_ctrl_bankmachine7_simplesyncfifo7_we = main_dram_ctrl_bankmachine7_sink_valid;
assign main_dram_ctrl_bankmachine7_fifo_in_first = main_dram_ctrl_bankmachine7_sink_first;
assign main_dram_ctrl_bankmachine7_fifo_in_last = main_dram_ctrl_bankmachine7_sink_last;
assign main_dram_ctrl_bankmachine7_fifo_in_payload_we = main_dram_ctrl_bankmachine7_sink_payload_we;
assign main_dram_ctrl_bankmachine7_fifo_in_payload_addr = main_dram_ctrl_bankmachine7_sink_payload_addr;
assign main_dram_ctrl_bankmachine7_source_valid = main_dram_ctrl_bankmachine7_simplesyncfifo7_readable;
assign main_dram_ctrl_bankmachine7_source_first = main_dram_ctrl_bankmachine7_fifo_out_first;
assign main_dram_ctrl_bankmachine7_source_last = main_dram_ctrl_bankmachine7_fifo_out_last;
assign main_dram_ctrl_bankmachine7_source_payload_we = main_dram_ctrl_bankmachine7_fifo_out_payload_we;
assign main_dram_ctrl_bankmachine7_source_payload_addr = main_dram_ctrl_bankmachine7_fifo_out_payload_addr;
assign main_dram_ctrl_bankmachine7_simplesyncfifo7_re = main_dram_ctrl_bankmachine7_source_ready;
assign main_dram_ctrl_bankmachine7_wrport_adr = main_dram_ctrl_bankmachine7_w_cnt;
assign main_dram_ctrl_bankmachine7_wrport_dat_w = main_dram_ctrl_bankmachine7_simplesyncfifo7_din;
assign main_dram_ctrl_bankmachine7_wrport_we = (main_dram_ctrl_bankmachine7_simplesyncfifo7_we & main_dram_ctrl_bankmachine7_simplesyncfifo7_writable);
assign main_dram_ctrl_bankmachine7_wrport_re = 1'd0;
assign main_dram_ctrl_bankmachine7_do_read = (main_dram_ctrl_bankmachine7_simplesyncfifo7_readable & main_dram_ctrl_bankmachine7_simplesyncfifo7_re);
assign main_dram_ctrl_bankmachine7_rdport_adr = main_dram_ctrl_bankmachine7_r_cnt;
assign main_dram_ctrl_bankmachine7_simplesyncfifo7_dout = main_dram_ctrl_bankmachine7_rdport_dat_r;
assign main_dram_ctrl_bankmachine7_half_way = (main_dram_ctrl_bankmachine7_w_cnt[3:0] == main_dram_ctrl_bankmachine7_r_cnt[3:0]);
assign main_dram_ctrl_bankmachine7_simplesyncfifo7_writable = (~(main_dram_ctrl_bankmachine7_half_way & (main_dram_ctrl_bankmachine7_w_cnt[4] != main_dram_ctrl_bankmachine7_r_cnt[4])));
assign main_dram_ctrl_bankmachine7_simplesyncfifo7_readable = (~(main_dram_ctrl_bankmachine7_half_way & (main_dram_ctrl_bankmachine7_w_cnt[4] == main_dram_ctrl_bankmachine7_r_cnt[4])));
assign main_dram_ctrl_bankmachine7_pipe_valid_sink_ready = ((~main_dram_ctrl_bankmachine7_pipe_valid_source_valid) | main_dram_ctrl_bankmachine7_pipe_valid_source_ready);
assign main_dram_ctrl_bankmachine7_pipe_valid_sink_valid = main_dram_ctrl_bankmachine7_sink_sink_valid;
assign main_dram_ctrl_bankmachine7_sink_sink_ready = main_dram_ctrl_bankmachine7_pipe_valid_sink_ready;
assign main_dram_ctrl_bankmachine7_pipe_valid_sink_first = main_dram_ctrl_bankmachine7_sink_sink_first;
assign main_dram_ctrl_bankmachine7_pipe_valid_sink_last = main_dram_ctrl_bankmachine7_sink_sink_last;
assign main_dram_ctrl_bankmachine7_pipe_valid_sink_payload_we = main_dram_ctrl_bankmachine7_sink_sink_payload_we;
assign main_dram_ctrl_bankmachine7_pipe_valid_sink_payload_addr = main_dram_ctrl_bankmachine7_sink_sink_payload_addr;
assign main_dram_ctrl_bankmachine7_source_source_valid = main_dram_ctrl_bankmachine7_pipe_valid_source_valid;
assign main_dram_ctrl_bankmachine7_pipe_valid_source_ready = main_dram_ctrl_bankmachine7_source_source_ready;
assign main_dram_ctrl_bankmachine7_source_source_first = main_dram_ctrl_bankmachine7_pipe_valid_source_first;
assign main_dram_ctrl_bankmachine7_source_source_last = main_dram_ctrl_bankmachine7_pipe_valid_source_last;
assign main_dram_ctrl_bankmachine7_source_source_payload_we = main_dram_ctrl_bankmachine7_pipe_valid_source_payload_we;
assign main_dram_ctrl_bankmachine7_source_source_payload_addr = main_dram_ctrl_bankmachine7_pipe_valid_source_payload_addr;
always @(*) begin
	builder_dramcoresoc_dramcore_bankmachine7_next_state = 3'd0;
    builder_dramcoresoc_dramcore_bankmachine7_next_state = builder_dramcoresoc_dramcore_bankmachine7_state;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine7_twtpcon_ready & main_dram_ctrl_bankmachine7_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine7_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine7_next_state = 2'd3;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine7_twtpcon_ready & main_dram_ctrl_bankmachine7_trascon_ready)) begin
                builder_dramcoresoc_dramcore_bankmachine7_next_state = 2'd3;
            end
        end
        2'd3: begin
            if (main_dram_ctrl_bankmachine7_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine7_next_state = 3'd4;
            end
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine7_trccon_ready) begin
                if (main_dram_ctrl_bankmachine7_cmd_ready) begin
                    builder_dramcoresoc_dramcore_bankmachine7_next_state = 3'd5;
                end
            end
        end
        3'd5: begin
            if (main_dram_ctrl_bankmachine7_timer_done) begin
                builder_dramcoresoc_dramcore_bankmachine7_next_state = 1'd0;
            end
        end
        3'd6: begin
            if ((~main_dram_ctrl_bankmachine7_refresh_req)) begin
                builder_dramcoresoc_dramcore_bankmachine7_next_state = 1'd0;
            end
        end
        default: begin
            if (main_dram_ctrl_bankmachine7_refresh_req) begin
                builder_dramcoresoc_dramcore_bankmachine7_next_state = 3'd6;
            end else begin
                if (((main_dram_ctrl_bankmachine7_source_source_valid & main_dram_ctrl_bankmachine7_row_opened) & main_dram_ctrl_bankmachine7_row_hit)) begin
                    if ((main_dram_ctrl_bankmachine7_cmd_ready & main_dram_ctrl_bankmachine7_auto_precharge)) begin
                        builder_dramcoresoc_dramcore_bankmachine7_next_state = 2'd2;
                    end
                end else begin
                    if ((main_dram_ctrl_bankmachine7_source_source_valid & main_dram_ctrl_bankmachine7_row_opened)) begin
                        builder_dramcoresoc_dramcore_bankmachine7_next_state = 1'd1;
                    end else begin
                        if (main_dram_ctrl_bankmachine7_source_source_valid) begin
                            builder_dramcoresoc_dramcore_bankmachine7_next_state = 3'd4;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_cmd_payload_cas = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine7_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine7_source_source_valid & main_dram_ctrl_bankmachine7_row_opened) & main_dram_ctrl_bankmachine7_row_hit)) begin
                    main_dram_ctrl_bankmachine7_cmd_payload_cas = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_row_close = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
            main_dram_ctrl_bankmachine7_row_close = 1'd1;
        end
        2'd2: begin
            main_dram_ctrl_bankmachine7_row_close = 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine7_row_close = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_cmd_payload_ras = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine7_twtpcon_ready & main_dram_ctrl_bankmachine7_trascon_ready)) begin
                main_dram_ctrl_bankmachine7_cmd_payload_ras = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine7_trccon_ready) begin
                main_dram_ctrl_bankmachine7_cmd_payload_ras = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_row_hit_reeval = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            main_dram_ctrl_bankmachine7_row_hit_reeval = 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_cmd_payload_we = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine7_twtpcon_ready & main_dram_ctrl_bankmachine7_trascon_ready)) begin
                main_dram_ctrl_bankmachine7_cmd_payload_we = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine7_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine7_source_source_valid & main_dram_ctrl_bankmachine7_row_opened) & main_dram_ctrl_bankmachine7_row_hit)) begin
                    if (main_dram_ctrl_bankmachine7_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine7_cmd_payload_we = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_cmd_payload_is_cmd = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine7_twtpcon_ready & main_dram_ctrl_bankmachine7_trascon_ready)) begin
                main_dram_ctrl_bankmachine7_cmd_payload_is_cmd = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine7_trccon_ready) begin
                main_dram_ctrl_bankmachine7_cmd_payload_is_cmd = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
            main_dram_ctrl_bankmachine7_cmd_payload_is_cmd = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_cmd_payload_is_read = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine7_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine7_source_source_valid & main_dram_ctrl_bankmachine7_row_opened) & main_dram_ctrl_bankmachine7_row_hit)) begin
                    if (main_dram_ctrl_bankmachine7_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine7_cmd_payload_is_read = 1'd1;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_cmd_payload_is_write = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine7_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine7_source_source_valid & main_dram_ctrl_bankmachine7_row_opened) & main_dram_ctrl_bankmachine7_row_hit)) begin
                    if (main_dram_ctrl_bankmachine7_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine7_cmd_payload_is_write = 1'd1;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_timer_bankmachine7_next_value = 4'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine7_twtpcon_ready & main_dram_ctrl_bankmachine7_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine7_cmd_ready) begin
                    main_dram_ctrl_bankmachine7_timer_bankmachine7_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine7_twtpcon_ready & main_dram_ctrl_bankmachine7_trascon_ready)) begin
                main_dram_ctrl_bankmachine7_timer_bankmachine7_next_value = (main_dram_ctrl_csrstorage0_storage - 1'd1);
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine7_trccon_ready) begin
                if (main_dram_ctrl_bankmachine7_cmd_ready) begin
                    main_dram_ctrl_bankmachine7_timer_bankmachine7_next_value = (main_dram_ctrl_csrstorage1_storage - 1'd1);
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_req_wdata_ready = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine7_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine7_source_source_valid & main_dram_ctrl_bankmachine7_row_opened) & main_dram_ctrl_bankmachine7_row_hit)) begin
                    if (main_dram_ctrl_bankmachine7_source_source_payload_we) begin
                        main_dram_ctrl_bankmachine7_req_wdata_ready = main_dram_ctrl_bankmachine7_cmd_ready;
                    end else begin
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_timer_bankmachine7_next_value_ce = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine7_twtpcon_ready & main_dram_ctrl_bankmachine7_trascon_ready)) begin
                if (main_dram_ctrl_bankmachine7_cmd_ready) begin
                    main_dram_ctrl_bankmachine7_timer_bankmachine7_next_value_ce = 1'd1;
                end
            end
        end
        2'd2: begin
            if ((main_dram_ctrl_bankmachine7_twtpcon_ready & main_dram_ctrl_bankmachine7_trascon_ready)) begin
                main_dram_ctrl_bankmachine7_timer_bankmachine7_next_value_ce = 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine7_trccon_ready) begin
                if (main_dram_ctrl_bankmachine7_cmd_ready) begin
                    main_dram_ctrl_bankmachine7_timer_bankmachine7_next_value_ce = 1'd1;
                end
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_req_rdata_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine7_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine7_source_source_valid & main_dram_ctrl_bankmachine7_row_opened) & main_dram_ctrl_bankmachine7_row_hit)) begin
                    if (main_dram_ctrl_bankmachine7_source_source_payload_we) begin
                    end else begin
                        main_dram_ctrl_bankmachine7_req_rdata_valid = main_dram_ctrl_bankmachine7_cmd_ready;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_pre_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine7_twtpcon_ready & main_dram_ctrl_bankmachine7_trascon_ready)) begin
                main_dram_ctrl_bankmachine7_pre_n_addr_sel = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_row_col_n_addr_sel = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine7_trccon_ready) begin
                main_dram_ctrl_bankmachine7_row_col_n_addr_sel = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_refresh_gnt = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
            if (main_dram_ctrl_bankmachine7_twtpcon_ready) begin
                main_dram_ctrl_bankmachine7_refresh_gnt = 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_cmd_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
            if ((main_dram_ctrl_bankmachine7_twtpcon_ready & main_dram_ctrl_bankmachine7_trascon_ready)) begin
                main_dram_ctrl_bankmachine7_cmd_valid = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine7_trccon_ready) begin
                main_dram_ctrl_bankmachine7_cmd_valid = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (main_dram_ctrl_bankmachine7_refresh_req) begin
            end else begin
                if (((main_dram_ctrl_bankmachine7_source_source_valid & main_dram_ctrl_bankmachine7_row_opened) & main_dram_ctrl_bankmachine7_row_hit)) begin
                    main_dram_ctrl_bankmachine7_cmd_valid = 1'd1;
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_bankmachine7_row_open = 1'd0;
    case (builder_dramcoresoc_dramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (main_dram_ctrl_bankmachine7_trccon_ready) begin
                main_dram_ctrl_bankmachine7_row_open = 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
assign main_dram_ctrl_rdcmdphase = (main_ddrphy_rdphase_storage - 1'd1);
assign main_dram_ctrl_wrcmdphase = (main_ddrphy_wrphase_storage - 1'd1);
assign main_dram_ctrl_trrdcon_valid = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & ((main_dram_ctrl_choose_cmd_cmd_payload_ras & (~main_dram_ctrl_choose_cmd_cmd_payload_cas)) & (~main_dram_ctrl_choose_cmd_cmd_payload_we)));
assign main_dram_ctrl_tfawcon_valid = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & ((main_dram_ctrl_choose_cmd_cmd_payload_ras & (~main_dram_ctrl_choose_cmd_cmd_payload_cas)) & (~main_dram_ctrl_choose_cmd_cmd_payload_we)));
assign main_dram_ctrl_ras_allowed = (main_dram_ctrl_trrdcon_ready & main_dram_ctrl_tfawcon_ready);
assign main_dram_ctrl_tccdcon_valid = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & (main_dram_ctrl_choose_req_cmd_payload_is_write | main_dram_ctrl_choose_req_cmd_payload_is_read));
assign main_dram_ctrl_cas_allowed = main_dram_ctrl_tccdcon_ready;
assign main_dram_ctrl_twtrcon_init = ((main_dram_ctrl_csrstorage3_storage + 1'd1) + main_dram_ctrl_csrstorage7_storage);
assign main_dram_ctrl_twtrcon_valid = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_write);
assign main_dram_ctrl_read_available = ((((((((main_dram_ctrl_bankmachine0_cmd_valid & main_dram_ctrl_bankmachine0_cmd_payload_is_read) | (main_dram_ctrl_bankmachine1_cmd_valid & main_dram_ctrl_bankmachine1_cmd_payload_is_read)) | (main_dram_ctrl_bankmachine2_cmd_valid & main_dram_ctrl_bankmachine2_cmd_payload_is_read)) | (main_dram_ctrl_bankmachine3_cmd_valid & main_dram_ctrl_bankmachine3_cmd_payload_is_read)) | (main_dram_ctrl_bankmachine4_cmd_valid & main_dram_ctrl_bankmachine4_cmd_payload_is_read)) | (main_dram_ctrl_bankmachine5_cmd_valid & main_dram_ctrl_bankmachine5_cmd_payload_is_read)) | (main_dram_ctrl_bankmachine6_cmd_valid & main_dram_ctrl_bankmachine6_cmd_payload_is_read)) | (main_dram_ctrl_bankmachine7_cmd_valid & main_dram_ctrl_bankmachine7_cmd_payload_is_read));
assign main_dram_ctrl_write_available = ((((((((main_dram_ctrl_bankmachine0_cmd_valid & main_dram_ctrl_bankmachine0_cmd_payload_is_write) | (main_dram_ctrl_bankmachine1_cmd_valid & main_dram_ctrl_bankmachine1_cmd_payload_is_write)) | (main_dram_ctrl_bankmachine2_cmd_valid & main_dram_ctrl_bankmachine2_cmd_payload_is_write)) | (main_dram_ctrl_bankmachine3_cmd_valid & main_dram_ctrl_bankmachine3_cmd_payload_is_write)) | (main_dram_ctrl_bankmachine4_cmd_valid & main_dram_ctrl_bankmachine4_cmd_payload_is_write)) | (main_dram_ctrl_bankmachine5_cmd_valid & main_dram_ctrl_bankmachine5_cmd_payload_is_write)) | (main_dram_ctrl_bankmachine6_cmd_valid & main_dram_ctrl_bankmachine6_cmd_payload_is_write)) | (main_dram_ctrl_bankmachine7_cmd_valid & main_dram_ctrl_bankmachine7_cmd_payload_is_write));
assign main_dram_ctrl_max_time0 = (main_dram_ctrl_time0 == 1'd0);
assign main_dram_ctrl_max_time1 = (main_dram_ctrl_time1 == 1'd0);
assign main_dram_ctrl_bankmachine0_refresh_req = main_dram_ctrl_cmd_valid;
assign main_dram_ctrl_bankmachine1_refresh_req = main_dram_ctrl_cmd_valid;
assign main_dram_ctrl_bankmachine2_refresh_req = main_dram_ctrl_cmd_valid;
assign main_dram_ctrl_bankmachine3_refresh_req = main_dram_ctrl_cmd_valid;
assign main_dram_ctrl_bankmachine4_refresh_req = main_dram_ctrl_cmd_valid;
assign main_dram_ctrl_bankmachine5_refresh_req = main_dram_ctrl_cmd_valid;
assign main_dram_ctrl_bankmachine6_refresh_req = main_dram_ctrl_cmd_valid;
assign main_dram_ctrl_bankmachine7_refresh_req = main_dram_ctrl_cmd_valid;
assign main_dram_ctrl_go_to_refresh = (((((((main_dram_ctrl_bankmachine0_refresh_gnt & main_dram_ctrl_bankmachine1_refresh_gnt) & main_dram_ctrl_bankmachine2_refresh_gnt) & main_dram_ctrl_bankmachine3_refresh_gnt) & main_dram_ctrl_bankmachine4_refresh_gnt) & main_dram_ctrl_bankmachine5_refresh_gnt) & main_dram_ctrl_bankmachine6_refresh_gnt) & main_dram_ctrl_bankmachine7_refresh_gnt);
assign main_dram_ctrl_interface_rdata = {main_dram_ctrl_dfi_p7_rddata, main_dram_ctrl_dfi_p6_rddata, main_dram_ctrl_dfi_p5_rddata, main_dram_ctrl_dfi_p4_rddata, main_dram_ctrl_dfi_p3_rddata, main_dram_ctrl_dfi_p2_rddata, main_dram_ctrl_dfi_p1_rddata, main_dram_ctrl_dfi_p0_rddata};
assign main_dram_ctrl_interface_rdata_valid = {main_dram_ctrl_dfi_p7_rddata_valid, main_dram_ctrl_dfi_p6_rddata_valid, main_dram_ctrl_dfi_p5_rddata_valid, main_dram_ctrl_dfi_p4_rddata_valid, main_dram_ctrl_dfi_p3_rddata_valid, main_dram_ctrl_dfi_p2_rddata_valid, main_dram_ctrl_dfi_p1_rddata_valid, main_dram_ctrl_dfi_p0_rddata_valid};
assign {main_dram_ctrl_dfi_p7_wrdata, main_dram_ctrl_dfi_p6_wrdata, main_dram_ctrl_dfi_p5_wrdata, main_dram_ctrl_dfi_p4_wrdata, main_dram_ctrl_dfi_p3_wrdata, main_dram_ctrl_dfi_p2_wrdata, main_dram_ctrl_dfi_p1_wrdata, main_dram_ctrl_dfi_p0_wrdata} = main_dram_ctrl_interface_wdata;
assign {main_dram_ctrl_dfi_p7_wrdata, main_dram_ctrl_dfi_p6_wrdata, main_dram_ctrl_dfi_p5_wrdata, main_dram_ctrl_dfi_p4_wrdata, main_dram_ctrl_dfi_p3_wrdata, main_dram_ctrl_dfi_p2_wrdata, main_dram_ctrl_dfi_p1_wrdata, main_dram_ctrl_dfi_p0_wrdata} = main_dram_ctrl_interface_wdata;
assign {main_dram_ctrl_dfi_p7_wrdata, main_dram_ctrl_dfi_p6_wrdata, main_dram_ctrl_dfi_p5_wrdata, main_dram_ctrl_dfi_p4_wrdata, main_dram_ctrl_dfi_p3_wrdata, main_dram_ctrl_dfi_p2_wrdata, main_dram_ctrl_dfi_p1_wrdata, main_dram_ctrl_dfi_p0_wrdata} = main_dram_ctrl_interface_wdata;
assign {main_dram_ctrl_dfi_p7_wrdata, main_dram_ctrl_dfi_p6_wrdata, main_dram_ctrl_dfi_p5_wrdata, main_dram_ctrl_dfi_p4_wrdata, main_dram_ctrl_dfi_p3_wrdata, main_dram_ctrl_dfi_p2_wrdata, main_dram_ctrl_dfi_p1_wrdata, main_dram_ctrl_dfi_p0_wrdata} = main_dram_ctrl_interface_wdata;
assign {main_dram_ctrl_dfi_p7_wrdata, main_dram_ctrl_dfi_p6_wrdata, main_dram_ctrl_dfi_p5_wrdata, main_dram_ctrl_dfi_p4_wrdata, main_dram_ctrl_dfi_p3_wrdata, main_dram_ctrl_dfi_p2_wrdata, main_dram_ctrl_dfi_p1_wrdata, main_dram_ctrl_dfi_p0_wrdata} = main_dram_ctrl_interface_wdata;
assign {main_dram_ctrl_dfi_p7_wrdata, main_dram_ctrl_dfi_p6_wrdata, main_dram_ctrl_dfi_p5_wrdata, main_dram_ctrl_dfi_p4_wrdata, main_dram_ctrl_dfi_p3_wrdata, main_dram_ctrl_dfi_p2_wrdata, main_dram_ctrl_dfi_p1_wrdata, main_dram_ctrl_dfi_p0_wrdata} = main_dram_ctrl_interface_wdata;
assign {main_dram_ctrl_dfi_p7_wrdata, main_dram_ctrl_dfi_p6_wrdata, main_dram_ctrl_dfi_p5_wrdata, main_dram_ctrl_dfi_p4_wrdata, main_dram_ctrl_dfi_p3_wrdata, main_dram_ctrl_dfi_p2_wrdata, main_dram_ctrl_dfi_p1_wrdata, main_dram_ctrl_dfi_p0_wrdata} = main_dram_ctrl_interface_wdata;
assign {main_dram_ctrl_dfi_p7_wrdata, main_dram_ctrl_dfi_p6_wrdata, main_dram_ctrl_dfi_p5_wrdata, main_dram_ctrl_dfi_p4_wrdata, main_dram_ctrl_dfi_p3_wrdata, main_dram_ctrl_dfi_p2_wrdata, main_dram_ctrl_dfi_p1_wrdata, main_dram_ctrl_dfi_p0_wrdata} = main_dram_ctrl_interface_wdata;
assign {main_dram_ctrl_dfi_p7_wrdata_mask, main_dram_ctrl_dfi_p6_wrdata_mask, main_dram_ctrl_dfi_p5_wrdata_mask, main_dram_ctrl_dfi_p4_wrdata_mask, main_dram_ctrl_dfi_p3_wrdata_mask, main_dram_ctrl_dfi_p2_wrdata_mask, main_dram_ctrl_dfi_p1_wrdata_mask, main_dram_ctrl_dfi_p0_wrdata_mask} = (~main_dram_ctrl_interface_wdata_we);
assign {main_dram_ctrl_dfi_p7_wrdata_mask, main_dram_ctrl_dfi_p6_wrdata_mask, main_dram_ctrl_dfi_p5_wrdata_mask, main_dram_ctrl_dfi_p4_wrdata_mask, main_dram_ctrl_dfi_p3_wrdata_mask, main_dram_ctrl_dfi_p2_wrdata_mask, main_dram_ctrl_dfi_p1_wrdata_mask, main_dram_ctrl_dfi_p0_wrdata_mask} = (~main_dram_ctrl_interface_wdata_we);
assign {main_dram_ctrl_dfi_p7_wrdata_mask, main_dram_ctrl_dfi_p6_wrdata_mask, main_dram_ctrl_dfi_p5_wrdata_mask, main_dram_ctrl_dfi_p4_wrdata_mask, main_dram_ctrl_dfi_p3_wrdata_mask, main_dram_ctrl_dfi_p2_wrdata_mask, main_dram_ctrl_dfi_p1_wrdata_mask, main_dram_ctrl_dfi_p0_wrdata_mask} = (~main_dram_ctrl_interface_wdata_we);
assign {main_dram_ctrl_dfi_p7_wrdata_mask, main_dram_ctrl_dfi_p6_wrdata_mask, main_dram_ctrl_dfi_p5_wrdata_mask, main_dram_ctrl_dfi_p4_wrdata_mask, main_dram_ctrl_dfi_p3_wrdata_mask, main_dram_ctrl_dfi_p2_wrdata_mask, main_dram_ctrl_dfi_p1_wrdata_mask, main_dram_ctrl_dfi_p0_wrdata_mask} = (~main_dram_ctrl_interface_wdata_we);
assign {main_dram_ctrl_dfi_p7_wrdata_mask, main_dram_ctrl_dfi_p6_wrdata_mask, main_dram_ctrl_dfi_p5_wrdata_mask, main_dram_ctrl_dfi_p4_wrdata_mask, main_dram_ctrl_dfi_p3_wrdata_mask, main_dram_ctrl_dfi_p2_wrdata_mask, main_dram_ctrl_dfi_p1_wrdata_mask, main_dram_ctrl_dfi_p0_wrdata_mask} = (~main_dram_ctrl_interface_wdata_we);
assign {main_dram_ctrl_dfi_p7_wrdata_mask, main_dram_ctrl_dfi_p6_wrdata_mask, main_dram_ctrl_dfi_p5_wrdata_mask, main_dram_ctrl_dfi_p4_wrdata_mask, main_dram_ctrl_dfi_p3_wrdata_mask, main_dram_ctrl_dfi_p2_wrdata_mask, main_dram_ctrl_dfi_p1_wrdata_mask, main_dram_ctrl_dfi_p0_wrdata_mask} = (~main_dram_ctrl_interface_wdata_we);
assign {main_dram_ctrl_dfi_p7_wrdata_mask, main_dram_ctrl_dfi_p6_wrdata_mask, main_dram_ctrl_dfi_p5_wrdata_mask, main_dram_ctrl_dfi_p4_wrdata_mask, main_dram_ctrl_dfi_p3_wrdata_mask, main_dram_ctrl_dfi_p2_wrdata_mask, main_dram_ctrl_dfi_p1_wrdata_mask, main_dram_ctrl_dfi_p0_wrdata_mask} = (~main_dram_ctrl_interface_wdata_we);
assign {main_dram_ctrl_dfi_p7_wrdata_mask, main_dram_ctrl_dfi_p6_wrdata_mask, main_dram_ctrl_dfi_p5_wrdata_mask, main_dram_ctrl_dfi_p4_wrdata_mask, main_dram_ctrl_dfi_p3_wrdata_mask, main_dram_ctrl_dfi_p2_wrdata_mask, main_dram_ctrl_dfi_p1_wrdata_mask, main_dram_ctrl_dfi_p0_wrdata_mask} = (~main_dram_ctrl_interface_wdata_we);
always @(*) begin
	main_dram_ctrl_choose_cmd_valids = 8'd0;
    main_dram_ctrl_choose_cmd_valids[0] = (main_dram_ctrl_bankmachine0_cmd_valid & (((main_dram_ctrl_bankmachine0_cmd_payload_is_cmd & main_dram_ctrl_choose_cmd_want_cmds) & ((~((main_dram_ctrl_bankmachine0_cmd_payload_ras & (~main_dram_ctrl_bankmachine0_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine0_cmd_payload_we))) | main_dram_ctrl_choose_cmd_want_activates)) | ((main_dram_ctrl_bankmachine0_cmd_payload_is_read == main_dram_ctrl_choose_cmd_want_reads) & (main_dram_ctrl_bankmachine0_cmd_payload_is_write == main_dram_ctrl_choose_cmd_want_writes))));
    main_dram_ctrl_choose_cmd_valids[1] = (main_dram_ctrl_bankmachine1_cmd_valid & (((main_dram_ctrl_bankmachine1_cmd_payload_is_cmd & main_dram_ctrl_choose_cmd_want_cmds) & ((~((main_dram_ctrl_bankmachine1_cmd_payload_ras & (~main_dram_ctrl_bankmachine1_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine1_cmd_payload_we))) | main_dram_ctrl_choose_cmd_want_activates)) | ((main_dram_ctrl_bankmachine1_cmd_payload_is_read == main_dram_ctrl_choose_cmd_want_reads) & (main_dram_ctrl_bankmachine1_cmd_payload_is_write == main_dram_ctrl_choose_cmd_want_writes))));
    main_dram_ctrl_choose_cmd_valids[2] = (main_dram_ctrl_bankmachine2_cmd_valid & (((main_dram_ctrl_bankmachine2_cmd_payload_is_cmd & main_dram_ctrl_choose_cmd_want_cmds) & ((~((main_dram_ctrl_bankmachine2_cmd_payload_ras & (~main_dram_ctrl_bankmachine2_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine2_cmd_payload_we))) | main_dram_ctrl_choose_cmd_want_activates)) | ((main_dram_ctrl_bankmachine2_cmd_payload_is_read == main_dram_ctrl_choose_cmd_want_reads) & (main_dram_ctrl_bankmachine2_cmd_payload_is_write == main_dram_ctrl_choose_cmd_want_writes))));
    main_dram_ctrl_choose_cmd_valids[3] = (main_dram_ctrl_bankmachine3_cmd_valid & (((main_dram_ctrl_bankmachine3_cmd_payload_is_cmd & main_dram_ctrl_choose_cmd_want_cmds) & ((~((main_dram_ctrl_bankmachine3_cmd_payload_ras & (~main_dram_ctrl_bankmachine3_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine3_cmd_payload_we))) | main_dram_ctrl_choose_cmd_want_activates)) | ((main_dram_ctrl_bankmachine3_cmd_payload_is_read == main_dram_ctrl_choose_cmd_want_reads) & (main_dram_ctrl_bankmachine3_cmd_payload_is_write == main_dram_ctrl_choose_cmd_want_writes))));
    main_dram_ctrl_choose_cmd_valids[4] = (main_dram_ctrl_bankmachine4_cmd_valid & (((main_dram_ctrl_bankmachine4_cmd_payload_is_cmd & main_dram_ctrl_choose_cmd_want_cmds) & ((~((main_dram_ctrl_bankmachine4_cmd_payload_ras & (~main_dram_ctrl_bankmachine4_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine4_cmd_payload_we))) | main_dram_ctrl_choose_cmd_want_activates)) | ((main_dram_ctrl_bankmachine4_cmd_payload_is_read == main_dram_ctrl_choose_cmd_want_reads) & (main_dram_ctrl_bankmachine4_cmd_payload_is_write == main_dram_ctrl_choose_cmd_want_writes))));
    main_dram_ctrl_choose_cmd_valids[5] = (main_dram_ctrl_bankmachine5_cmd_valid & (((main_dram_ctrl_bankmachine5_cmd_payload_is_cmd & main_dram_ctrl_choose_cmd_want_cmds) & ((~((main_dram_ctrl_bankmachine5_cmd_payload_ras & (~main_dram_ctrl_bankmachine5_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine5_cmd_payload_we))) | main_dram_ctrl_choose_cmd_want_activates)) | ((main_dram_ctrl_bankmachine5_cmd_payload_is_read == main_dram_ctrl_choose_cmd_want_reads) & (main_dram_ctrl_bankmachine5_cmd_payload_is_write == main_dram_ctrl_choose_cmd_want_writes))));
    main_dram_ctrl_choose_cmd_valids[6] = (main_dram_ctrl_bankmachine6_cmd_valid & (((main_dram_ctrl_bankmachine6_cmd_payload_is_cmd & main_dram_ctrl_choose_cmd_want_cmds) & ((~((main_dram_ctrl_bankmachine6_cmd_payload_ras & (~main_dram_ctrl_bankmachine6_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine6_cmd_payload_we))) | main_dram_ctrl_choose_cmd_want_activates)) | ((main_dram_ctrl_bankmachine6_cmd_payload_is_read == main_dram_ctrl_choose_cmd_want_reads) & (main_dram_ctrl_bankmachine6_cmd_payload_is_write == main_dram_ctrl_choose_cmd_want_writes))));
    main_dram_ctrl_choose_cmd_valids[7] = (main_dram_ctrl_bankmachine7_cmd_valid & (((main_dram_ctrl_bankmachine7_cmd_payload_is_cmd & main_dram_ctrl_choose_cmd_want_cmds) & ((~((main_dram_ctrl_bankmachine7_cmd_payload_ras & (~main_dram_ctrl_bankmachine7_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine7_cmd_payload_we))) | main_dram_ctrl_choose_cmd_want_activates)) | ((main_dram_ctrl_bankmachine7_cmd_payload_is_read == main_dram_ctrl_choose_cmd_want_reads) & (main_dram_ctrl_bankmachine7_cmd_payload_is_write == main_dram_ctrl_choose_cmd_want_writes))));
end
assign main_dram_ctrl_choose_cmd_request = main_dram_ctrl_choose_cmd_valids;
assign main_dram_ctrl_choose_cmd_cmd_valid = builder_rhs_array_muxed9;
assign main_dram_ctrl_choose_cmd_cmd_payload_a = builder_rhs_array_muxed10;
assign main_dram_ctrl_choose_cmd_cmd_payload_ba = builder_rhs_array_muxed11;
assign main_dram_ctrl_choose_cmd_cmd_payload_is_read = builder_rhs_array_muxed12;
assign main_dram_ctrl_choose_cmd_cmd_payload_is_write = builder_rhs_array_muxed13;
assign main_dram_ctrl_choose_cmd_cmd_payload_is_cmd = builder_rhs_array_muxed14;
always @(*) begin
	main_dram_ctrl_choose_cmd_cmd_payload_cas = 1'd0;
    if (main_dram_ctrl_choose_cmd_cmd_valid) begin
        main_dram_ctrl_choose_cmd_cmd_payload_cas = builder_t_array_muxed0;
    end
end
always @(*) begin
	main_dram_ctrl_choose_cmd_cmd_payload_ras = 1'd0;
    if (main_dram_ctrl_choose_cmd_cmd_valid) begin
        main_dram_ctrl_choose_cmd_cmd_payload_ras = builder_t_array_muxed1;
    end
end
always @(*) begin
	main_dram_ctrl_choose_cmd_cmd_payload_we = 1'd0;
    if (main_dram_ctrl_choose_cmd_cmd_valid) begin
        main_dram_ctrl_choose_cmd_cmd_payload_we = builder_t_array_muxed2;
    end
end
always @(*) begin
	main_dram_ctrl_bankmachine0_cmd_ready = 1'd0;
    if (((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & (main_dram_ctrl_choose_cmd_grant == 1'd0))) begin
        main_dram_ctrl_bankmachine0_cmd_ready = 1'd1;
    end
    if (((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & (main_dram_ctrl_choose_req_grant == 1'd0))) begin
        main_dram_ctrl_bankmachine0_cmd_ready = 1'd1;
    end
end
always @(*) begin
	main_dram_ctrl_bankmachine1_cmd_ready = 1'd0;
    if (((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & (main_dram_ctrl_choose_cmd_grant == 1'd1))) begin
        main_dram_ctrl_bankmachine1_cmd_ready = 1'd1;
    end
    if (((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & (main_dram_ctrl_choose_req_grant == 1'd1))) begin
        main_dram_ctrl_bankmachine1_cmd_ready = 1'd1;
    end
end
always @(*) begin
	main_dram_ctrl_bankmachine2_cmd_ready = 1'd0;
    if (((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & (main_dram_ctrl_choose_cmd_grant == 2'd2))) begin
        main_dram_ctrl_bankmachine2_cmd_ready = 1'd1;
    end
    if (((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & (main_dram_ctrl_choose_req_grant == 2'd2))) begin
        main_dram_ctrl_bankmachine2_cmd_ready = 1'd1;
    end
end
always @(*) begin
	main_dram_ctrl_bankmachine3_cmd_ready = 1'd0;
    if (((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & (main_dram_ctrl_choose_cmd_grant == 2'd3))) begin
        main_dram_ctrl_bankmachine3_cmd_ready = 1'd1;
    end
    if (((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & (main_dram_ctrl_choose_req_grant == 2'd3))) begin
        main_dram_ctrl_bankmachine3_cmd_ready = 1'd1;
    end
end
always @(*) begin
	main_dram_ctrl_bankmachine4_cmd_ready = 1'd0;
    if (((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & (main_dram_ctrl_choose_cmd_grant == 3'd4))) begin
        main_dram_ctrl_bankmachine4_cmd_ready = 1'd1;
    end
    if (((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & (main_dram_ctrl_choose_req_grant == 3'd4))) begin
        main_dram_ctrl_bankmachine4_cmd_ready = 1'd1;
    end
end
always @(*) begin
	main_dram_ctrl_bankmachine5_cmd_ready = 1'd0;
    if (((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & (main_dram_ctrl_choose_cmd_grant == 3'd5))) begin
        main_dram_ctrl_bankmachine5_cmd_ready = 1'd1;
    end
    if (((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & (main_dram_ctrl_choose_req_grant == 3'd5))) begin
        main_dram_ctrl_bankmachine5_cmd_ready = 1'd1;
    end
end
always @(*) begin
	main_dram_ctrl_bankmachine6_cmd_ready = 1'd0;
    if (((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & (main_dram_ctrl_choose_cmd_grant == 3'd6))) begin
        main_dram_ctrl_bankmachine6_cmd_ready = 1'd1;
    end
    if (((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & (main_dram_ctrl_choose_req_grant == 3'd6))) begin
        main_dram_ctrl_bankmachine6_cmd_ready = 1'd1;
    end
end
always @(*) begin
	main_dram_ctrl_bankmachine7_cmd_ready = 1'd0;
    if (((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & (main_dram_ctrl_choose_cmd_grant == 3'd7))) begin
        main_dram_ctrl_bankmachine7_cmd_ready = 1'd1;
    end
    if (((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & (main_dram_ctrl_choose_req_grant == 3'd7))) begin
        main_dram_ctrl_bankmachine7_cmd_ready = 1'd1;
    end
end
assign main_dram_ctrl_choose_cmd_ce = (main_dram_ctrl_choose_cmd_cmd_ready | (~main_dram_ctrl_choose_cmd_cmd_valid));
always @(*) begin
	main_dram_ctrl_choose_req_valids = 8'd0;
    main_dram_ctrl_choose_req_valids[0] = (main_dram_ctrl_bankmachine0_cmd_valid & (((main_dram_ctrl_bankmachine0_cmd_payload_is_cmd & main_dram_ctrl_choose_req_want_cmds) & ((~((main_dram_ctrl_bankmachine0_cmd_payload_ras & (~main_dram_ctrl_bankmachine0_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine0_cmd_payload_we))) | main_dram_ctrl_choose_req_want_activates)) | ((main_dram_ctrl_bankmachine0_cmd_payload_is_read == main_dram_ctrl_choose_req_want_reads) & (main_dram_ctrl_bankmachine0_cmd_payload_is_write == main_dram_ctrl_choose_req_want_writes))));
    main_dram_ctrl_choose_req_valids[1] = (main_dram_ctrl_bankmachine1_cmd_valid & (((main_dram_ctrl_bankmachine1_cmd_payload_is_cmd & main_dram_ctrl_choose_req_want_cmds) & ((~((main_dram_ctrl_bankmachine1_cmd_payload_ras & (~main_dram_ctrl_bankmachine1_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine1_cmd_payload_we))) | main_dram_ctrl_choose_req_want_activates)) | ((main_dram_ctrl_bankmachine1_cmd_payload_is_read == main_dram_ctrl_choose_req_want_reads) & (main_dram_ctrl_bankmachine1_cmd_payload_is_write == main_dram_ctrl_choose_req_want_writes))));
    main_dram_ctrl_choose_req_valids[2] = (main_dram_ctrl_bankmachine2_cmd_valid & (((main_dram_ctrl_bankmachine2_cmd_payload_is_cmd & main_dram_ctrl_choose_req_want_cmds) & ((~((main_dram_ctrl_bankmachine2_cmd_payload_ras & (~main_dram_ctrl_bankmachine2_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine2_cmd_payload_we))) | main_dram_ctrl_choose_req_want_activates)) | ((main_dram_ctrl_bankmachine2_cmd_payload_is_read == main_dram_ctrl_choose_req_want_reads) & (main_dram_ctrl_bankmachine2_cmd_payload_is_write == main_dram_ctrl_choose_req_want_writes))));
    main_dram_ctrl_choose_req_valids[3] = (main_dram_ctrl_bankmachine3_cmd_valid & (((main_dram_ctrl_bankmachine3_cmd_payload_is_cmd & main_dram_ctrl_choose_req_want_cmds) & ((~((main_dram_ctrl_bankmachine3_cmd_payload_ras & (~main_dram_ctrl_bankmachine3_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine3_cmd_payload_we))) | main_dram_ctrl_choose_req_want_activates)) | ((main_dram_ctrl_bankmachine3_cmd_payload_is_read == main_dram_ctrl_choose_req_want_reads) & (main_dram_ctrl_bankmachine3_cmd_payload_is_write == main_dram_ctrl_choose_req_want_writes))));
    main_dram_ctrl_choose_req_valids[4] = (main_dram_ctrl_bankmachine4_cmd_valid & (((main_dram_ctrl_bankmachine4_cmd_payload_is_cmd & main_dram_ctrl_choose_req_want_cmds) & ((~((main_dram_ctrl_bankmachine4_cmd_payload_ras & (~main_dram_ctrl_bankmachine4_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine4_cmd_payload_we))) | main_dram_ctrl_choose_req_want_activates)) | ((main_dram_ctrl_bankmachine4_cmd_payload_is_read == main_dram_ctrl_choose_req_want_reads) & (main_dram_ctrl_bankmachine4_cmd_payload_is_write == main_dram_ctrl_choose_req_want_writes))));
    main_dram_ctrl_choose_req_valids[5] = (main_dram_ctrl_bankmachine5_cmd_valid & (((main_dram_ctrl_bankmachine5_cmd_payload_is_cmd & main_dram_ctrl_choose_req_want_cmds) & ((~((main_dram_ctrl_bankmachine5_cmd_payload_ras & (~main_dram_ctrl_bankmachine5_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine5_cmd_payload_we))) | main_dram_ctrl_choose_req_want_activates)) | ((main_dram_ctrl_bankmachine5_cmd_payload_is_read == main_dram_ctrl_choose_req_want_reads) & (main_dram_ctrl_bankmachine5_cmd_payload_is_write == main_dram_ctrl_choose_req_want_writes))));
    main_dram_ctrl_choose_req_valids[6] = (main_dram_ctrl_bankmachine6_cmd_valid & (((main_dram_ctrl_bankmachine6_cmd_payload_is_cmd & main_dram_ctrl_choose_req_want_cmds) & ((~((main_dram_ctrl_bankmachine6_cmd_payload_ras & (~main_dram_ctrl_bankmachine6_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine6_cmd_payload_we))) | main_dram_ctrl_choose_req_want_activates)) | ((main_dram_ctrl_bankmachine6_cmd_payload_is_read == main_dram_ctrl_choose_req_want_reads) & (main_dram_ctrl_bankmachine6_cmd_payload_is_write == main_dram_ctrl_choose_req_want_writes))));
    main_dram_ctrl_choose_req_valids[7] = (main_dram_ctrl_bankmachine7_cmd_valid & (((main_dram_ctrl_bankmachine7_cmd_payload_is_cmd & main_dram_ctrl_choose_req_want_cmds) & ((~((main_dram_ctrl_bankmachine7_cmd_payload_ras & (~main_dram_ctrl_bankmachine7_cmd_payload_cas)) & (~main_dram_ctrl_bankmachine7_cmd_payload_we))) | main_dram_ctrl_choose_req_want_activates)) | ((main_dram_ctrl_bankmachine7_cmd_payload_is_read == main_dram_ctrl_choose_req_want_reads) & (main_dram_ctrl_bankmachine7_cmd_payload_is_write == main_dram_ctrl_choose_req_want_writes))));
end
assign main_dram_ctrl_choose_req_request = main_dram_ctrl_choose_req_valids;
assign main_dram_ctrl_choose_req_cmd_valid = builder_rhs_array_muxed15;
assign main_dram_ctrl_choose_req_cmd_payload_a = builder_rhs_array_muxed16;
assign main_dram_ctrl_choose_req_cmd_payload_ba = builder_rhs_array_muxed17;
assign main_dram_ctrl_choose_req_cmd_payload_is_read = builder_rhs_array_muxed18;
assign main_dram_ctrl_choose_req_cmd_payload_is_write = builder_rhs_array_muxed19;
assign main_dram_ctrl_choose_req_cmd_payload_is_cmd = builder_rhs_array_muxed20;
always @(*) begin
	main_dram_ctrl_choose_req_cmd_payload_cas = 1'd0;
    if (main_dram_ctrl_choose_req_cmd_valid) begin
        main_dram_ctrl_choose_req_cmd_payload_cas = builder_t_array_muxed3;
    end
end
always @(*) begin
	main_dram_ctrl_choose_req_cmd_payload_ras = 1'd0;
    if (main_dram_ctrl_choose_req_cmd_valid) begin
        main_dram_ctrl_choose_req_cmd_payload_ras = builder_t_array_muxed4;
    end
end
always @(*) begin
	main_dram_ctrl_choose_req_cmd_payload_we = 1'd0;
    if (main_dram_ctrl_choose_req_cmd_valid) begin
        main_dram_ctrl_choose_req_cmd_payload_we = builder_t_array_muxed5;
    end
end
assign main_dram_ctrl_choose_req_ce = (main_dram_ctrl_choose_req_cmd_ready | (~main_dram_ctrl_choose_req_cmd_valid));
assign main_dram_ctrl_dfi_p0_reset_n = 1'd1;
assign main_dram_ctrl_dfi_p0_cke = {1{main_dram_ctrl_steerer0}};
assign main_dram_ctrl_dfi_p0_odt = (~main_dram_ctrl_dfi_p0_we_n);
assign main_dram_ctrl_dfi_p1_reset_n = 1'd1;
assign main_dram_ctrl_dfi_p1_cke = {1{main_dram_ctrl_steerer1}};
assign main_dram_ctrl_dfi_p1_odt = (~main_dram_ctrl_dfi_p1_we_n);
assign main_dram_ctrl_dfi_p2_reset_n = 1'd1;
assign main_dram_ctrl_dfi_p2_cke = {1{main_dram_ctrl_steerer2}};
assign main_dram_ctrl_dfi_p2_odt = (~main_dram_ctrl_dfi_p2_we_n);
assign main_dram_ctrl_dfi_p3_reset_n = 1'd1;
assign main_dram_ctrl_dfi_p3_cke = {1{main_dram_ctrl_steerer3}};
assign main_dram_ctrl_dfi_p3_odt = (~main_dram_ctrl_dfi_p3_we_n);
assign main_dram_ctrl_dfi_p4_reset_n = 1'd1;
assign main_dram_ctrl_dfi_p4_cke = {1{main_dram_ctrl_steerer4}};
assign main_dram_ctrl_dfi_p4_odt = (~main_dram_ctrl_dfi_p4_we_n);
assign main_dram_ctrl_dfi_p5_reset_n = 1'd1;
assign main_dram_ctrl_dfi_p5_cke = {1{main_dram_ctrl_steerer5}};
assign main_dram_ctrl_dfi_p5_odt = (~main_dram_ctrl_dfi_p5_we_n);
assign main_dram_ctrl_dfi_p6_reset_n = 1'd1;
assign main_dram_ctrl_dfi_p6_cke = {1{main_dram_ctrl_steerer6}};
assign main_dram_ctrl_dfi_p6_odt = (~main_dram_ctrl_dfi_p6_we_n);
assign main_dram_ctrl_dfi_p7_reset_n = 1'd1;
assign main_dram_ctrl_dfi_p7_cke = {1{main_dram_ctrl_steerer7}};
assign main_dram_ctrl_dfi_p7_odt = (~main_dram_ctrl_dfi_p7_we_n);
assign main_dram_ctrl_tfawcon_handshake = (main_dram_ctrl_tfawcon_valid & main_dram_ctrl_tfawcon_ready);
assign main_dram_ctrl_tfawcon_tfaw_range_almost_last_bit = {main_dram_ctrl_tfawcon_shift_window[main_dram_ctrl_tfawcon_access]};
always @(*) begin
	builder_dramcoresoc_dramcore_multiplexer_next_state = 4'd0;
    builder_dramcoresoc_dramcore_multiplexer_next_state = builder_dramcoresoc_dramcore_multiplexer_state;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            if (main_dram_ctrl_read_available) begin
                if (((~main_dram_ctrl_write_available) | main_dram_ctrl_max_time1)) begin
                    builder_dramcoresoc_dramcore_multiplexer_next_state = 2'd3;
                end
            end
            if (main_dram_ctrl_go_to_refresh) begin
                builder_dramcoresoc_dramcore_multiplexer_next_state = 2'd2;
            end
        end
        2'd2: begin
            if (main_dram_ctrl_cmd_last) begin
                builder_dramcoresoc_dramcore_multiplexer_next_state = 1'd0;
            end
        end
        2'd3: begin
            if (main_dram_ctrl_twtrcon_ready) begin
                builder_dramcoresoc_dramcore_multiplexer_next_state = 1'd0;
            end
        end
        3'd4: begin
            builder_dramcoresoc_dramcore_multiplexer_next_state = 3'd5;
        end
        3'd5: begin
            builder_dramcoresoc_dramcore_multiplexer_next_state = 3'd6;
        end
        3'd6: begin
            builder_dramcoresoc_dramcore_multiplexer_next_state = 3'd7;
        end
        3'd7: begin
            builder_dramcoresoc_dramcore_multiplexer_next_state = 4'd8;
        end
        4'd8: begin
            builder_dramcoresoc_dramcore_multiplexer_next_state = 4'd9;
        end
        4'd9: begin
            builder_dramcoresoc_dramcore_multiplexer_next_state = 4'd10;
        end
        4'd10: begin
            builder_dramcoresoc_dramcore_multiplexer_next_state = 4'd11;
        end
        4'd11: begin
            builder_dramcoresoc_dramcore_multiplexer_next_state = 4'd12;
        end
        4'd12: begin
            builder_dramcoresoc_dramcore_multiplexer_next_state = 1'd1;
        end
        default: begin
            if (main_dram_ctrl_write_available) begin
                if (((~main_dram_ctrl_read_available) | main_dram_ctrl_max_time0)) begin
                    builder_dramcoresoc_dramcore_multiplexer_next_state = 3'd4;
                end
            end
            if (main_dram_ctrl_go_to_refresh) begin
                builder_dramcoresoc_dramcore_multiplexer_next_state = 2'd2;
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_choose_cmd_cmd_ready = 1'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            if (1'd0) begin
            end else begin
                main_dram_ctrl_choose_cmd_cmd_ready = ((~((main_dram_ctrl_choose_cmd_cmd_payload_ras & (~main_dram_ctrl_choose_cmd_cmd_payload_cas)) & (~main_dram_ctrl_choose_cmd_cmd_payload_we))) | main_dram_ctrl_ras_allowed);
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
            if (1'd0) begin
            end else begin
                main_dram_ctrl_choose_cmd_cmd_ready = ((~((main_dram_ctrl_choose_cmd_cmd_payload_ras & (~main_dram_ctrl_choose_cmd_cmd_payload_cas)) & (~main_dram_ctrl_choose_cmd_cmd_payload_we))) | main_dram_ctrl_ras_allowed);
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_choose_req_want_reads = 1'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
            main_dram_ctrl_choose_req_want_reads = 1'd1;
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_steerer_sel5 = 2'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            main_dram_ctrl_steerer_sel5 = 1'd0;
            if ((main_ddrphy_wrphase_storage == 3'd5)) begin
                main_dram_ctrl_steerer_sel5 = 2'd2;
            end
            if ((main_dram_ctrl_wrcmdphase == 3'd5)) begin
                main_dram_ctrl_steerer_sel5 = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
            main_dram_ctrl_steerer_sel5 = 1'd0;
            if ((main_ddrphy_rdphase_storage == 3'd5)) begin
                main_dram_ctrl_steerer_sel5 = 2'd2;
            end
            if ((main_dram_ctrl_rdcmdphase == 3'd5)) begin
                main_dram_ctrl_steerer_sel5 = 1'd1;
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_steerer_sel6 = 2'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            main_dram_ctrl_steerer_sel6 = 1'd0;
            if ((main_ddrphy_wrphase_storage == 3'd6)) begin
                main_dram_ctrl_steerer_sel6 = 2'd2;
            end
            if ((main_dram_ctrl_wrcmdphase == 3'd6)) begin
                main_dram_ctrl_steerer_sel6 = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
            main_dram_ctrl_steerer_sel6 = 1'd0;
            if ((main_ddrphy_rdphase_storage == 3'd6)) begin
                main_dram_ctrl_steerer_sel6 = 2'd2;
            end
            if ((main_dram_ctrl_rdcmdphase == 3'd6)) begin
                main_dram_ctrl_steerer_sel6 = 1'd1;
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_steerer_sel7 = 2'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            main_dram_ctrl_steerer_sel7 = 1'd0;
            if ((main_ddrphy_wrphase_storage == 3'd7)) begin
                main_dram_ctrl_steerer_sel7 = 2'd2;
            end
            if ((main_dram_ctrl_wrcmdphase == 3'd7)) begin
                main_dram_ctrl_steerer_sel7 = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
            main_dram_ctrl_steerer_sel7 = 1'd0;
            if ((main_ddrphy_rdphase_storage == 3'd7)) begin
                main_dram_ctrl_steerer_sel7 = 2'd2;
            end
            if ((main_dram_ctrl_rdcmdphase == 3'd7)) begin
                main_dram_ctrl_steerer_sel7 = 1'd1;
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_choose_req_want_writes = 1'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            main_dram_ctrl_choose_req_want_writes = 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_steerer_sel3 = 2'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            main_dram_ctrl_steerer_sel3 = 1'd0;
            if ((main_ddrphy_wrphase_storage == 2'd3)) begin
                main_dram_ctrl_steerer_sel3 = 2'd2;
            end
            if ((main_dram_ctrl_wrcmdphase == 2'd3)) begin
                main_dram_ctrl_steerer_sel3 = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
            main_dram_ctrl_steerer_sel3 = 1'd0;
            if ((main_ddrphy_rdphase_storage == 2'd3)) begin
                main_dram_ctrl_steerer_sel3 = 2'd2;
            end
            if ((main_dram_ctrl_rdcmdphase == 2'd3)) begin
                main_dram_ctrl_steerer_sel3 = 1'd1;
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_choose_req_cmd_ready = 1'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            if (1'd0) begin
                main_dram_ctrl_choose_req_cmd_ready = (main_dram_ctrl_cas_allowed & ((~((main_dram_ctrl_choose_req_cmd_payload_ras & (~main_dram_ctrl_choose_req_cmd_payload_cas)) & (~main_dram_ctrl_choose_req_cmd_payload_we))) | main_dram_ctrl_ras_allowed));
            end else begin
                main_dram_ctrl_choose_req_cmd_ready = main_dram_ctrl_cas_allowed;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
            if (1'd0) begin
                main_dram_ctrl_choose_req_cmd_ready = (main_dram_ctrl_cas_allowed & ((~((main_dram_ctrl_choose_req_cmd_payload_ras & (~main_dram_ctrl_choose_req_cmd_payload_cas)) & (~main_dram_ctrl_choose_req_cmd_payload_we))) | main_dram_ctrl_ras_allowed));
            end else begin
                main_dram_ctrl_choose_req_cmd_ready = main_dram_ctrl_cas_allowed;
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_en0 = 1'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
            main_dram_ctrl_en0 = 1'd1;
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_cmd_ready = 1'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
        end
        2'd2: begin
            main_dram_ctrl_cmd_ready = 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_steerer_sel0 = 2'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            main_dram_ctrl_steerer_sel0 = 1'd0;
            if ((main_ddrphy_wrphase_storage == 1'd0)) begin
                main_dram_ctrl_steerer_sel0 = 2'd2;
            end
            if ((main_dram_ctrl_wrcmdphase == 1'd0)) begin
                main_dram_ctrl_steerer_sel0 = 1'd1;
            end
        end
        2'd2: begin
            main_dram_ctrl_steerer_sel0 = 2'd3;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
            main_dram_ctrl_steerer_sel0 = 1'd0;
            if ((main_ddrphy_rdphase_storage == 1'd0)) begin
                main_dram_ctrl_steerer_sel0 = 2'd2;
            end
            if ((main_dram_ctrl_rdcmdphase == 1'd0)) begin
                main_dram_ctrl_steerer_sel0 = 1'd1;
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_steerer_sel1 = 2'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            main_dram_ctrl_steerer_sel1 = 1'd0;
            if ((main_ddrphy_wrphase_storage == 1'd1)) begin
                main_dram_ctrl_steerer_sel1 = 2'd2;
            end
            if ((main_dram_ctrl_wrcmdphase == 1'd1)) begin
                main_dram_ctrl_steerer_sel1 = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
            main_dram_ctrl_steerer_sel1 = 1'd0;
            if ((main_ddrphy_rdphase_storage == 1'd1)) begin
                main_dram_ctrl_steerer_sel1 = 2'd2;
            end
            if ((main_dram_ctrl_rdcmdphase == 1'd1)) begin
                main_dram_ctrl_steerer_sel1 = 1'd1;
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_en1 = 1'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            main_dram_ctrl_en1 = 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_steerer_sel2 = 2'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            main_dram_ctrl_steerer_sel2 = 1'd0;
            if ((main_ddrphy_wrphase_storage == 2'd2)) begin
                main_dram_ctrl_steerer_sel2 = 2'd2;
            end
            if ((main_dram_ctrl_wrcmdphase == 2'd2)) begin
                main_dram_ctrl_steerer_sel2 = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
            main_dram_ctrl_steerer_sel2 = 1'd0;
            if ((main_ddrphy_rdphase_storage == 2'd2)) begin
                main_dram_ctrl_steerer_sel2 = 2'd2;
            end
            if ((main_dram_ctrl_rdcmdphase == 2'd2)) begin
                main_dram_ctrl_steerer_sel2 = 1'd1;
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_choose_cmd_want_activates = 1'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            if (1'd0) begin
            end else begin
                main_dram_ctrl_choose_cmd_want_activates = main_dram_ctrl_ras_allowed;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
            if (1'd0) begin
            end else begin
                main_dram_ctrl_choose_cmd_want_activates = main_dram_ctrl_ras_allowed;
            end
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_steerer_sel4 = 2'd0;
    case (builder_dramcoresoc_dramcore_multiplexer_state)
        1'd1: begin
            main_dram_ctrl_steerer_sel4 = 1'd0;
            if ((main_ddrphy_wrphase_storage == 3'd4)) begin
                main_dram_ctrl_steerer_sel4 = 2'd2;
            end
            if ((main_dram_ctrl_wrcmdphase == 3'd4)) begin
                main_dram_ctrl_steerer_sel4 = 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        4'd11: begin
        end
        4'd12: begin
        end
        default: begin
            main_dram_ctrl_steerer_sel4 = 1'd0;
            if ((main_ddrphy_rdphase_storage == 3'd4)) begin
                main_dram_ctrl_steerer_sel4 = 2'd2;
            end
            if ((main_dram_ctrl_rdcmdphase == 3'd4)) begin
                main_dram_ctrl_steerer_sel4 = 1'd1;
            end
        end
    endcase
end
assign builder_dramcoresoc_dramcore_roundrobin0_request = {(((main_port_cmd_payload_addr[8:6] == 1'd0) & (~(((((((builder_dramcoresoc_dramcore_locked0 | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_dramcoresoc_dramcore_roundrobin0_ce = ((~main_dram_ctrl_interface_bank0_valid) & (~main_dram_ctrl_interface_bank0_lock));
assign main_dram_ctrl_interface_bank0_addr = builder_rhs_array_muxed21;
assign main_dram_ctrl_interface_bank0_we = builder_rhs_array_muxed22;
assign main_dram_ctrl_interface_bank0_valid = builder_rhs_array_muxed23;
assign builder_dramcoresoc_dramcore_roundrobin1_request = {(((main_port_cmd_payload_addr[8:6] == 1'd1) & (~(((((((builder_dramcoresoc_dramcore_locked1 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_dramcoresoc_dramcore_roundrobin1_ce = ((~main_dram_ctrl_interface_bank1_valid) & (~main_dram_ctrl_interface_bank1_lock));
assign main_dram_ctrl_interface_bank1_addr = builder_rhs_array_muxed24;
assign main_dram_ctrl_interface_bank1_we = builder_rhs_array_muxed25;
assign main_dram_ctrl_interface_bank1_valid = builder_rhs_array_muxed26;
assign builder_dramcoresoc_dramcore_roundrobin2_request = {(((main_port_cmd_payload_addr[8:6] == 2'd2) & (~(((((((builder_dramcoresoc_dramcore_locked2 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_dramcoresoc_dramcore_roundrobin2_ce = ((~main_dram_ctrl_interface_bank2_valid) & (~main_dram_ctrl_interface_bank2_lock));
assign main_dram_ctrl_interface_bank2_addr = builder_rhs_array_muxed27;
assign main_dram_ctrl_interface_bank2_we = builder_rhs_array_muxed28;
assign main_dram_ctrl_interface_bank2_valid = builder_rhs_array_muxed29;
assign builder_dramcoresoc_dramcore_roundrobin3_request = {(((main_port_cmd_payload_addr[8:6] == 2'd3) & (~(((((((builder_dramcoresoc_dramcore_locked3 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_dramcoresoc_dramcore_roundrobin3_ce = ((~main_dram_ctrl_interface_bank3_valid) & (~main_dram_ctrl_interface_bank3_lock));
assign main_dram_ctrl_interface_bank3_addr = builder_rhs_array_muxed30;
assign main_dram_ctrl_interface_bank3_we = builder_rhs_array_muxed31;
assign main_dram_ctrl_interface_bank3_valid = builder_rhs_array_muxed32;
assign builder_dramcoresoc_dramcore_roundrobin4_request = {(((main_port_cmd_payload_addr[8:6] == 3'd4) & (~(((((((builder_dramcoresoc_dramcore_locked4 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_dramcoresoc_dramcore_roundrobin4_ce = ((~main_dram_ctrl_interface_bank4_valid) & (~main_dram_ctrl_interface_bank4_lock));
assign main_dram_ctrl_interface_bank4_addr = builder_rhs_array_muxed33;
assign main_dram_ctrl_interface_bank4_we = builder_rhs_array_muxed34;
assign main_dram_ctrl_interface_bank4_valid = builder_rhs_array_muxed35;
assign builder_dramcoresoc_dramcore_roundrobin5_request = {(((main_port_cmd_payload_addr[8:6] == 3'd5) & (~(((((((builder_dramcoresoc_dramcore_locked5 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_dramcoresoc_dramcore_roundrobin5_ce = ((~main_dram_ctrl_interface_bank5_valid) & (~main_dram_ctrl_interface_bank5_lock));
assign main_dram_ctrl_interface_bank5_addr = builder_rhs_array_muxed36;
assign main_dram_ctrl_interface_bank5_we = builder_rhs_array_muxed37;
assign main_dram_ctrl_interface_bank5_valid = builder_rhs_array_muxed38;
assign builder_dramcoresoc_dramcore_roundrobin6_request = {(((main_port_cmd_payload_addr[8:6] == 3'd6) & (~(((((((builder_dramcoresoc_dramcore_locked6 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_dramcoresoc_dramcore_roundrobin6_ce = ((~main_dram_ctrl_interface_bank6_valid) & (~main_dram_ctrl_interface_bank6_lock));
assign main_dram_ctrl_interface_bank6_addr = builder_rhs_array_muxed39;
assign main_dram_ctrl_interface_bank6_we = builder_rhs_array_muxed40;
assign main_dram_ctrl_interface_bank6_valid = builder_rhs_array_muxed41;
assign builder_dramcoresoc_dramcore_roundrobin7_request = {(((main_port_cmd_payload_addr[8:6] == 3'd7) & (~(((((((builder_dramcoresoc_dramcore_locked7 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))))) & main_port_cmd_valid)};
assign builder_dramcoresoc_dramcore_roundrobin7_ce = ((~main_dram_ctrl_interface_bank7_valid) & (~main_dram_ctrl_interface_bank7_lock));
assign main_dram_ctrl_interface_bank7_addr = builder_rhs_array_muxed42;
assign main_dram_ctrl_interface_bank7_we = builder_rhs_array_muxed43;
assign main_dram_ctrl_interface_bank7_valid = builder_rhs_array_muxed44;
assign main_port_cmd_ready = ((((((((1'd0 | (((builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0) & ((main_port_cmd_payload_addr[8:6] == 1'd0) & (~(((((((builder_dramcoresoc_dramcore_locked0 | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0)))))) & main_dram_ctrl_interface_bank0_ready)) | (((builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0) & ((main_port_cmd_payload_addr[8:6] == 1'd1) & (~(((((((builder_dramcoresoc_dramcore_locked1 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0)))))) & main_dram_ctrl_interface_bank1_ready)) | (((builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0) & ((main_port_cmd_payload_addr[8:6] == 2'd2) & (~(((((((builder_dramcoresoc_dramcore_locked2 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0)))))) & main_dram_ctrl_interface_bank2_ready)) | (((builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0) & ((main_port_cmd_payload_addr[8:6] == 2'd3) & (~(((((((builder_dramcoresoc_dramcore_locked3 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0)))))) & main_dram_ctrl_interface_bank3_ready)) | (((builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0) & ((main_port_cmd_payload_addr[8:6] == 3'd4) & (~(((((((builder_dramcoresoc_dramcore_locked4 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0)))))) & main_dram_ctrl_interface_bank4_ready)) | (((builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0) & ((main_port_cmd_payload_addr[8:6] == 3'd5) & (~(((((((builder_dramcoresoc_dramcore_locked5 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0)))))) & main_dram_ctrl_interface_bank5_ready)) | (((builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0) & ((main_port_cmd_payload_addr[8:6] == 3'd6) & (~(((((((builder_dramcoresoc_dramcore_locked6 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0)))))) & main_dram_ctrl_interface_bank6_ready)) | (((builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0) & ((main_port_cmd_payload_addr[8:6] == 3'd7) & (~(((((((builder_dramcoresoc_dramcore_locked7 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0)))))) & main_dram_ctrl_interface_bank7_ready));
assign main_port_wdata_ready = builder_dramcoresoc_dramcore_new_master_wdata_ready2;
assign main_port_rdata_valid = builder_dramcoresoc_dramcore_new_master_rdata_valid10;
always @(*) begin
	main_dram_ctrl_interface_wdata_we = 32'd0;
    case ({builder_dramcoresoc_dramcore_new_master_wdata_ready2})
        1'd1: begin
            main_dram_ctrl_interface_wdata_we = main_port_wdata_payload_we;
        end
        default: begin
            main_dram_ctrl_interface_wdata_we = 1'd0;
        end
    endcase
end
always @(*) begin
	main_dram_ctrl_interface_wdata = 256'd0;
    case ({builder_dramcoresoc_dramcore_new_master_wdata_ready2})
        1'd1: begin
            main_dram_ctrl_interface_wdata = main_port_wdata_payload_data;
        end
        default: begin
            main_dram_ctrl_interface_wdata = 1'd0;
        end
    endcase
end
assign main_port_rdata_payload_data = main_dram_ctrl_interface_rdata;
assign main_litedramnativeportconverter_cmd_buffer_source_ready = (main_litedramnativeportconverter_wdata_finished | main_litedramnativeportconverter_rdata_finished);
assign main_litedramnativeportconverter_addr_changed = (main_litedramnativeportconverter_cmd_addr[26:3] != main_new_port_cmd_payload_addr[26:3]);
assign main_litedramnativeportconverter_rw_collision = ((main_litedramnativeportconverter_cmd_we & (main_new_port_cmd_valid & (~main_new_port_cmd_payload_we))) & (~main_litedramnativeportconverter_addr_changed));
assign main_litedramnativeportconverter_next_cmd = ((((main_litedramnativeportconverter_addr_changed | (main_litedramnativeportconverter_cmd_we != main_new_port_cmd_payload_we)) | (main_litedramnativeportconverter_sel == 8'd255)) | main_litedramnativeportconverter_cmd_last) | main_new_port_flush);
assign main_litedramnativeportconverter_rdata_fifo_sink_valid = main_port_rdata_valid;
assign main_port_rdata_ready = main_litedramnativeportconverter_rdata_fifo_sink_ready;
assign main_litedramnativeportconverter_rdata_fifo_sink_first = main_port_rdata_first;
assign main_litedramnativeportconverter_rdata_fifo_sink_last = main_port_rdata_last;
assign main_litedramnativeportconverter_rdata_fifo_sink_payload_data = main_port_rdata_payload_data;
assign main_litedramnativeportconverter_rdata_converter_sink_valid = main_litedramnativeportconverter_rdata_fifo_source_valid;
assign main_litedramnativeportconverter_rdata_fifo_source_ready = main_litedramnativeportconverter_rdata_converter_sink_ready;
assign main_litedramnativeportconverter_rdata_converter_sink_first = main_litedramnativeportconverter_rdata_fifo_source_first;
assign main_litedramnativeportconverter_rdata_converter_sink_last = main_litedramnativeportconverter_rdata_fifo_source_last;
assign main_litedramnativeportconverter_rdata_converter_sink_payload_data = main_litedramnativeportconverter_rdata_fifo_source_payload_data;
assign main_litedramnativeportconverter_rdata_chunk_valid = ((main_litedramnativeportconverter_cmd_buffer_source_payload_sel & main_litedramnativeportconverter_rdata_chunk) != 1'd0);
always @(*) begin
	main_new_port_rdata_payload_data = 32'd0;
    if ((main_litedramnativeportconverter_cmd_buffer_source_valid & (~main_litedramnativeportconverter_cmd_buffer_source_payload_we))) begin
        if (main_litedramnativeportconverter_rdata_chunk_valid) begin
            main_new_port_rdata_payload_data = main_litedramnativeportconverter_rdata_converter_source_payload_data;
        end else begin
        end
    end
end
always @(*) begin
	main_new_port_rdata_valid = 1'd0;
    if ((main_litedramnativeportconverter_cmd_buffer_source_valid & (~main_litedramnativeportconverter_cmd_buffer_source_payload_we))) begin
        if (main_litedramnativeportconverter_rdata_chunk_valid) begin
            main_new_port_rdata_valid = main_litedramnativeportconverter_rdata_converter_source_valid;
        end else begin
        end
    end
end
always @(*) begin
	main_litedramnativeportconverter_rdata_finished = 1'd0;
    if ((main_litedramnativeportconverter_cmd_buffer_source_valid & (~main_litedramnativeportconverter_cmd_buffer_source_payload_we))) begin
        main_litedramnativeportconverter_rdata_finished = ((main_litedramnativeportconverter_rdata_converter_source_valid & main_litedramnativeportconverter_rdata_converter_source_ready) & main_litedramnativeportconverter_rdata_chunk[7]);
    end
end
always @(*) begin
	main_litedramnativeportconverter_rdata_converter_source_ready = 1'd0;
    if ((main_litedramnativeportconverter_cmd_buffer_source_valid & (~main_litedramnativeportconverter_cmd_buffer_source_payload_we))) begin
        if (main_litedramnativeportconverter_rdata_chunk_valid) begin
            main_litedramnativeportconverter_rdata_converter_source_ready = main_new_port_rdata_ready;
        end else begin
            main_litedramnativeportconverter_rdata_converter_source_ready = 1'd1;
        end
    end
end
assign main_litedramnativeportconverter_wdata_fifo_sink_valid = main_new_port_wdata_valid;
assign main_new_port_wdata_ready = main_litedramnativeportconverter_wdata_fifo_sink_ready;
assign main_litedramnativeportconverter_wdata_fifo_sink_first = main_new_port_wdata_first;
assign main_litedramnativeportconverter_wdata_fifo_sink_last = main_new_port_wdata_last;
assign main_litedramnativeportconverter_wdata_fifo_sink_payload_data = main_new_port_wdata_payload_data;
assign main_litedramnativeportconverter_wdata_fifo_sink_payload_we = main_new_port_wdata_payload_we;
assign main_port_wdata_valid = main_litedramnativeportconverter_wdata_buffer_source_source_valid;
assign main_litedramnativeportconverter_wdata_buffer_source_source_ready = main_port_wdata_ready;
assign main_port_wdata_first = main_litedramnativeportconverter_wdata_buffer_source_source_first;
assign main_port_wdata_last = main_litedramnativeportconverter_wdata_buffer_source_source_last;
assign main_port_wdata_payload_data = main_litedramnativeportconverter_wdata_buffer_source_source_payload_data;
assign main_port_wdata_payload_we = main_litedramnativeportconverter_wdata_buffer_source_source_payload_we;
assign main_litedramnativeportconverter_wdata_chunk_valid = ((main_litedramnativeportconverter_cmd_buffer_source_payload_sel & main_litedramnativeportconverter_wdata_chunk) != 1'd0);
always @(*) begin
	main_litedramnativeportconverter_wdata_converter_sink_payload_data = 32'd0;
    if ((main_litedramnativeportconverter_cmd_buffer_source_valid & main_litedramnativeportconverter_cmd_buffer_source_payload_we)) begin
        if (main_litedramnativeportconverter_wdata_chunk_valid) begin
            main_litedramnativeportconverter_wdata_converter_sink_payload_data = main_litedramnativeportconverter_wdata_fifo_source_payload_data;
        end else begin
        end
    end
end
always @(*) begin
	main_litedramnativeportconverter_wdata_converter_sink_valid = 1'd0;
    if ((main_litedramnativeportconverter_cmd_buffer_source_valid & main_litedramnativeportconverter_cmd_buffer_source_payload_we)) begin
        if (main_litedramnativeportconverter_wdata_chunk_valid) begin
            main_litedramnativeportconverter_wdata_converter_sink_valid = main_litedramnativeportconverter_wdata_fifo_source_valid;
        end else begin
            main_litedramnativeportconverter_wdata_converter_sink_valid = 1'd1;
        end
    end
end
always @(*) begin
	main_litedramnativeportconverter_wdata_fifo_source_ready = 1'd0;
    if ((main_litedramnativeportconverter_cmd_buffer_source_valid & main_litedramnativeportconverter_cmd_buffer_source_payload_we)) begin
        if (main_litedramnativeportconverter_wdata_chunk_valid) begin
            main_litedramnativeportconverter_wdata_fifo_source_ready = main_litedramnativeportconverter_wdata_converter_sink_ready;
        end else begin
        end
    end
end
always @(*) begin
	main_litedramnativeportconverter_wdata_converter_sink_payload_we = 4'd0;
    if ((main_litedramnativeportconverter_cmd_buffer_source_valid & main_litedramnativeportconverter_cmd_buffer_source_payload_we)) begin
        if (main_litedramnativeportconverter_wdata_chunk_valid) begin
            main_litedramnativeportconverter_wdata_converter_sink_payload_we = main_litedramnativeportconverter_wdata_fifo_source_payload_we;
        end else begin
        end
    end
end
assign main_litedramnativeportconverter_wdata_buffer_sink_sink_valid = main_litedramnativeportconverter_wdata_converter_source_valid;
assign main_litedramnativeportconverter_wdata_buffer_sink_sink_payload_data = main_litedramnativeportconverter_wdata_converter_source_payload_data;
assign main_litedramnativeportconverter_wdata_buffer_sink_sink_payload_we = (main_litedramnativeportconverter_wdata_converter_source_payload_we & main_litedramnativeportconverter_wdata_sel);
assign main_litedramnativeportconverter_wdata_converter_source_ready = main_litedramnativeportconverter_wdata_buffer_sink_sink_ready;
assign main_litedramnativeportconverter_wdata_finished = ((main_litedramnativeportconverter_wdata_converter_sink_valid & main_litedramnativeportconverter_wdata_converter_sink_ready) & main_litedramnativeportconverter_wdata_chunk[7]);
assign main_litedramnativeportconverter_cmd_buffer_source_valid = main_litedramnativeportconverter_cmd_buffer_sink_valid;
assign main_litedramnativeportconverter_cmd_buffer_sink_ready = main_litedramnativeportconverter_cmd_buffer_source_ready;
assign main_litedramnativeportconverter_cmd_buffer_source_first = main_litedramnativeportconverter_cmd_buffer_sink_first;
assign main_litedramnativeportconverter_cmd_buffer_source_last = main_litedramnativeportconverter_cmd_buffer_sink_last;
assign main_litedramnativeportconverter_cmd_buffer_source_payload_sel = main_litedramnativeportconverter_cmd_buffer_sink_payload_sel;
assign main_litedramnativeportconverter_cmd_buffer_source_payload_we = main_litedramnativeportconverter_cmd_buffer_sink_payload_we;
always @(*) begin
	builder_dramcoresoc_dramcore_next_state = 2'd0;
    builder_dramcoresoc_dramcore_next_state = builder_dramcoresoc_dramcore_state;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
            if (main_port_cmd_ready) begin
                if (main_litedramnativeportconverter_cmd_we) begin
                    builder_dramcoresoc_dramcore_next_state = 1'd0;
                end else begin
                    builder_dramcoresoc_dramcore_next_state = 2'd2;
                end
            end
        end
        2'd2: begin
            if (main_litedramnativeportconverter_next_cmd) begin
                builder_dramcoresoc_dramcore_next_state = 2'd3;
            end else begin
            end
        end
        2'd3: begin
            if (main_litedramnativeportconverter_cmd_buffer_sink_ready) begin
                if (main_litedramnativeportconverter_cmd_we) begin
                    builder_dramcoresoc_dramcore_next_state = 1'd1;
                end else begin
                    builder_dramcoresoc_dramcore_next_state = 1'd0;
                end
            end
        end
        default: begin
            if (main_new_port_cmd_ready) begin
                if (main_new_port_cmd_payload_we) begin
                    builder_dramcoresoc_dramcore_next_state = 2'd2;
                end else begin
                    builder_dramcoresoc_dramcore_next_state = 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
	main_litedramnativeportconverter_cmd_buffer_sink_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            main_litedramnativeportconverter_cmd_buffer_sink_valid = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_port_cmd_payload_we = 1'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
            main_port_cmd_payload_we = main_litedramnativeportconverter_cmd_we;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_litedramnativeportconverter_cmd_buffer_sink_payload_sel = 8'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            main_litedramnativeportconverter_cmd_buffer_sink_payload_sel = main_litedramnativeportconverter_sel;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_litedramnativeportconverter_cmd_addr_next_value0 = 27'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (main_new_port_cmd_ready) begin
                main_litedramnativeportconverter_cmd_addr_next_value0 = main_new_port_cmd_payload_addr;
            end
        end
    endcase
end
always @(*) begin
	main_litedramnativeportconverter_cmd_buffer_sink_payload_we = 1'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            main_litedramnativeportconverter_cmd_buffer_sink_payload_we = main_litedramnativeportconverter_cmd_we;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_litedramnativeportconverter_cmd_addr_next_value_ce0 = 1'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (main_new_port_cmd_ready) begin
                main_litedramnativeportconverter_cmd_addr_next_value_ce0 = 1'd1;
            end
        end
    endcase
end
always @(*) begin
	main_litedramnativeportconverter_cmd_we_next_value1 = 1'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (main_new_port_cmd_ready) begin
                main_litedramnativeportconverter_cmd_we_next_value1 = main_new_port_cmd_payload_we;
            end
        end
    endcase
end
always @(*) begin
	main_litedramnativeportconverter_cmd_we_next_value_ce1 = 1'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (main_new_port_cmd_ready) begin
                main_litedramnativeportconverter_cmd_we_next_value_ce1 = 1'd1;
            end
        end
    endcase
end
always @(*) begin
	main_litedramnativeportconverter_cmd_last_next_value2 = 1'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_litedramnativeportconverter_next_cmd) begin
            end else begin
                main_litedramnativeportconverter_cmd_last_next_value2 = main_new_port_cmd_last;
            end
        end
        2'd3: begin
        end
        default: begin
            if (main_new_port_cmd_ready) begin
                main_litedramnativeportconverter_cmd_last_next_value2 = main_new_port_cmd_last;
            end
        end
    endcase
end
always @(*) begin
	main_port_cmd_valid = 1'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
            main_port_cmd_valid = 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
	main_litedramnativeportconverter_cmd_last_next_value_ce2 = 1'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_litedramnativeportconverter_next_cmd) begin
            end else begin
                main_litedramnativeportconverter_cmd_last_next_value_ce2 = 1'd1;
            end
        end
        2'd3: begin
        end
        default: begin
            if (main_new_port_cmd_ready) begin
                main_litedramnativeportconverter_cmd_last_next_value_ce2 = 1'd1;
            end
        end
    endcase
end
always @(*) begin
	main_litedramnativeportconverter_sel_next_value3 = 8'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_litedramnativeportconverter_next_cmd) begin
            end else begin
                if (main_new_port_cmd_valid) begin
                    main_litedramnativeportconverter_sel_next_value3 = (main_litedramnativeportconverter_sel | (1'd1 <<< main_new_port_cmd_payload_addr[2:0]));
                end
            end
        end
        2'd3: begin
        end
        default: begin
            if (main_new_port_cmd_ready) begin
                main_litedramnativeportconverter_sel_next_value3 = (1'd1 <<< main_new_port_cmd_payload_addr[2:0]);
            end
        end
    endcase
end
always @(*) begin
	main_litedramnativeportconverter_sel_next_value_ce3 = 1'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_litedramnativeportconverter_next_cmd) begin
            end else begin
                if (main_new_port_cmd_valid) begin
                    main_litedramnativeportconverter_sel_next_value_ce3 = 1'd1;
                end
            end
        end
        2'd3: begin
        end
        default: begin
            if (main_new_port_cmd_ready) begin
                main_litedramnativeportconverter_sel_next_value_ce3 = 1'd1;
            end
        end
    endcase
end
always @(*) begin
	main_new_port_cmd_ready = 1'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (main_litedramnativeportconverter_next_cmd) begin
            end else begin
                main_new_port_cmd_ready = main_new_port_cmd_valid;
            end
        end
        2'd3: begin
        end
        default: begin
            main_new_port_cmd_ready = (main_new_port_cmd_valid & (~main_litedramnativeportconverter_read_lock));
        end
    endcase
end
always @(*) begin
	main_port_cmd_payload_addr = 24'd0;
    case (builder_dramcoresoc_dramcore_state)
        1'd1: begin
            main_port_cmd_payload_addr = main_litedramnativeportconverter_cmd_addr[26:3];
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
assign main_litedramnativeportconverter_rdata_fifo_syncfifo_din = {main_litedramnativeportconverter_rdata_fifo_fifo_in_last, main_litedramnativeportconverter_rdata_fifo_fifo_in_first, main_litedramnativeportconverter_rdata_fifo_fifo_in_payload_data};
assign {main_litedramnativeportconverter_rdata_fifo_fifo_out_last, main_litedramnativeportconverter_rdata_fifo_fifo_out_first, main_litedramnativeportconverter_rdata_fifo_fifo_out_payload_data} = main_litedramnativeportconverter_rdata_fifo_syncfifo_dout;
assign {main_litedramnativeportconverter_rdata_fifo_fifo_out_last, main_litedramnativeportconverter_rdata_fifo_fifo_out_first, main_litedramnativeportconverter_rdata_fifo_fifo_out_payload_data} = main_litedramnativeportconverter_rdata_fifo_syncfifo_dout;
assign {main_litedramnativeportconverter_rdata_fifo_fifo_out_last, main_litedramnativeportconverter_rdata_fifo_fifo_out_first, main_litedramnativeportconverter_rdata_fifo_fifo_out_payload_data} = main_litedramnativeportconverter_rdata_fifo_syncfifo_dout;
assign main_litedramnativeportconverter_rdata_fifo_sink_ready = main_litedramnativeportconverter_rdata_fifo_syncfifo_writable;
assign main_litedramnativeportconverter_rdata_fifo_syncfifo_we = main_litedramnativeportconverter_rdata_fifo_sink_valid;
assign main_litedramnativeportconverter_rdata_fifo_fifo_in_first = main_litedramnativeportconverter_rdata_fifo_sink_first;
assign main_litedramnativeportconverter_rdata_fifo_fifo_in_last = main_litedramnativeportconverter_rdata_fifo_sink_last;
assign main_litedramnativeportconverter_rdata_fifo_fifo_in_payload_data = main_litedramnativeportconverter_rdata_fifo_sink_payload_data;
assign main_litedramnativeportconverter_rdata_fifo_source_valid = main_litedramnativeportconverter_rdata_fifo_syncfifo_readable;
assign main_litedramnativeportconverter_rdata_fifo_source_first = main_litedramnativeportconverter_rdata_fifo_fifo_out_first;
assign main_litedramnativeportconverter_rdata_fifo_source_last = main_litedramnativeportconverter_rdata_fifo_fifo_out_last;
assign main_litedramnativeportconverter_rdata_fifo_source_payload_data = main_litedramnativeportconverter_rdata_fifo_fifo_out_payload_data;
assign main_litedramnativeportconverter_rdata_fifo_syncfifo_re = main_litedramnativeportconverter_rdata_fifo_source_ready;
always @(*) begin
	main_litedramnativeportconverter_rdata_fifo_wrport_adr = 3'd0;
    if (main_litedramnativeportconverter_rdata_fifo_replace) begin
        main_litedramnativeportconverter_rdata_fifo_wrport_adr = (main_litedramnativeportconverter_rdata_fifo_produce - 1'd1);
    end else begin
        main_litedramnativeportconverter_rdata_fifo_wrport_adr = main_litedramnativeportconverter_rdata_fifo_produce;
    end
end
assign main_litedramnativeportconverter_rdata_fifo_wrport_dat_w = main_litedramnativeportconverter_rdata_fifo_syncfifo_din;
assign main_litedramnativeportconverter_rdata_fifo_wrport_we = (main_litedramnativeportconverter_rdata_fifo_syncfifo_we & (main_litedramnativeportconverter_rdata_fifo_syncfifo_writable | main_litedramnativeportconverter_rdata_fifo_replace));
assign main_litedramnativeportconverter_rdata_fifo_do_read = (main_litedramnativeportconverter_rdata_fifo_syncfifo_readable & main_litedramnativeportconverter_rdata_fifo_syncfifo_re);
assign main_litedramnativeportconverter_rdata_fifo_rdport_adr = main_litedramnativeportconverter_rdata_fifo_consume;
assign main_litedramnativeportconverter_rdata_fifo_syncfifo_dout = main_litedramnativeportconverter_rdata_fifo_rdport_dat_r;
assign main_litedramnativeportconverter_rdata_fifo_syncfifo_writable = (main_litedramnativeportconverter_rdata_fifo_level != 3'd7);
assign main_litedramnativeportconverter_rdata_fifo_syncfifo_readable = (main_litedramnativeportconverter_rdata_fifo_level != 1'd0);
assign main_litedramnativeportconverter_rdata_converter_converter_sink_valid = main_litedramnativeportconverter_rdata_converter_sink_valid;
assign main_litedramnativeportconverter_rdata_converter_converter_sink_first = main_litedramnativeportconverter_rdata_converter_sink_first;
assign main_litedramnativeportconverter_rdata_converter_converter_sink_last = main_litedramnativeportconverter_rdata_converter_sink_last;
assign main_litedramnativeportconverter_rdata_converter_sink_ready = main_litedramnativeportconverter_rdata_converter_converter_sink_ready;
always @(*) begin
	main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data = 256'd0;
    main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[31:0] = main_litedramnativeportconverter_rdata_converter_sink_payload_data[31:0];
    main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[63:32] = main_litedramnativeportconverter_rdata_converter_sink_payload_data[63:32];
    main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[95:64] = main_litedramnativeportconverter_rdata_converter_sink_payload_data[95:64];
    main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[127:96] = main_litedramnativeportconverter_rdata_converter_sink_payload_data[127:96];
    main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[159:128] = main_litedramnativeportconverter_rdata_converter_sink_payload_data[159:128];
    main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[191:160] = main_litedramnativeportconverter_rdata_converter_sink_payload_data[191:160];
    main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[223:192] = main_litedramnativeportconverter_rdata_converter_sink_payload_data[223:192];
    main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[255:224] = main_litedramnativeportconverter_rdata_converter_sink_payload_data[255:224];
end
assign main_litedramnativeportconverter_rdata_converter_source_valid = main_litedramnativeportconverter_rdata_converter_source_source_valid;
assign main_litedramnativeportconverter_rdata_converter_source_first = main_litedramnativeportconverter_rdata_converter_source_source_first;
assign main_litedramnativeportconverter_rdata_converter_source_last = main_litedramnativeportconverter_rdata_converter_source_source_last;
assign main_litedramnativeportconverter_rdata_converter_source_source_ready = main_litedramnativeportconverter_rdata_converter_source_ready;
assign {main_litedramnativeportconverter_rdata_converter_source_payload_data} = main_litedramnativeportconverter_rdata_converter_source_source_payload_data;
assign main_litedramnativeportconverter_rdata_converter_source_source_valid = main_litedramnativeportconverter_rdata_converter_converter_source_valid;
assign main_litedramnativeportconverter_rdata_converter_converter_source_ready = main_litedramnativeportconverter_rdata_converter_source_source_ready;
assign main_litedramnativeportconverter_rdata_converter_source_source_first = main_litedramnativeportconverter_rdata_converter_converter_source_first;
assign main_litedramnativeportconverter_rdata_converter_source_source_last = main_litedramnativeportconverter_rdata_converter_converter_source_last;
assign main_litedramnativeportconverter_rdata_converter_source_source_payload_data = main_litedramnativeportconverter_rdata_converter_converter_source_payload_data;
assign main_litedramnativeportconverter_rdata_converter_converter_first = (main_litedramnativeportconverter_rdata_converter_converter_mux == 1'd0);
assign main_litedramnativeportconverter_rdata_converter_converter_last = (main_litedramnativeportconverter_rdata_converter_converter_mux == 3'd7);
assign main_litedramnativeportconverter_rdata_converter_converter_source_valid = main_litedramnativeportconverter_rdata_converter_converter_sink_valid;
assign main_litedramnativeportconverter_rdata_converter_converter_source_first = (main_litedramnativeportconverter_rdata_converter_converter_sink_first & main_litedramnativeportconverter_rdata_converter_converter_first);
assign main_litedramnativeportconverter_rdata_converter_converter_source_last = (main_litedramnativeportconverter_rdata_converter_converter_sink_last & main_litedramnativeportconverter_rdata_converter_converter_last);
assign main_litedramnativeportconverter_rdata_converter_converter_sink_ready = (main_litedramnativeportconverter_rdata_converter_converter_last & main_litedramnativeportconverter_rdata_converter_converter_source_ready);
always @(*) begin
	main_litedramnativeportconverter_rdata_converter_converter_source_payload_data = 32'd0;
    case (main_litedramnativeportconverter_rdata_converter_converter_mux)
        1'd0: begin
            main_litedramnativeportconverter_rdata_converter_converter_source_payload_data = main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[31:0];
        end
        1'd1: begin
            main_litedramnativeportconverter_rdata_converter_converter_source_payload_data = main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[63:32];
        end
        2'd2: begin
            main_litedramnativeportconverter_rdata_converter_converter_source_payload_data = main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[95:64];
        end
        2'd3: begin
            main_litedramnativeportconverter_rdata_converter_converter_source_payload_data = main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[127:96];
        end
        3'd4: begin
            main_litedramnativeportconverter_rdata_converter_converter_source_payload_data = main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[159:128];
        end
        3'd5: begin
            main_litedramnativeportconverter_rdata_converter_converter_source_payload_data = main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[191:160];
        end
        3'd6: begin
            main_litedramnativeportconverter_rdata_converter_converter_source_payload_data = main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[223:192];
        end
        default: begin
            main_litedramnativeportconverter_rdata_converter_converter_source_payload_data = main_litedramnativeportconverter_rdata_converter_converter_sink_payload_data[255:224];
        end
    endcase
end
assign main_litedramnativeportconverter_rdata_converter_converter_source_payload_valid_token_count = main_litedramnativeportconverter_rdata_converter_converter_last;
assign main_litedramnativeportconverter_wdata_converter_converter_sink_valid = main_litedramnativeportconverter_wdata_converter_sink_valid;
assign main_litedramnativeportconverter_wdata_converter_converter_sink_first = main_litedramnativeportconverter_wdata_converter_sink_first;
assign main_litedramnativeportconverter_wdata_converter_converter_sink_last = main_litedramnativeportconverter_wdata_converter_sink_last;
assign main_litedramnativeportconverter_wdata_converter_sink_ready = main_litedramnativeportconverter_wdata_converter_converter_sink_ready;
assign main_litedramnativeportconverter_wdata_converter_converter_sink_payload_data = {main_litedramnativeportconverter_wdata_converter_sink_payload_we, main_litedramnativeportconverter_wdata_converter_sink_payload_data};
assign main_litedramnativeportconverter_wdata_converter_source_valid = main_litedramnativeportconverter_wdata_converter_source_source_valid;
assign main_litedramnativeportconverter_wdata_converter_source_first = main_litedramnativeportconverter_wdata_converter_source_source_first;
assign main_litedramnativeportconverter_wdata_converter_source_last = main_litedramnativeportconverter_wdata_converter_source_source_last;
assign main_litedramnativeportconverter_wdata_converter_source_source_ready = main_litedramnativeportconverter_wdata_converter_source_ready;
always @(*) begin
	main_litedramnativeportconverter_wdata_converter_source_payload_data = 256'd0;
    main_litedramnativeportconverter_wdata_converter_source_payload_data[31:0] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[31:0];
    main_litedramnativeportconverter_wdata_converter_source_payload_data[63:32] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[67:36];
    main_litedramnativeportconverter_wdata_converter_source_payload_data[95:64] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[103:72];
    main_litedramnativeportconverter_wdata_converter_source_payload_data[127:96] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[139:108];
    main_litedramnativeportconverter_wdata_converter_source_payload_data[159:128] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[175:144];
    main_litedramnativeportconverter_wdata_converter_source_payload_data[191:160] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[211:180];
    main_litedramnativeportconverter_wdata_converter_source_payload_data[223:192] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[247:216];
    main_litedramnativeportconverter_wdata_converter_source_payload_data[255:224] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[283:252];
end
always @(*) begin
	main_litedramnativeportconverter_wdata_converter_source_payload_we = 32'd0;
    main_litedramnativeportconverter_wdata_converter_source_payload_we[3:0] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[35:32];
    main_litedramnativeportconverter_wdata_converter_source_payload_we[7:4] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[71:68];
    main_litedramnativeportconverter_wdata_converter_source_payload_we[11:8] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[107:104];
    main_litedramnativeportconverter_wdata_converter_source_payload_we[15:12] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[143:140];
    main_litedramnativeportconverter_wdata_converter_source_payload_we[19:16] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[179:176];
    main_litedramnativeportconverter_wdata_converter_source_payload_we[23:20] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[215:212];
    main_litedramnativeportconverter_wdata_converter_source_payload_we[27:24] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[251:248];
    main_litedramnativeportconverter_wdata_converter_source_payload_we[31:28] = main_litedramnativeportconverter_wdata_converter_source_source_payload_data[287:284];
end
assign main_litedramnativeportconverter_wdata_converter_source_source_valid = main_litedramnativeportconverter_wdata_converter_converter_source_valid;
assign main_litedramnativeportconverter_wdata_converter_converter_source_ready = main_litedramnativeportconverter_wdata_converter_source_source_ready;
assign main_litedramnativeportconverter_wdata_converter_source_source_first = main_litedramnativeportconverter_wdata_converter_converter_source_first;
assign main_litedramnativeportconverter_wdata_converter_source_source_last = main_litedramnativeportconverter_wdata_converter_converter_source_last;
assign main_litedramnativeportconverter_wdata_converter_source_source_payload_data = main_litedramnativeportconverter_wdata_converter_converter_source_payload_data;
assign main_litedramnativeportconverter_wdata_converter_converter_sink_ready = ((~main_litedramnativeportconverter_wdata_converter_converter_strobe_all) | main_litedramnativeportconverter_wdata_converter_converter_source_ready);
assign main_litedramnativeportconverter_wdata_converter_converter_source_valid = main_litedramnativeportconverter_wdata_converter_converter_strobe_all;
assign main_litedramnativeportconverter_wdata_converter_converter_load_part = (main_litedramnativeportconverter_wdata_converter_converter_sink_valid & main_litedramnativeportconverter_wdata_converter_converter_sink_ready);
assign main_litedramnativeportconverter_wdata_fifo_syncfifo_din = {main_litedramnativeportconverter_wdata_fifo_fifo_in_last, main_litedramnativeportconverter_wdata_fifo_fifo_in_first, main_litedramnativeportconverter_wdata_fifo_fifo_in_payload_we, main_litedramnativeportconverter_wdata_fifo_fifo_in_payload_data};
assign {main_litedramnativeportconverter_wdata_fifo_fifo_out_last, main_litedramnativeportconverter_wdata_fifo_fifo_out_first, main_litedramnativeportconverter_wdata_fifo_fifo_out_payload_we, main_litedramnativeportconverter_wdata_fifo_fifo_out_payload_data} = main_litedramnativeportconverter_wdata_fifo_syncfifo_dout;
assign {main_litedramnativeportconverter_wdata_fifo_fifo_out_last, main_litedramnativeportconverter_wdata_fifo_fifo_out_first, main_litedramnativeportconverter_wdata_fifo_fifo_out_payload_we, main_litedramnativeportconverter_wdata_fifo_fifo_out_payload_data} = main_litedramnativeportconverter_wdata_fifo_syncfifo_dout;
assign {main_litedramnativeportconverter_wdata_fifo_fifo_out_last, main_litedramnativeportconverter_wdata_fifo_fifo_out_first, main_litedramnativeportconverter_wdata_fifo_fifo_out_payload_we, main_litedramnativeportconverter_wdata_fifo_fifo_out_payload_data} = main_litedramnativeportconverter_wdata_fifo_syncfifo_dout;
assign {main_litedramnativeportconverter_wdata_fifo_fifo_out_last, main_litedramnativeportconverter_wdata_fifo_fifo_out_first, main_litedramnativeportconverter_wdata_fifo_fifo_out_payload_we, main_litedramnativeportconverter_wdata_fifo_fifo_out_payload_data} = main_litedramnativeportconverter_wdata_fifo_syncfifo_dout;
assign main_litedramnativeportconverter_wdata_fifo_sink_ready = main_litedramnativeportconverter_wdata_fifo_syncfifo_writable;
assign main_litedramnativeportconverter_wdata_fifo_syncfifo_we = main_litedramnativeportconverter_wdata_fifo_sink_valid;
assign main_litedramnativeportconverter_wdata_fifo_fifo_in_first = main_litedramnativeportconverter_wdata_fifo_sink_first;
assign main_litedramnativeportconverter_wdata_fifo_fifo_in_last = main_litedramnativeportconverter_wdata_fifo_sink_last;
assign main_litedramnativeportconverter_wdata_fifo_fifo_in_payload_data = main_litedramnativeportconverter_wdata_fifo_sink_payload_data;
assign main_litedramnativeportconverter_wdata_fifo_fifo_in_payload_we = main_litedramnativeportconverter_wdata_fifo_sink_payload_we;
assign main_litedramnativeportconverter_wdata_fifo_source_valid = main_litedramnativeportconverter_wdata_fifo_syncfifo_readable;
assign main_litedramnativeportconverter_wdata_fifo_source_first = main_litedramnativeportconverter_wdata_fifo_fifo_out_first;
assign main_litedramnativeportconverter_wdata_fifo_source_last = main_litedramnativeportconverter_wdata_fifo_fifo_out_last;
assign main_litedramnativeportconverter_wdata_fifo_source_payload_data = main_litedramnativeportconverter_wdata_fifo_fifo_out_payload_data;
assign main_litedramnativeportconverter_wdata_fifo_source_payload_we = main_litedramnativeportconverter_wdata_fifo_fifo_out_payload_we;
assign main_litedramnativeportconverter_wdata_fifo_syncfifo_re = main_litedramnativeportconverter_wdata_fifo_source_ready;
always @(*) begin
	main_litedramnativeportconverter_wdata_fifo_wrport_adr = 3'd0;
    if (main_litedramnativeportconverter_wdata_fifo_replace) begin
        main_litedramnativeportconverter_wdata_fifo_wrport_adr = (main_litedramnativeportconverter_wdata_fifo_produce - 1'd1);
    end else begin
        main_litedramnativeportconverter_wdata_fifo_wrport_adr = main_litedramnativeportconverter_wdata_fifo_produce;
    end
end
assign main_litedramnativeportconverter_wdata_fifo_wrport_dat_w = main_litedramnativeportconverter_wdata_fifo_syncfifo_din;
assign main_litedramnativeportconverter_wdata_fifo_wrport_we = (main_litedramnativeportconverter_wdata_fifo_syncfifo_we & (main_litedramnativeportconverter_wdata_fifo_syncfifo_writable | main_litedramnativeportconverter_wdata_fifo_replace));
assign main_litedramnativeportconverter_wdata_fifo_do_read = (main_litedramnativeportconverter_wdata_fifo_syncfifo_readable & main_litedramnativeportconverter_wdata_fifo_syncfifo_re);
assign main_litedramnativeportconverter_wdata_fifo_rdport_adr = main_litedramnativeportconverter_wdata_fifo_consume;
assign main_litedramnativeportconverter_wdata_fifo_syncfifo_dout = main_litedramnativeportconverter_wdata_fifo_rdport_dat_r;
assign main_litedramnativeportconverter_wdata_fifo_syncfifo_writable = (main_litedramnativeportconverter_wdata_fifo_level != 3'd7);
assign main_litedramnativeportconverter_wdata_fifo_syncfifo_readable = (main_litedramnativeportconverter_wdata_fifo_level != 1'd0);
assign main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_ready = ((~main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid) | main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_ready);
assign main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_valid = main_litedramnativeportconverter_wdata_buffer_sink_sink_valid;
assign main_litedramnativeportconverter_wdata_buffer_sink_sink_ready = main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_ready;
assign main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_first = main_litedramnativeportconverter_wdata_buffer_sink_sink_first;
assign main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_last = main_litedramnativeportconverter_wdata_buffer_sink_sink_last;
assign main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_data = main_litedramnativeportconverter_wdata_buffer_sink_sink_payload_data;
assign main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_we = main_litedramnativeportconverter_wdata_buffer_sink_sink_payload_we;
assign main_litedramnativeportconverter_wdata_buffer_source_source_valid = main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid;
assign main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_ready = main_litedramnativeportconverter_wdata_buffer_source_source_ready;
assign main_litedramnativeportconverter_wdata_buffer_source_source_first = main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_first;
assign main_litedramnativeportconverter_wdata_buffer_source_source_last = main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_last;
assign main_litedramnativeportconverter_wdata_buffer_source_source_payload_data = main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_data;
assign main_litedramnativeportconverter_wdata_buffer_source_source_payload_we = main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_we;
assign builder_dramcoresoc_dramcore_roundrobin0_grant = 1'd0;
assign builder_dramcoresoc_dramcore_roundrobin1_grant = 1'd0;
assign builder_dramcoresoc_dramcore_roundrobin2_grant = 1'd0;
assign builder_dramcoresoc_dramcore_roundrobin3_grant = 1'd0;
assign builder_dramcoresoc_dramcore_roundrobin4_grant = 1'd0;
assign builder_dramcoresoc_dramcore_roundrobin5_grant = 1'd0;
assign builder_dramcoresoc_dramcore_roundrobin6_grant = 1'd0;
assign builder_dramcoresoc_dramcore_roundrobin7_grant = 1'd0;
assign main_ce = ((~main_new_port_cmd_valid) | (main_new_port_cmd_ready & main_new_port_cmd_last));
always @(*) begin
	main_request = 2'd0;
    main_request[0] = main_write_cmd_request;
    main_request[1] = main_read_cmd_request;
end
assign main_write_cmd_grant = (main_grant == 1'd0);
assign main_read_cmd_grant = (main_grant == 1'd1);
assign main_write_sink_sink_valid = main_aw_valid;
assign main_aw_ready = main_write_sink_sink_ready;
assign main_write_sink_sink_first = main_aw_first;
assign main_write_sink_sink_last = main_aw_last;
assign main_write_sink_sink_payload_addr = main_aw_payload_addr;
assign main_write_sink_sink_payload_burst = main_aw_payload_burst;
assign main_write_sink_sink_payload_len = main_aw_payload_len;
assign main_write_sink_sink_payload_size = main_aw_payload_size;
assign main_write_sink_sink_payload_lock = main_aw_payload_lock;
assign main_write_sink_sink_payload_prot = main_aw_payload_prot;
assign main_write_sink_sink_payload_cache = main_aw_payload_cache;
assign main_write_sink_sink_payload_qos = main_aw_payload_qos;
assign main_write_sink_sink_payload_region = main_aw_payload_region;
assign main_write_sink_sink_param_id = main_aw_param_id;
assign main_write_sink_sink_param_dest = main_aw_param_dest;
assign main_write_sink_sink_param_user = main_aw_param_user;
assign main_write_id_buffer_sink_valid = ((main_write_aw_valid & main_write_aw_first) & main_write_aw_ready);
assign main_write_id_buffer_sink_payload_id = main_write_aw_param_id;
always @(*) begin
	main_write_resp_buffer_sink_payload_id = 8'd0;
    if (((main_write_w_buffer_source_valid & main_write_w_buffer_source_last) & main_write_w_buffer_source_ready)) begin
        main_write_resp_buffer_sink_payload_id = main_write_id_buffer_source_payload_id;
    end
end
always @(*) begin
	main_write_resp_buffer_sink_valid = 1'd0;
    if (((main_write_w_buffer_source_valid & main_write_w_buffer_source_last) & main_write_w_buffer_source_ready)) begin
        main_write_resp_buffer_sink_valid = 1'd1;
    end
end
always @(*) begin
	main_write_id_buffer_source_ready = 1'd0;
    if (((main_write_w_buffer_source_valid & main_write_w_buffer_source_last) & main_write_w_buffer_source_ready)) begin
        main_write_id_buffer_source_ready = 1'd1;
    end
end
always @(*) begin
	main_write_resp_buffer_sink_payload_resp = 2'd0;
    if (((main_write_w_buffer_source_valid & main_write_w_buffer_source_last) & main_write_w_buffer_source_ready)) begin
        main_write_resp_buffer_sink_payload_resp = 1'd0;
    end
end
assign main_b_valid = main_write_resp_buffer_source_valid;
assign main_write_resp_buffer_source_ready = main_b_ready;
assign main_b_first = main_write_resp_buffer_source_first;
assign main_b_last = main_write_resp_buffer_source_last;
assign main_b_payload_resp = main_write_resp_buffer_source_payload_resp;
assign main_b_param_id = main_write_resp_buffer_source_payload_id;
assign main_write_w_buffer_queue = ((main_new_port_cmd_valid & main_new_port_cmd_ready) & main_new_port_cmd_payload_we);
assign main_write_w_buffer_dequeue = (main_write_w_buffer_source_valid & main_write_w_buffer_source_ready);
assign main_write_can_write = (main_write_w_buffer_level1 > main_write_w_buffer_level2);
assign main_write_cmd_request = (main_write_aw_valid & main_write_can_write);
always @(*) begin
	main_new_port_cmd_last = 1'd0;
    if ((main_write_cmd_request & main_write_cmd_grant)) begin
        main_new_port_cmd_last = main_write_aw_last;
    end
    if ((main_read_cmd_request & main_read_cmd_grant)) begin
        main_new_port_cmd_last = main_read_ar_last;
    end
end
always @(*) begin
	main_new_port_cmd_payload_we = 1'd0;
    if ((main_write_cmd_request & main_write_cmd_grant)) begin
        main_new_port_cmd_payload_we = 1'd1;
    end
    if ((main_read_cmd_request & main_read_cmd_grant)) begin
        main_new_port_cmd_payload_we = 1'd0;
    end
end
always @(*) begin
	main_write_aw_ready = 1'd0;
    if ((main_write_cmd_request & main_write_cmd_grant)) begin
        if (main_new_port_cmd_ready) begin
            main_write_aw_ready = 1'd1;
        end
    end
end
always @(*) begin
	main_new_port_cmd_payload_addr = 27'd0;
    if ((main_write_cmd_request & main_write_cmd_grant)) begin
        main_new_port_cmd_payload_addr = ((main_write_aw_payload_addr - 1'd0) >>> 2'd2);
    end
    if ((main_read_cmd_request & main_read_cmd_grant)) begin
        main_new_port_cmd_payload_addr = ((main_read_ar_payload_addr - 1'd0) >>> 2'd2);
    end
end
always @(*) begin
	main_new_port_cmd_valid = 1'd0;
    if ((main_write_cmd_request & main_write_cmd_grant)) begin
        main_new_port_cmd_valid = 1'd1;
    end
    if ((main_read_cmd_request & main_read_cmd_grant)) begin
        main_new_port_cmd_valid = 1'd1;
    end
end
always @(*) begin
	main_write_w_buffer_sink_valid = 1'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_valid = main_w_valid;
    end
end
always @(*) begin
	main_write_w_buffer_sink_first = 1'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_first = main_w_first;
    end
end
always @(*) begin
	main_write_w_buffer_sink_last = 1'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_last = main_w_last;
    end
end
always @(*) begin
	main_w_ready = 1'd0;
    if (main_write_axi_w_connect) begin
        main_w_ready = main_write_w_buffer_sink_ready;
    end
end
always @(*) begin
	main_write_w_buffer_sink_payload_data = 32'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_payload_data = main_w_payload_data;
    end
end
always @(*) begin
	main_write_w_buffer_sink_payload_strb = 4'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_payload_strb = main_w_payload_strb;
    end
end
always @(*) begin
	main_write_w_buffer_sink_param_id = 8'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_param_id = main_w_param_id;
    end
end
always @(*) begin
	main_write_w_buffer_sink_param_dest = 1'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_param_dest = main_w_param_dest;
    end
end
always @(*) begin
	main_write_w_buffer_sink_param_user = 1'd0;
    if (main_write_axi_w_connect) begin
        main_write_w_buffer_sink_param_user = main_w_param_user;
    end
end
assign main_new_port_wdata_valid = main_write_w_buffer_source_valid;
assign main_write_w_buffer_source_ready = main_new_port_wdata_ready;
assign main_new_port_wdata_first = main_write_w_buffer_source_first;
assign main_new_port_wdata_last = main_write_w_buffer_source_last;
assign main_new_port_wdata_payload_data = main_write_w_buffer_source_payload_data;
assign main_new_port_wdata_payload_we = main_write_w_buffer_source_payload_strb;
assign main_write_pipe_valid_sink_ready = ((~main_write_pipe_valid_source_valid) | main_write_pipe_valid_source_ready);
assign main_write_pipe_valid_sink_valid = main_write_sink_sink_valid;
assign main_write_sink_sink_ready = main_write_pipe_valid_sink_ready;
assign main_write_pipe_valid_sink_first = main_write_sink_sink_first;
assign main_write_pipe_valid_sink_last = main_write_sink_sink_last;
assign main_write_pipe_valid_sink_payload_addr = main_write_sink_sink_payload_addr;
assign main_write_pipe_valid_sink_payload_burst = main_write_sink_sink_payload_burst;
assign main_write_pipe_valid_sink_payload_len = main_write_sink_sink_payload_len;
assign main_write_pipe_valid_sink_payload_size = main_write_sink_sink_payload_size;
assign main_write_pipe_valid_sink_payload_lock = main_write_sink_sink_payload_lock;
assign main_write_pipe_valid_sink_payload_prot = main_write_sink_sink_payload_prot;
assign main_write_pipe_valid_sink_payload_cache = main_write_sink_sink_payload_cache;
assign main_write_pipe_valid_sink_payload_qos = main_write_sink_sink_payload_qos;
assign main_write_pipe_valid_sink_payload_region = main_write_sink_sink_payload_region;
assign main_write_pipe_valid_sink_param_id = main_write_sink_sink_param_id;
assign main_write_pipe_valid_sink_param_dest = main_write_sink_sink_param_dest;
assign main_write_pipe_valid_sink_param_user = main_write_sink_sink_param_user;
assign main_write_source_source_valid = main_write_pipe_valid_source_valid;
assign main_write_pipe_valid_source_ready = main_write_source_source_ready;
assign main_write_source_source_first = main_write_pipe_valid_source_first;
assign main_write_source_source_last = main_write_pipe_valid_source_last;
assign main_write_source_source_payload_addr = main_write_pipe_valid_source_payload_addr;
assign main_write_source_source_payload_burst = main_write_pipe_valid_source_payload_burst;
assign main_write_source_source_payload_len = main_write_pipe_valid_source_payload_len;
assign main_write_source_source_payload_size = main_write_pipe_valid_source_payload_size;
assign main_write_source_source_payload_lock = main_write_pipe_valid_source_payload_lock;
assign main_write_source_source_payload_prot = main_write_pipe_valid_source_payload_prot;
assign main_write_source_source_payload_cache = main_write_pipe_valid_source_payload_cache;
assign main_write_source_source_payload_qos = main_write_pipe_valid_source_payload_qos;
assign main_write_source_source_payload_region = main_write_pipe_valid_source_payload_region;
assign main_write_source_source_param_id = main_write_pipe_valid_source_param_id;
assign main_write_source_source_param_dest = main_write_pipe_valid_source_param_dest;
assign main_write_source_source_param_user = main_write_pipe_valid_source_param_user;
assign main_write_beat_size = (1'd1 <<< main_write_source_source_payload_size);
assign main_write_beat_wrap = (main_write_source_source_payload_len <<< main_write_source_source_payload_size);
assign main_write_aw_valid = (main_write_source_source_valid | (~main_write_aw_first));
assign main_write_aw_first = (main_write_beat_count == 1'd0);
assign main_write_aw_last = (main_write_beat_count == main_write_source_source_payload_len);
assign main_write_aw_payload_addr = ($signed({1'd0, main_write_source_source_payload_addr}) + main_write_beat_offset);
assign main_write_aw_param_id = main_write_source_source_param_id;
always @(*) begin
	main_write_source_source_ready = 1'd0;
    if (main_write_aw_ready) begin
        if (main_write_aw_last) begin
            main_write_source_source_ready = 1'd1;
        end
    end
end
assign main_write_w_buffer_syncfifo_din = {main_write_w_buffer_fifo_in_last, main_write_w_buffer_fifo_in_first, main_write_w_buffer_fifo_in_param_user, main_write_w_buffer_fifo_in_param_dest, main_write_w_buffer_fifo_in_param_id, main_write_w_buffer_fifo_in_payload_strb, main_write_w_buffer_fifo_in_payload_data};
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign {main_write_w_buffer_fifo_out_last, main_write_w_buffer_fifo_out_first, main_write_w_buffer_fifo_out_param_user, main_write_w_buffer_fifo_out_param_dest, main_write_w_buffer_fifo_out_param_id, main_write_w_buffer_fifo_out_payload_strb, main_write_w_buffer_fifo_out_payload_data} = main_write_w_buffer_syncfifo_dout;
assign main_write_w_buffer_sink_ready = main_write_w_buffer_syncfifo_writable;
assign main_write_w_buffer_syncfifo_we = main_write_w_buffer_sink_valid;
assign main_write_w_buffer_fifo_in_first = main_write_w_buffer_sink_first;
assign main_write_w_buffer_fifo_in_last = main_write_w_buffer_sink_last;
assign main_write_w_buffer_fifo_in_payload_data = main_write_w_buffer_sink_payload_data;
assign main_write_w_buffer_fifo_in_payload_strb = main_write_w_buffer_sink_payload_strb;
assign main_write_w_buffer_fifo_in_param_id = main_write_w_buffer_sink_param_id;
assign main_write_w_buffer_fifo_in_param_dest = main_write_w_buffer_sink_param_dest;
assign main_write_w_buffer_fifo_in_param_user = main_write_w_buffer_sink_param_user;
assign main_write_w_buffer_source_valid = main_write_w_buffer_readable;
assign main_write_w_buffer_source_first = main_write_w_buffer_fifo_out_first;
assign main_write_w_buffer_source_last = main_write_w_buffer_fifo_out_last;
assign main_write_w_buffer_source_payload_data = main_write_w_buffer_fifo_out_payload_data;
assign main_write_w_buffer_source_payload_strb = main_write_w_buffer_fifo_out_payload_strb;
assign main_write_w_buffer_source_param_id = main_write_w_buffer_fifo_out_param_id;
assign main_write_w_buffer_source_param_dest = main_write_w_buffer_fifo_out_param_dest;
assign main_write_w_buffer_source_param_user = main_write_w_buffer_fifo_out_param_user;
assign main_write_w_buffer_re = main_write_w_buffer_source_ready;
assign main_write_w_buffer_syncfifo_re = (main_write_w_buffer_syncfifo_readable & ((~main_write_w_buffer_readable) | main_write_w_buffer_re));
assign main_write_w_buffer_level1 = (main_write_w_buffer_level0 + main_write_w_buffer_readable);
always @(*) begin
	main_write_w_buffer_wrport_adr = 4'd0;
    if (main_write_w_buffer_replace) begin
        main_write_w_buffer_wrport_adr = (main_write_w_buffer_produce - 1'd1);
    end else begin
        main_write_w_buffer_wrport_adr = main_write_w_buffer_produce;
    end
end
assign main_write_w_buffer_wrport_dat_w = main_write_w_buffer_syncfifo_din;
assign main_write_w_buffer_wrport_we = (main_write_w_buffer_syncfifo_we & (main_write_w_buffer_syncfifo_writable | main_write_w_buffer_replace));
assign main_write_w_buffer_do_read = (main_write_w_buffer_syncfifo_readable & main_write_w_buffer_syncfifo_re);
assign main_write_w_buffer_rdport_adr = main_write_w_buffer_consume;
assign main_write_w_buffer_syncfifo_dout = main_write_w_buffer_rdport_dat_r;
assign main_write_w_buffer_rdport_re = main_write_w_buffer_do_read;
assign main_write_w_buffer_syncfifo_writable = (main_write_w_buffer_level0 != 5'd16);
assign main_write_w_buffer_syncfifo_readable = (main_write_w_buffer_level0 != 1'd0);
assign main_write_id_buffer_syncfifo_din = {main_write_id_buffer_fifo_in_last, main_write_id_buffer_fifo_in_first, main_write_id_buffer_fifo_in_payload_id};
assign {main_write_id_buffer_fifo_out_last, main_write_id_buffer_fifo_out_first, main_write_id_buffer_fifo_out_payload_id} = main_write_id_buffer_syncfifo_dout;
assign {main_write_id_buffer_fifo_out_last, main_write_id_buffer_fifo_out_first, main_write_id_buffer_fifo_out_payload_id} = main_write_id_buffer_syncfifo_dout;
assign {main_write_id_buffer_fifo_out_last, main_write_id_buffer_fifo_out_first, main_write_id_buffer_fifo_out_payload_id} = main_write_id_buffer_syncfifo_dout;
assign main_write_id_buffer_sink_ready = main_write_id_buffer_syncfifo_writable;
assign main_write_id_buffer_syncfifo_we = main_write_id_buffer_sink_valid;
assign main_write_id_buffer_fifo_in_first = main_write_id_buffer_sink_first;
assign main_write_id_buffer_fifo_in_last = main_write_id_buffer_sink_last;
assign main_write_id_buffer_fifo_in_payload_id = main_write_id_buffer_sink_payload_id;
assign main_write_id_buffer_source_valid = main_write_id_buffer_syncfifo_readable;
assign main_write_id_buffer_source_first = main_write_id_buffer_fifo_out_first;
assign main_write_id_buffer_source_last = main_write_id_buffer_fifo_out_last;
assign main_write_id_buffer_source_payload_id = main_write_id_buffer_fifo_out_payload_id;
assign main_write_id_buffer_syncfifo_re = main_write_id_buffer_source_ready;
always @(*) begin
	main_write_id_buffer_wrport_adr = 4'd0;
    if (main_write_id_buffer_replace) begin
        main_write_id_buffer_wrport_adr = (main_write_id_buffer_produce - 1'd1);
    end else begin
        main_write_id_buffer_wrport_adr = main_write_id_buffer_produce;
    end
end
assign main_write_id_buffer_wrport_dat_w = main_write_id_buffer_syncfifo_din;
assign main_write_id_buffer_wrport_we = (main_write_id_buffer_syncfifo_we & (main_write_id_buffer_syncfifo_writable | main_write_id_buffer_replace));
assign main_write_id_buffer_do_read = (main_write_id_buffer_syncfifo_readable & main_write_id_buffer_syncfifo_re);
assign main_write_id_buffer_rdport_adr = main_write_id_buffer_consume;
assign main_write_id_buffer_syncfifo_dout = main_write_id_buffer_rdport_dat_r;
assign main_write_id_buffer_syncfifo_writable = (main_write_id_buffer_level != 5'd16);
assign main_write_id_buffer_syncfifo_readable = (main_write_id_buffer_level != 1'd0);
assign main_write_resp_buffer_syncfifo_din = {main_write_resp_buffer_fifo_in_last, main_write_resp_buffer_fifo_in_first, main_write_resp_buffer_fifo_in_payload_resp, main_write_resp_buffer_fifo_in_payload_id};
assign {main_write_resp_buffer_fifo_out_last, main_write_resp_buffer_fifo_out_first, main_write_resp_buffer_fifo_out_payload_resp, main_write_resp_buffer_fifo_out_payload_id} = main_write_resp_buffer_syncfifo_dout;
assign {main_write_resp_buffer_fifo_out_last, main_write_resp_buffer_fifo_out_first, main_write_resp_buffer_fifo_out_payload_resp, main_write_resp_buffer_fifo_out_payload_id} = main_write_resp_buffer_syncfifo_dout;
assign {main_write_resp_buffer_fifo_out_last, main_write_resp_buffer_fifo_out_first, main_write_resp_buffer_fifo_out_payload_resp, main_write_resp_buffer_fifo_out_payload_id} = main_write_resp_buffer_syncfifo_dout;
assign {main_write_resp_buffer_fifo_out_last, main_write_resp_buffer_fifo_out_first, main_write_resp_buffer_fifo_out_payload_resp, main_write_resp_buffer_fifo_out_payload_id} = main_write_resp_buffer_syncfifo_dout;
assign main_write_resp_buffer_sink_ready = main_write_resp_buffer_syncfifo_writable;
assign main_write_resp_buffer_syncfifo_we = main_write_resp_buffer_sink_valid;
assign main_write_resp_buffer_fifo_in_first = main_write_resp_buffer_sink_first;
assign main_write_resp_buffer_fifo_in_last = main_write_resp_buffer_sink_last;
assign main_write_resp_buffer_fifo_in_payload_id = main_write_resp_buffer_sink_payload_id;
assign main_write_resp_buffer_fifo_in_payload_resp = main_write_resp_buffer_sink_payload_resp;
assign main_write_resp_buffer_source_valid = main_write_resp_buffer_syncfifo_readable;
assign main_write_resp_buffer_source_first = main_write_resp_buffer_fifo_out_first;
assign main_write_resp_buffer_source_last = main_write_resp_buffer_fifo_out_last;
assign main_write_resp_buffer_source_payload_id = main_write_resp_buffer_fifo_out_payload_id;
assign main_write_resp_buffer_source_payload_resp = main_write_resp_buffer_fifo_out_payload_resp;
assign main_write_resp_buffer_syncfifo_re = main_write_resp_buffer_source_ready;
always @(*) begin
	main_write_resp_buffer_wrport_adr = 4'd0;
    if (main_write_resp_buffer_replace) begin
        main_write_resp_buffer_wrport_adr = (main_write_resp_buffer_produce - 1'd1);
    end else begin
        main_write_resp_buffer_wrport_adr = main_write_resp_buffer_produce;
    end
end
assign main_write_resp_buffer_wrport_dat_w = main_write_resp_buffer_syncfifo_din;
assign main_write_resp_buffer_wrport_we = (main_write_resp_buffer_syncfifo_we & (main_write_resp_buffer_syncfifo_writable | main_write_resp_buffer_replace));
assign main_write_resp_buffer_do_read = (main_write_resp_buffer_syncfifo_readable & main_write_resp_buffer_syncfifo_re);
assign main_write_resp_buffer_rdport_adr = main_write_resp_buffer_consume;
assign main_write_resp_buffer_syncfifo_dout = main_write_resp_buffer_rdport_dat_r;
assign main_write_resp_buffer_syncfifo_writable = (main_write_resp_buffer_level != 5'd16);
assign main_write_resp_buffer_syncfifo_readable = (main_write_resp_buffer_level != 1'd0);
assign main_read_sink_sink_valid = main_ar_valid;
assign main_ar_ready = main_read_sink_sink_ready;
assign main_read_sink_sink_first = main_ar_first;
assign main_read_sink_sink_last = main_ar_last;
assign main_read_sink_sink_payload_addr = main_ar_payload_addr;
assign main_read_sink_sink_payload_burst = main_ar_payload_burst;
assign main_read_sink_sink_payload_len = main_ar_payload_len;
assign main_read_sink_sink_payload_size = main_ar_payload_size;
assign main_read_sink_sink_payload_lock = main_ar_payload_lock;
assign main_read_sink_sink_payload_prot = main_ar_payload_prot;
assign main_read_sink_sink_payload_cache = main_ar_payload_cache;
assign main_read_sink_sink_payload_qos = main_ar_payload_qos;
assign main_read_sink_sink_payload_region = main_ar_payload_region;
assign main_read_sink_sink_param_id = main_ar_param_id;
assign main_read_sink_sink_param_dest = main_ar_param_dest;
assign main_read_sink_sink_param_user = main_ar_param_user;
assign main_read_r_buffer_queue = ((main_new_port_cmd_valid & main_new_port_cmd_ready) & (~main_new_port_cmd_payload_we));
assign main_read_r_buffer_dequeue = (main_read_r_buffer_source_valid & main_read_r_buffer_source_ready);
assign main_read_can_read = (main_read_r_buffer_level2 != 5'd16);
assign main_read_id_buffer_sink_valid = (main_read_ar_valid & main_read_ar_ready);
assign main_read_id_buffer_sink_last = main_read_ar_last;
assign main_read_id_buffer_sink_payload_id = main_read_ar_param_id;
assign main_r_last = main_read_id_buffer_source_last;
assign main_r_param_id = main_read_id_buffer_source_payload_id;
assign main_read_id_buffer_source_ready = (main_r_valid & main_r_ready);
assign main_read_cmd_request = (main_read_ar_valid & main_read_can_read);
always @(*) begin
	main_read_ar_ready = 1'd0;
    if ((main_read_cmd_request & main_read_cmd_grant)) begin
        if (main_new_port_cmd_ready) begin
            main_read_ar_ready = 1'd1;
        end
    end
end
assign main_read_r_buffer_sink_valid = main_new_port_rdata_valid;
assign main_new_port_rdata_ready = main_read_r_buffer_sink_ready;
assign main_read_r_buffer_sink_first = main_new_port_rdata_first;
assign main_read_r_buffer_sink_last = main_new_port_rdata_last;
assign main_read_r_buffer_sink_payload_data = main_new_port_rdata_payload_data;
assign main_r_valid = main_read_r_buffer_source_valid;
assign main_read_r_buffer_source_ready = main_r_ready;
assign main_r_first = main_read_r_buffer_source_first;
always @(*) begin
	main_r_payload_resp = 2'd0;
    main_r_payload_resp = main_read_r_buffer_source_payload_resp;
    main_r_payload_resp = 1'd0;
end
assign main_r_payload_data = main_read_r_buffer_source_payload_data;
assign main_r_param_dest = main_read_r_buffer_source_param_dest;
assign main_r_param_user = main_read_r_buffer_source_param_user;
assign main_read_pipe_valid_sink_ready = ((~main_read_pipe_valid_source_valid) | main_read_pipe_valid_source_ready);
assign main_read_pipe_valid_sink_valid = main_read_sink_sink_valid;
assign main_read_sink_sink_ready = main_read_pipe_valid_sink_ready;
assign main_read_pipe_valid_sink_first = main_read_sink_sink_first;
assign main_read_pipe_valid_sink_last = main_read_sink_sink_last;
assign main_read_pipe_valid_sink_payload_addr = main_read_sink_sink_payload_addr;
assign main_read_pipe_valid_sink_payload_burst = main_read_sink_sink_payload_burst;
assign main_read_pipe_valid_sink_payload_len = main_read_sink_sink_payload_len;
assign main_read_pipe_valid_sink_payload_size = main_read_sink_sink_payload_size;
assign main_read_pipe_valid_sink_payload_lock = main_read_sink_sink_payload_lock;
assign main_read_pipe_valid_sink_payload_prot = main_read_sink_sink_payload_prot;
assign main_read_pipe_valid_sink_payload_cache = main_read_sink_sink_payload_cache;
assign main_read_pipe_valid_sink_payload_qos = main_read_sink_sink_payload_qos;
assign main_read_pipe_valid_sink_payload_region = main_read_sink_sink_payload_region;
assign main_read_pipe_valid_sink_param_id = main_read_sink_sink_param_id;
assign main_read_pipe_valid_sink_param_dest = main_read_sink_sink_param_dest;
assign main_read_pipe_valid_sink_param_user = main_read_sink_sink_param_user;
assign main_read_source_source_valid = main_read_pipe_valid_source_valid;
assign main_read_pipe_valid_source_ready = main_read_source_source_ready;
assign main_read_source_source_first = main_read_pipe_valid_source_first;
assign main_read_source_source_last = main_read_pipe_valid_source_last;
assign main_read_source_source_payload_addr = main_read_pipe_valid_source_payload_addr;
assign main_read_source_source_payload_burst = main_read_pipe_valid_source_payload_burst;
assign main_read_source_source_payload_len = main_read_pipe_valid_source_payload_len;
assign main_read_source_source_payload_size = main_read_pipe_valid_source_payload_size;
assign main_read_source_source_payload_lock = main_read_pipe_valid_source_payload_lock;
assign main_read_source_source_payload_prot = main_read_pipe_valid_source_payload_prot;
assign main_read_source_source_payload_cache = main_read_pipe_valid_source_payload_cache;
assign main_read_source_source_payload_qos = main_read_pipe_valid_source_payload_qos;
assign main_read_source_source_payload_region = main_read_pipe_valid_source_payload_region;
assign main_read_source_source_param_id = main_read_pipe_valid_source_param_id;
assign main_read_source_source_param_dest = main_read_pipe_valid_source_param_dest;
assign main_read_source_source_param_user = main_read_pipe_valid_source_param_user;
assign main_read_beat_size = (1'd1 <<< main_read_source_source_payload_size);
assign main_read_beat_wrap = (main_read_source_source_payload_len <<< main_read_source_source_payload_size);
assign main_read_ar_valid = (main_read_source_source_valid | (~main_read_ar_first));
assign main_read_ar_first = (main_read_beat_count == 1'd0);
assign main_read_ar_last = (main_read_beat_count == main_read_source_source_payload_len);
assign main_read_ar_payload_addr = ($signed({1'd0, main_read_source_source_payload_addr}) + main_read_beat_offset);
assign main_read_ar_param_id = main_read_source_source_param_id;
always @(*) begin
	main_read_source_source_ready = 1'd0;
    if (main_read_ar_ready) begin
        if (main_read_ar_last) begin
            main_read_source_source_ready = 1'd1;
        end
    end
end
assign main_read_r_buffer_syncfifo_din = {main_read_r_buffer_fifo_in_last, main_read_r_buffer_fifo_in_first, main_read_r_buffer_fifo_in_param_user, main_read_r_buffer_fifo_in_param_dest, main_read_r_buffer_fifo_in_param_id, main_read_r_buffer_fifo_in_payload_data, main_read_r_buffer_fifo_in_payload_resp};
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign {main_read_r_buffer_fifo_out_last, main_read_r_buffer_fifo_out_first, main_read_r_buffer_fifo_out_param_user, main_read_r_buffer_fifo_out_param_dest, main_read_r_buffer_fifo_out_param_id, main_read_r_buffer_fifo_out_payload_data, main_read_r_buffer_fifo_out_payload_resp} = main_read_r_buffer_syncfifo_dout;
assign main_read_r_buffer_sink_ready = main_read_r_buffer_syncfifo_writable;
assign main_read_r_buffer_syncfifo_we = main_read_r_buffer_sink_valid;
assign main_read_r_buffer_fifo_in_first = main_read_r_buffer_sink_first;
assign main_read_r_buffer_fifo_in_last = main_read_r_buffer_sink_last;
assign main_read_r_buffer_fifo_in_payload_resp = main_read_r_buffer_sink_payload_resp;
assign main_read_r_buffer_fifo_in_payload_data = main_read_r_buffer_sink_payload_data;
assign main_read_r_buffer_fifo_in_param_id = main_read_r_buffer_sink_param_id;
assign main_read_r_buffer_fifo_in_param_dest = main_read_r_buffer_sink_param_dest;
assign main_read_r_buffer_fifo_in_param_user = main_read_r_buffer_sink_param_user;
assign main_read_r_buffer_source_valid = main_read_r_buffer_readable;
assign main_read_r_buffer_source_first = main_read_r_buffer_fifo_out_first;
assign main_read_r_buffer_source_last = main_read_r_buffer_fifo_out_last;
assign main_read_r_buffer_source_payload_resp = main_read_r_buffer_fifo_out_payload_resp;
assign main_read_r_buffer_source_payload_data = main_read_r_buffer_fifo_out_payload_data;
assign main_read_r_buffer_source_param_id = main_read_r_buffer_fifo_out_param_id;
assign main_read_r_buffer_source_param_dest = main_read_r_buffer_fifo_out_param_dest;
assign main_read_r_buffer_source_param_user = main_read_r_buffer_fifo_out_param_user;
assign main_read_r_buffer_re = main_read_r_buffer_source_ready;
assign main_read_r_buffer_syncfifo_re = (main_read_r_buffer_syncfifo_readable & ((~main_read_r_buffer_readable) | main_read_r_buffer_re));
assign main_read_r_buffer_level1 = (main_read_r_buffer_level0 + main_read_r_buffer_readable);
always @(*) begin
	main_read_r_buffer_wrport_adr = 4'd0;
    if (main_read_r_buffer_replace) begin
        main_read_r_buffer_wrport_adr = (main_read_r_buffer_produce - 1'd1);
    end else begin
        main_read_r_buffer_wrport_adr = main_read_r_buffer_produce;
    end
end
assign main_read_r_buffer_wrport_dat_w = main_read_r_buffer_syncfifo_din;
assign main_read_r_buffer_wrport_we = (main_read_r_buffer_syncfifo_we & (main_read_r_buffer_syncfifo_writable | main_read_r_buffer_replace));
assign main_read_r_buffer_do_read = (main_read_r_buffer_syncfifo_readable & main_read_r_buffer_syncfifo_re);
assign main_read_r_buffer_rdport_adr = main_read_r_buffer_consume;
assign main_read_r_buffer_syncfifo_dout = main_read_r_buffer_rdport_dat_r;
assign main_read_r_buffer_rdport_re = main_read_r_buffer_do_read;
assign main_read_r_buffer_syncfifo_writable = (main_read_r_buffer_level0 != 5'd16);
assign main_read_r_buffer_syncfifo_readable = (main_read_r_buffer_level0 != 1'd0);
assign main_read_id_buffer_syncfifo_din = {main_read_id_buffer_fifo_in_last, main_read_id_buffer_fifo_in_first, main_read_id_buffer_fifo_in_payload_id};
assign {main_read_id_buffer_fifo_out_last, main_read_id_buffer_fifo_out_first, main_read_id_buffer_fifo_out_payload_id} = main_read_id_buffer_syncfifo_dout;
assign {main_read_id_buffer_fifo_out_last, main_read_id_buffer_fifo_out_first, main_read_id_buffer_fifo_out_payload_id} = main_read_id_buffer_syncfifo_dout;
assign {main_read_id_buffer_fifo_out_last, main_read_id_buffer_fifo_out_first, main_read_id_buffer_fifo_out_payload_id} = main_read_id_buffer_syncfifo_dout;
assign main_read_id_buffer_sink_ready = main_read_id_buffer_syncfifo_writable;
assign main_read_id_buffer_syncfifo_we = main_read_id_buffer_sink_valid;
assign main_read_id_buffer_fifo_in_first = main_read_id_buffer_sink_first;
assign main_read_id_buffer_fifo_in_last = main_read_id_buffer_sink_last;
assign main_read_id_buffer_fifo_in_payload_id = main_read_id_buffer_sink_payload_id;
assign main_read_id_buffer_source_valid = main_read_id_buffer_syncfifo_readable;
assign main_read_id_buffer_source_first = main_read_id_buffer_fifo_out_first;
assign main_read_id_buffer_source_last = main_read_id_buffer_fifo_out_last;
assign main_read_id_buffer_source_payload_id = main_read_id_buffer_fifo_out_payload_id;
assign main_read_id_buffer_syncfifo_re = main_read_id_buffer_source_ready;
always @(*) begin
	main_read_id_buffer_wrport_adr = 4'd0;
    if (main_read_id_buffer_replace) begin
        main_read_id_buffer_wrport_adr = (main_read_id_buffer_produce - 1'd1);
    end else begin
        main_read_id_buffer_wrport_adr = main_read_id_buffer_produce;
    end
end
assign main_read_id_buffer_wrport_dat_w = main_read_id_buffer_syncfifo_din;
assign main_read_id_buffer_wrport_we = (main_read_id_buffer_syncfifo_we & (main_read_id_buffer_syncfifo_writable | main_read_id_buffer_replace));
assign main_read_id_buffer_do_read = (main_read_id_buffer_syncfifo_readable & main_read_id_buffer_syncfifo_re);
assign main_read_id_buffer_rdport_adr = main_read_id_buffer_consume;
assign main_read_id_buffer_syncfifo_dout = main_read_id_buffer_rdport_dat_r;
assign main_read_id_buffer_syncfifo_writable = (main_read_id_buffer_level != 5'd16);
assign main_read_id_buffer_syncfifo_readable = (main_read_id_buffer_level != 1'd0);
always @(*) begin
	builder_dramcoresoc_wishbone2csr_next_state = 1'd0;
    builder_dramcoresoc_wishbone2csr_next_state = builder_dramcoresoc_wishbone2csr_state;
    case (builder_dramcoresoc_wishbone2csr_state)
        1'd1: begin
            builder_dramcoresoc_wishbone2csr_next_state = 1'd0;
        end
        default: begin
            if ((builder_dramcoresoc_wishbone_cyc & builder_dramcoresoc_wishbone_stb)) begin
                builder_dramcoresoc_wishbone2csr_next_state = 1'd1;
            end
        end
    endcase
end
always @(*) begin
	builder_dramcoresoc_wishbone_dat_r = 32'd0;
    case (builder_dramcoresoc_wishbone2csr_state)
        1'd1: begin
            builder_dramcoresoc_wishbone_dat_r = builder_dramcoresoc_dat_r;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	builder_dramcoresoc_wishbone_ack = 1'd0;
    case (builder_dramcoresoc_wishbone2csr_state)
        1'd1: begin
            builder_dramcoresoc_wishbone_ack = 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
	builder_dramcoresoc_adr = 14'd0;
    case (builder_dramcoresoc_wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            if ((builder_dramcoresoc_wishbone_cyc & builder_dramcoresoc_wishbone_stb)) begin
                builder_dramcoresoc_adr = builder_dramcoresoc_wishbone_adr;
            end
        end
    endcase
end
always @(*) begin
	builder_dramcoresoc_we = 1'd0;
    case (builder_dramcoresoc_wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            if ((builder_dramcoresoc_wishbone_cyc & builder_dramcoresoc_wishbone_stb)) begin
                builder_dramcoresoc_we = (builder_dramcoresoc_wishbone_we & (builder_dramcoresoc_wishbone_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
	builder_dramcoresoc_dat_w = 32'd0;
    case (builder_dramcoresoc_wishbone2csr_state)
        1'd1: begin
        end
        default: begin
            builder_dramcoresoc_dat_w = builder_dramcoresoc_wishbone_dat_w;
        end
    endcase
end
assign builder_csrbank0_sel = (builder_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csrbank0_init_done0_r = builder_interface0_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank0_init_done0_re = 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank0_init_done0_re = builder_interface0_bank_bus_we;
    end
end
always @(*) begin
	builder_csrbank0_init_done0_we = 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank0_init_done0_we = (~builder_interface0_bank_bus_we);
    end
end
assign builder_csrbank0_init_error0_r = builder_interface0_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank0_init_error0_we = 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank0_init_error0_we = (~builder_interface0_bank_bus_we);
    end
end
always @(*) begin
	builder_csrbank0_init_error0_re = 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank0_init_error0_re = builder_interface0_bank_bus_we;
    end
end
assign builder_csrbank0_init_done0_w = main_init_done_storage;
assign builder_csrbank0_init_error0_w = main_init_error_storage;
assign builder_csrbank1_sel = (builder_interface1_bank_bus_adr[13:9] == 1'd1);
assign builder_csrbank1_rst0_r = builder_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank1_rst0_we = 1'd0;
    if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank1_rst0_we = (~builder_interface1_bank_bus_we);
    end
end
always @(*) begin
	builder_csrbank1_rst0_re = 1'd0;
    if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank1_rst0_re = builder_interface1_bank_bus_we;
    end
end
assign builder_csrbank1_rdphase0_r = builder_interface1_bank_bus_dat_w[2:0];
always @(*) begin
	builder_csrbank1_rdphase0_we = 1'd0;
    if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank1_rdphase0_we = (~builder_interface1_bank_bus_we);
    end
end
always @(*) begin
	builder_csrbank1_rdphase0_re = 1'd0;
    if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank1_rdphase0_re = builder_interface1_bank_bus_we;
    end
end
assign builder_csrbank1_wrphase0_r = builder_interface1_bank_bus_dat_w[2:0];
always @(*) begin
	builder_csrbank1_wrphase0_re = 1'd0;
    if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank1_wrphase0_re = builder_interface1_bank_bus_we;
    end
end
always @(*) begin
	builder_csrbank1_wrphase0_we = 1'd0;
    if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank1_wrphase0_we = (~builder_interface1_bank_bus_we);
    end
end
assign builder_csrbank1_rst0_w = main_ddrphy_rst_storage;
assign builder_csrbank1_rdphase0_w = main_ddrphy_rdphase_storage[2:0];
assign builder_csrbank1_wrphase0_w = main_ddrphy_wrphase_storage[2:0];
assign builder_csrbank2_sel = (builder_interface2_bank_bus_adr[13:9] == 2'd2);
assign builder_csrbank2_controller_tRP0_r = builder_interface2_bank_bus_dat_w[2:0];
always @(*) begin
	builder_csrbank2_controller_tRP0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank2_controller_tRP0_re = builder_interface2_bank_bus_we;
    end
end
always @(*) begin
	builder_csrbank2_controller_tRP0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank2_controller_tRP0_we = (~builder_interface2_bank_bus_we);
    end
end
assign builder_csrbank2_controller_tRCD0_r = builder_interface2_bank_bus_dat_w[2:0];
always @(*) begin
	builder_csrbank2_controller_tRCD0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank2_controller_tRCD0_we = (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
	builder_csrbank2_controller_tRCD0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank2_controller_tRCD0_re = builder_interface2_bank_bus_we;
    end
end
assign builder_csrbank2_controller_tWR0_r = builder_interface2_bank_bus_dat_w[2:0];
always @(*) begin
	builder_csrbank2_controller_tWR0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank2_controller_tWR0_we = (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
	builder_csrbank2_controller_tWR0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank2_controller_tWR0_re = builder_interface2_bank_bus_we;
    end
end
assign builder_csrbank2_controller_tWTR0_r = builder_interface2_bank_bus_dat_w[2:0];
always @(*) begin
	builder_csrbank2_controller_tWTR0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank2_controller_tWTR0_re = builder_interface2_bank_bus_we;
    end
end
always @(*) begin
	builder_csrbank2_controller_tWTR0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank2_controller_tWTR0_we = (~builder_interface2_bank_bus_we);
    end
end
assign builder_csrbank2_controller_tREFI0_r = builder_interface2_bank_bus_dat_w[8:0];
always @(*) begin
	builder_csrbank2_controller_tREFI0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csrbank2_controller_tREFI0_we = (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
	builder_csrbank2_controller_tREFI0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csrbank2_controller_tREFI0_re = builder_interface2_bank_bus_we;
    end
end
assign builder_csrbank2_controller_tRFC0_r = builder_interface2_bank_bus_dat_w[5:0];
always @(*) begin
	builder_csrbank2_controller_tRFC0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csrbank2_controller_tRFC0_re = builder_interface2_bank_bus_we;
    end
end
always @(*) begin
	builder_csrbank2_controller_tRFC0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csrbank2_controller_tRFC0_we = (~builder_interface2_bank_bus_we);
    end
end
assign builder_csrbank2_controller_tFAW0_r = builder_interface2_bank_bus_dat_w[2:0];
always @(*) begin
	builder_csrbank2_controller_tFAW0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csrbank2_controller_tFAW0_re = builder_interface2_bank_bus_we;
    end
end
always @(*) begin
	builder_csrbank2_controller_tFAW0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csrbank2_controller_tFAW0_we = (~builder_interface2_bank_bus_we);
    end
end
assign builder_csrbank2_controller_tCCD0_r = builder_interface2_bank_bus_dat_w[4:0];
always @(*) begin
	builder_csrbank2_controller_tCCD0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csrbank2_controller_tCCD0_we = (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
	builder_csrbank2_controller_tCCD0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csrbank2_controller_tCCD0_re = builder_interface2_bank_bus_we;
    end
end
assign builder_csrbank2_controller_tCCD_WR0_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank2_controller_tCCD_WR0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd8))) begin
        builder_csrbank2_controller_tCCD_WR0_re = builder_interface2_bank_bus_we;
    end
end
always @(*) begin
	builder_csrbank2_controller_tCCD_WR0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd8))) begin
        builder_csrbank2_controller_tCCD_WR0_we = (~builder_interface2_bank_bus_we);
    end
end
assign builder_csrbank2_controller_tRTP0_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank2_controller_tRTP0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd9))) begin
        builder_csrbank2_controller_tRTP0_we = (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
	builder_csrbank2_controller_tRTP0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd9))) begin
        builder_csrbank2_controller_tRTP0_re = builder_interface2_bank_bus_we;
    end
end
assign builder_csrbank2_controller_tRRD0_r = builder_interface2_bank_bus_dat_w[2:0];
always @(*) begin
	builder_csrbank2_controller_tRRD0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd10))) begin
        builder_csrbank2_controller_tRRD0_we = (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
	builder_csrbank2_controller_tRRD0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd10))) begin
        builder_csrbank2_controller_tRRD0_re = builder_interface2_bank_bus_we;
    end
end
assign builder_csrbank2_controller_tRC0_r = builder_interface2_bank_bus_dat_w[3:0];
always @(*) begin
	builder_csrbank2_controller_tRC0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csrbank2_controller_tRC0_re = builder_interface2_bank_bus_we;
    end
end
always @(*) begin
	builder_csrbank2_controller_tRC0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd11))) begin
        builder_csrbank2_controller_tRC0_we = (~builder_interface2_bank_bus_we);
    end
end
assign builder_csrbank2_controller_tRAS0_r = builder_interface2_bank_bus_dat_w[2:0];
always @(*) begin
	builder_csrbank2_controller_tRAS0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csrbank2_controller_tRAS0_we = (~builder_interface2_bank_bus_we);
    end
end
always @(*) begin
	builder_csrbank2_controller_tRAS0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd12))) begin
        builder_csrbank2_controller_tRAS0_re = builder_interface2_bank_bus_we;
    end
end
assign builder_csrbank2_controller_phy_ctl0_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank2_controller_phy_ctl0_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd13))) begin
        builder_csrbank2_controller_phy_ctl0_re = builder_interface2_bank_bus_we;
    end
end
always @(*) begin
	builder_csrbank2_controller_phy_ctl0_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd13))) begin
        builder_csrbank2_controller_phy_ctl0_we = (~builder_interface2_bank_bus_we);
    end
end
assign builder_csrbank2_controller_phy_sts_r = builder_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csrbank2_controller_phy_sts_re = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd14))) begin
        builder_csrbank2_controller_phy_sts_re = builder_interface2_bank_bus_we;
    end
end
always @(*) begin
	builder_csrbank2_controller_phy_sts_we = 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 4'd14))) begin
        builder_csrbank2_controller_phy_sts_we = (~builder_interface2_bank_bus_we);
    end
end
assign builder_csrbank2_controller_tRP0_w = main_dram_ctrl_csrstorage0_storage[2:0];
assign builder_csrbank2_controller_tRCD0_w = main_dram_ctrl_csrstorage1_storage[2:0];
assign builder_csrbank2_controller_tWR0_w = main_dram_ctrl_csrstorage2_storage[2:0];
assign builder_csrbank2_controller_tWTR0_w = main_dram_ctrl_csrstorage3_storage[2:0];
assign builder_csrbank2_controller_tREFI0_w = main_dram_ctrl_csrstorage4_storage[8:0];
assign builder_csrbank2_controller_tRFC0_w = main_dram_ctrl_csrstorage5_storage[5:0];
assign builder_csrbank2_controller_tFAW0_w = main_dram_ctrl_csrstorage6_storage[2:0];
assign builder_csrbank2_controller_tCCD0_w = main_dram_ctrl_csrstorage7_storage[4:0];
assign builder_csrbank2_controller_tCCD_WR0_w = main_dram_ctrl_csrstorage8_storage;
assign builder_csrbank2_controller_tRTP0_w = main_dram_ctrl_csrstorage9_storage;
assign builder_csrbank2_controller_tRRD0_w = main_dram_ctrl_csrstorage10_storage[2:0];
assign builder_csrbank2_controller_tRC0_w = main_dram_ctrl_csrstorage11_storage[3:0];
assign builder_csrbank2_controller_tRAS0_w = main_dram_ctrl_csrstorage12_storage[2:0];
always @(*) begin
	main_dram_ctrl_init_req = 1'd0;
    if (main_dram_ctrl_phy_ctl_re) begin
        main_dram_ctrl_init_req = main_dram_ctrl_phy_ctl_storage;
    end
end
assign builder_csrbank2_controller_phy_ctl0_w = main_dram_ctrl_phy_ctl_storage;
assign main_dram_ctrl_phy_sts_status = main_dram_ctrl_init_done;
assign builder_csrbank2_controller_phy_sts_w = main_dram_ctrl_phy_sts_status;
assign main_dram_ctrl_phy_sts_we = builder_csrbank2_controller_phy_sts_we;
assign builder_csr_interconnect_adr = builder_dramcoresoc_adr;
assign builder_csr_interconnect_we = builder_dramcoresoc_we;
assign builder_csr_interconnect_dat_w = builder_dramcoresoc_dat_w;
assign builder_dramcoresoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = ((builder_interface0_bank_bus_dat_r | builder_interface1_bank_bus_dat_r) | builder_interface2_bank_bus_dat_r);
always @(*) begin
	builder_rhs_array_muxed0 = 30'd0;
    case (builder_grant)
        default: begin
            builder_rhs_array_muxed0 = main_wb_bus_adr;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed1 = 32'd0;
    case (builder_grant)
        default: begin
            builder_rhs_array_muxed1 = main_wb_bus_dat_w;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed2 = 4'd0;
    case (builder_grant)
        default: begin
            builder_rhs_array_muxed2 = main_wb_bus_sel;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed3 = 1'd0;
    case (builder_grant)
        default: begin
            builder_rhs_array_muxed3 = main_wb_bus_cyc;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed4 = 1'd0;
    case (builder_grant)
        default: begin
            builder_rhs_array_muxed4 = main_wb_bus_stb;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed5 = 1'd0;
    case (builder_grant)
        default: begin
            builder_rhs_array_muxed5 = main_wb_bus_we;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed6 = 3'd0;
    case (builder_grant)
        default: begin
            builder_rhs_array_muxed6 = main_wb_bus_cti;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed7 = 2'd0;
    case (builder_grant)
        default: begin
            builder_rhs_array_muxed7 = main_wb_bus_bte;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed8 = 1'd0;
    case (builder_grant)
        default: begin
            builder_rhs_array_muxed8 = main_wb_bus_cyc;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed9 = 1'd0;
    case (main_dram_ctrl_choose_cmd_grant)
        1'd0: begin
            builder_rhs_array_muxed9 = main_dram_ctrl_choose_cmd_valids[0];
        end
        1'd1: begin
            builder_rhs_array_muxed9 = main_dram_ctrl_choose_cmd_valids[1];
        end
        2'd2: begin
            builder_rhs_array_muxed9 = main_dram_ctrl_choose_cmd_valids[2];
        end
        2'd3: begin
            builder_rhs_array_muxed9 = main_dram_ctrl_choose_cmd_valids[3];
        end
        3'd4: begin
            builder_rhs_array_muxed9 = main_dram_ctrl_choose_cmd_valids[4];
        end
        3'd5: begin
            builder_rhs_array_muxed9 = main_dram_ctrl_choose_cmd_valids[5];
        end
        3'd6: begin
            builder_rhs_array_muxed9 = main_dram_ctrl_choose_cmd_valids[6];
        end
        default: begin
            builder_rhs_array_muxed9 = main_dram_ctrl_choose_cmd_valids[7];
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed10 = 15'd0;
    case (main_dram_ctrl_choose_cmd_grant)
        1'd0: begin
            builder_rhs_array_muxed10 = main_dram_ctrl_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            builder_rhs_array_muxed10 = main_dram_ctrl_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            builder_rhs_array_muxed10 = main_dram_ctrl_bankmachine2_cmd_payload_a;
        end
        2'd3: begin
            builder_rhs_array_muxed10 = main_dram_ctrl_bankmachine3_cmd_payload_a;
        end
        3'd4: begin
            builder_rhs_array_muxed10 = main_dram_ctrl_bankmachine4_cmd_payload_a;
        end
        3'd5: begin
            builder_rhs_array_muxed10 = main_dram_ctrl_bankmachine5_cmd_payload_a;
        end
        3'd6: begin
            builder_rhs_array_muxed10 = main_dram_ctrl_bankmachine6_cmd_payload_a;
        end
        default: begin
            builder_rhs_array_muxed10 = main_dram_ctrl_bankmachine7_cmd_payload_a;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed11 = 3'd0;
    case (main_dram_ctrl_choose_cmd_grant)
        1'd0: begin
            builder_rhs_array_muxed11 = main_dram_ctrl_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            builder_rhs_array_muxed11 = main_dram_ctrl_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            builder_rhs_array_muxed11 = main_dram_ctrl_bankmachine2_cmd_payload_ba;
        end
        2'd3: begin
            builder_rhs_array_muxed11 = main_dram_ctrl_bankmachine3_cmd_payload_ba;
        end
        3'd4: begin
            builder_rhs_array_muxed11 = main_dram_ctrl_bankmachine4_cmd_payload_ba;
        end
        3'd5: begin
            builder_rhs_array_muxed11 = main_dram_ctrl_bankmachine5_cmd_payload_ba;
        end
        3'd6: begin
            builder_rhs_array_muxed11 = main_dram_ctrl_bankmachine6_cmd_payload_ba;
        end
        default: begin
            builder_rhs_array_muxed11 = main_dram_ctrl_bankmachine7_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed12 = 1'd0;
    case (main_dram_ctrl_choose_cmd_grant)
        1'd0: begin
            builder_rhs_array_muxed12 = main_dram_ctrl_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            builder_rhs_array_muxed12 = main_dram_ctrl_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            builder_rhs_array_muxed12 = main_dram_ctrl_bankmachine2_cmd_payload_is_read;
        end
        2'd3: begin
            builder_rhs_array_muxed12 = main_dram_ctrl_bankmachine3_cmd_payload_is_read;
        end
        3'd4: begin
            builder_rhs_array_muxed12 = main_dram_ctrl_bankmachine4_cmd_payload_is_read;
        end
        3'd5: begin
            builder_rhs_array_muxed12 = main_dram_ctrl_bankmachine5_cmd_payload_is_read;
        end
        3'd6: begin
            builder_rhs_array_muxed12 = main_dram_ctrl_bankmachine6_cmd_payload_is_read;
        end
        default: begin
            builder_rhs_array_muxed12 = main_dram_ctrl_bankmachine7_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed13 = 1'd0;
    case (main_dram_ctrl_choose_cmd_grant)
        1'd0: begin
            builder_rhs_array_muxed13 = main_dram_ctrl_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            builder_rhs_array_muxed13 = main_dram_ctrl_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            builder_rhs_array_muxed13 = main_dram_ctrl_bankmachine2_cmd_payload_is_write;
        end
        2'd3: begin
            builder_rhs_array_muxed13 = main_dram_ctrl_bankmachine3_cmd_payload_is_write;
        end
        3'd4: begin
            builder_rhs_array_muxed13 = main_dram_ctrl_bankmachine4_cmd_payload_is_write;
        end
        3'd5: begin
            builder_rhs_array_muxed13 = main_dram_ctrl_bankmachine5_cmd_payload_is_write;
        end
        3'd6: begin
            builder_rhs_array_muxed13 = main_dram_ctrl_bankmachine6_cmd_payload_is_write;
        end
        default: begin
            builder_rhs_array_muxed13 = main_dram_ctrl_bankmachine7_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed14 = 1'd0;
    case (main_dram_ctrl_choose_cmd_grant)
        1'd0: begin
            builder_rhs_array_muxed14 = main_dram_ctrl_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            builder_rhs_array_muxed14 = main_dram_ctrl_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            builder_rhs_array_muxed14 = main_dram_ctrl_bankmachine2_cmd_payload_is_cmd;
        end
        2'd3: begin
            builder_rhs_array_muxed14 = main_dram_ctrl_bankmachine3_cmd_payload_is_cmd;
        end
        3'd4: begin
            builder_rhs_array_muxed14 = main_dram_ctrl_bankmachine4_cmd_payload_is_cmd;
        end
        3'd5: begin
            builder_rhs_array_muxed14 = main_dram_ctrl_bankmachine5_cmd_payload_is_cmd;
        end
        3'd6: begin
            builder_rhs_array_muxed14 = main_dram_ctrl_bankmachine6_cmd_payload_is_cmd;
        end
        default: begin
            builder_rhs_array_muxed14 = main_dram_ctrl_bankmachine7_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
	builder_t_array_muxed0 = 1'd0;
    case (main_dram_ctrl_choose_cmd_grant)
        1'd0: begin
            builder_t_array_muxed0 = main_dram_ctrl_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            builder_t_array_muxed0 = main_dram_ctrl_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            builder_t_array_muxed0 = main_dram_ctrl_bankmachine2_cmd_payload_cas;
        end
        2'd3: begin
            builder_t_array_muxed0 = main_dram_ctrl_bankmachine3_cmd_payload_cas;
        end
        3'd4: begin
            builder_t_array_muxed0 = main_dram_ctrl_bankmachine4_cmd_payload_cas;
        end
        3'd5: begin
            builder_t_array_muxed0 = main_dram_ctrl_bankmachine5_cmd_payload_cas;
        end
        3'd6: begin
            builder_t_array_muxed0 = main_dram_ctrl_bankmachine6_cmd_payload_cas;
        end
        default: begin
            builder_t_array_muxed0 = main_dram_ctrl_bankmachine7_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
	builder_t_array_muxed1 = 1'd0;
    case (main_dram_ctrl_choose_cmd_grant)
        1'd0: begin
            builder_t_array_muxed1 = main_dram_ctrl_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            builder_t_array_muxed1 = main_dram_ctrl_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            builder_t_array_muxed1 = main_dram_ctrl_bankmachine2_cmd_payload_ras;
        end
        2'd3: begin
            builder_t_array_muxed1 = main_dram_ctrl_bankmachine3_cmd_payload_ras;
        end
        3'd4: begin
            builder_t_array_muxed1 = main_dram_ctrl_bankmachine4_cmd_payload_ras;
        end
        3'd5: begin
            builder_t_array_muxed1 = main_dram_ctrl_bankmachine5_cmd_payload_ras;
        end
        3'd6: begin
            builder_t_array_muxed1 = main_dram_ctrl_bankmachine6_cmd_payload_ras;
        end
        default: begin
            builder_t_array_muxed1 = main_dram_ctrl_bankmachine7_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
	builder_t_array_muxed2 = 1'd0;
    case (main_dram_ctrl_choose_cmd_grant)
        1'd0: begin
            builder_t_array_muxed2 = main_dram_ctrl_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            builder_t_array_muxed2 = main_dram_ctrl_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            builder_t_array_muxed2 = main_dram_ctrl_bankmachine2_cmd_payload_we;
        end
        2'd3: begin
            builder_t_array_muxed2 = main_dram_ctrl_bankmachine3_cmd_payload_we;
        end
        3'd4: begin
            builder_t_array_muxed2 = main_dram_ctrl_bankmachine4_cmd_payload_we;
        end
        3'd5: begin
            builder_t_array_muxed2 = main_dram_ctrl_bankmachine5_cmd_payload_we;
        end
        3'd6: begin
            builder_t_array_muxed2 = main_dram_ctrl_bankmachine6_cmd_payload_we;
        end
        default: begin
            builder_t_array_muxed2 = main_dram_ctrl_bankmachine7_cmd_payload_we;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed15 = 1'd0;
    case (main_dram_ctrl_choose_req_grant)
        1'd0: begin
            builder_rhs_array_muxed15 = main_dram_ctrl_choose_req_valids[0];
        end
        1'd1: begin
            builder_rhs_array_muxed15 = main_dram_ctrl_choose_req_valids[1];
        end
        2'd2: begin
            builder_rhs_array_muxed15 = main_dram_ctrl_choose_req_valids[2];
        end
        2'd3: begin
            builder_rhs_array_muxed15 = main_dram_ctrl_choose_req_valids[3];
        end
        3'd4: begin
            builder_rhs_array_muxed15 = main_dram_ctrl_choose_req_valids[4];
        end
        3'd5: begin
            builder_rhs_array_muxed15 = main_dram_ctrl_choose_req_valids[5];
        end
        3'd6: begin
            builder_rhs_array_muxed15 = main_dram_ctrl_choose_req_valids[6];
        end
        default: begin
            builder_rhs_array_muxed15 = main_dram_ctrl_choose_req_valids[7];
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed16 = 15'd0;
    case (main_dram_ctrl_choose_req_grant)
        1'd0: begin
            builder_rhs_array_muxed16 = main_dram_ctrl_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            builder_rhs_array_muxed16 = main_dram_ctrl_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            builder_rhs_array_muxed16 = main_dram_ctrl_bankmachine2_cmd_payload_a;
        end
        2'd3: begin
            builder_rhs_array_muxed16 = main_dram_ctrl_bankmachine3_cmd_payload_a;
        end
        3'd4: begin
            builder_rhs_array_muxed16 = main_dram_ctrl_bankmachine4_cmd_payload_a;
        end
        3'd5: begin
            builder_rhs_array_muxed16 = main_dram_ctrl_bankmachine5_cmd_payload_a;
        end
        3'd6: begin
            builder_rhs_array_muxed16 = main_dram_ctrl_bankmachine6_cmd_payload_a;
        end
        default: begin
            builder_rhs_array_muxed16 = main_dram_ctrl_bankmachine7_cmd_payload_a;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed17 = 3'd0;
    case (main_dram_ctrl_choose_req_grant)
        1'd0: begin
            builder_rhs_array_muxed17 = main_dram_ctrl_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            builder_rhs_array_muxed17 = main_dram_ctrl_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            builder_rhs_array_muxed17 = main_dram_ctrl_bankmachine2_cmd_payload_ba;
        end
        2'd3: begin
            builder_rhs_array_muxed17 = main_dram_ctrl_bankmachine3_cmd_payload_ba;
        end
        3'd4: begin
            builder_rhs_array_muxed17 = main_dram_ctrl_bankmachine4_cmd_payload_ba;
        end
        3'd5: begin
            builder_rhs_array_muxed17 = main_dram_ctrl_bankmachine5_cmd_payload_ba;
        end
        3'd6: begin
            builder_rhs_array_muxed17 = main_dram_ctrl_bankmachine6_cmd_payload_ba;
        end
        default: begin
            builder_rhs_array_muxed17 = main_dram_ctrl_bankmachine7_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed18 = 1'd0;
    case (main_dram_ctrl_choose_req_grant)
        1'd0: begin
            builder_rhs_array_muxed18 = main_dram_ctrl_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            builder_rhs_array_muxed18 = main_dram_ctrl_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            builder_rhs_array_muxed18 = main_dram_ctrl_bankmachine2_cmd_payload_is_read;
        end
        2'd3: begin
            builder_rhs_array_muxed18 = main_dram_ctrl_bankmachine3_cmd_payload_is_read;
        end
        3'd4: begin
            builder_rhs_array_muxed18 = main_dram_ctrl_bankmachine4_cmd_payload_is_read;
        end
        3'd5: begin
            builder_rhs_array_muxed18 = main_dram_ctrl_bankmachine5_cmd_payload_is_read;
        end
        3'd6: begin
            builder_rhs_array_muxed18 = main_dram_ctrl_bankmachine6_cmd_payload_is_read;
        end
        default: begin
            builder_rhs_array_muxed18 = main_dram_ctrl_bankmachine7_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed19 = 1'd0;
    case (main_dram_ctrl_choose_req_grant)
        1'd0: begin
            builder_rhs_array_muxed19 = main_dram_ctrl_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            builder_rhs_array_muxed19 = main_dram_ctrl_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            builder_rhs_array_muxed19 = main_dram_ctrl_bankmachine2_cmd_payload_is_write;
        end
        2'd3: begin
            builder_rhs_array_muxed19 = main_dram_ctrl_bankmachine3_cmd_payload_is_write;
        end
        3'd4: begin
            builder_rhs_array_muxed19 = main_dram_ctrl_bankmachine4_cmd_payload_is_write;
        end
        3'd5: begin
            builder_rhs_array_muxed19 = main_dram_ctrl_bankmachine5_cmd_payload_is_write;
        end
        3'd6: begin
            builder_rhs_array_muxed19 = main_dram_ctrl_bankmachine6_cmd_payload_is_write;
        end
        default: begin
            builder_rhs_array_muxed19 = main_dram_ctrl_bankmachine7_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed20 = 1'd0;
    case (main_dram_ctrl_choose_req_grant)
        1'd0: begin
            builder_rhs_array_muxed20 = main_dram_ctrl_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            builder_rhs_array_muxed20 = main_dram_ctrl_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            builder_rhs_array_muxed20 = main_dram_ctrl_bankmachine2_cmd_payload_is_cmd;
        end
        2'd3: begin
            builder_rhs_array_muxed20 = main_dram_ctrl_bankmachine3_cmd_payload_is_cmd;
        end
        3'd4: begin
            builder_rhs_array_muxed20 = main_dram_ctrl_bankmachine4_cmd_payload_is_cmd;
        end
        3'd5: begin
            builder_rhs_array_muxed20 = main_dram_ctrl_bankmachine5_cmd_payload_is_cmd;
        end
        3'd6: begin
            builder_rhs_array_muxed20 = main_dram_ctrl_bankmachine6_cmd_payload_is_cmd;
        end
        default: begin
            builder_rhs_array_muxed20 = main_dram_ctrl_bankmachine7_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
	builder_t_array_muxed3 = 1'd0;
    case (main_dram_ctrl_choose_req_grant)
        1'd0: begin
            builder_t_array_muxed3 = main_dram_ctrl_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            builder_t_array_muxed3 = main_dram_ctrl_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            builder_t_array_muxed3 = main_dram_ctrl_bankmachine2_cmd_payload_cas;
        end
        2'd3: begin
            builder_t_array_muxed3 = main_dram_ctrl_bankmachine3_cmd_payload_cas;
        end
        3'd4: begin
            builder_t_array_muxed3 = main_dram_ctrl_bankmachine4_cmd_payload_cas;
        end
        3'd5: begin
            builder_t_array_muxed3 = main_dram_ctrl_bankmachine5_cmd_payload_cas;
        end
        3'd6: begin
            builder_t_array_muxed3 = main_dram_ctrl_bankmachine6_cmd_payload_cas;
        end
        default: begin
            builder_t_array_muxed3 = main_dram_ctrl_bankmachine7_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
	builder_t_array_muxed4 = 1'd0;
    case (main_dram_ctrl_choose_req_grant)
        1'd0: begin
            builder_t_array_muxed4 = main_dram_ctrl_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            builder_t_array_muxed4 = main_dram_ctrl_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            builder_t_array_muxed4 = main_dram_ctrl_bankmachine2_cmd_payload_ras;
        end
        2'd3: begin
            builder_t_array_muxed4 = main_dram_ctrl_bankmachine3_cmd_payload_ras;
        end
        3'd4: begin
            builder_t_array_muxed4 = main_dram_ctrl_bankmachine4_cmd_payload_ras;
        end
        3'd5: begin
            builder_t_array_muxed4 = main_dram_ctrl_bankmachine5_cmd_payload_ras;
        end
        3'd6: begin
            builder_t_array_muxed4 = main_dram_ctrl_bankmachine6_cmd_payload_ras;
        end
        default: begin
            builder_t_array_muxed4 = main_dram_ctrl_bankmachine7_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
	builder_t_array_muxed5 = 1'd0;
    case (main_dram_ctrl_choose_req_grant)
        1'd0: begin
            builder_t_array_muxed5 = main_dram_ctrl_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            builder_t_array_muxed5 = main_dram_ctrl_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            builder_t_array_muxed5 = main_dram_ctrl_bankmachine2_cmd_payload_we;
        end
        2'd3: begin
            builder_t_array_muxed5 = main_dram_ctrl_bankmachine3_cmd_payload_we;
        end
        3'd4: begin
            builder_t_array_muxed5 = main_dram_ctrl_bankmachine4_cmd_payload_we;
        end
        3'd5: begin
            builder_t_array_muxed5 = main_dram_ctrl_bankmachine5_cmd_payload_we;
        end
        3'd6: begin
            builder_t_array_muxed5 = main_dram_ctrl_bankmachine6_cmd_payload_we;
        end
        default: begin
            builder_t_array_muxed5 = main_dram_ctrl_bankmachine7_cmd_payload_we;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed21 = 21'd0;
    case (builder_dramcoresoc_dramcore_roundrobin0_grant)
        default: begin
            builder_rhs_array_muxed21 = {main_port_cmd_payload_addr[23:9], main_port_cmd_payload_addr[5:0]};
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed22 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin0_grant)
        default: begin
            builder_rhs_array_muxed22 = main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed23 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin0_grant)
        default: begin
            builder_rhs_array_muxed23 = (((main_port_cmd_payload_addr[8:6] == 1'd0) & (~(((((((builder_dramcoresoc_dramcore_locked0 | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed24 = 21'd0;
    case (builder_dramcoresoc_dramcore_roundrobin1_grant)
        default: begin
            builder_rhs_array_muxed24 = {main_port_cmd_payload_addr[23:9], main_port_cmd_payload_addr[5:0]};
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed25 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin1_grant)
        default: begin
            builder_rhs_array_muxed25 = main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed26 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin1_grant)
        default: begin
            builder_rhs_array_muxed26 = (((main_port_cmd_payload_addr[8:6] == 1'd1) & (~(((((((builder_dramcoresoc_dramcore_locked1 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed27 = 21'd0;
    case (builder_dramcoresoc_dramcore_roundrobin2_grant)
        default: begin
            builder_rhs_array_muxed27 = {main_port_cmd_payload_addr[23:9], main_port_cmd_payload_addr[5:0]};
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed28 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin2_grant)
        default: begin
            builder_rhs_array_muxed28 = main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed29 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin2_grant)
        default: begin
            builder_rhs_array_muxed29 = (((main_port_cmd_payload_addr[8:6] == 2'd2) & (~(((((((builder_dramcoresoc_dramcore_locked2 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed30 = 21'd0;
    case (builder_dramcoresoc_dramcore_roundrobin3_grant)
        default: begin
            builder_rhs_array_muxed30 = {main_port_cmd_payload_addr[23:9], main_port_cmd_payload_addr[5:0]};
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed31 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin3_grant)
        default: begin
            builder_rhs_array_muxed31 = main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed32 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin3_grant)
        default: begin
            builder_rhs_array_muxed32 = (((main_port_cmd_payload_addr[8:6] == 2'd3) & (~(((((((builder_dramcoresoc_dramcore_locked3 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed33 = 21'd0;
    case (builder_dramcoresoc_dramcore_roundrobin4_grant)
        default: begin
            builder_rhs_array_muxed33 = {main_port_cmd_payload_addr[23:9], main_port_cmd_payload_addr[5:0]};
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed34 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin4_grant)
        default: begin
            builder_rhs_array_muxed34 = main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed35 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin4_grant)
        default: begin
            builder_rhs_array_muxed35 = (((main_port_cmd_payload_addr[8:6] == 3'd4) & (~(((((((builder_dramcoresoc_dramcore_locked4 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed36 = 21'd0;
    case (builder_dramcoresoc_dramcore_roundrobin5_grant)
        default: begin
            builder_rhs_array_muxed36 = {main_port_cmd_payload_addr[23:9], main_port_cmd_payload_addr[5:0]};
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed37 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin5_grant)
        default: begin
            builder_rhs_array_muxed37 = main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed38 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin5_grant)
        default: begin
            builder_rhs_array_muxed38 = (((main_port_cmd_payload_addr[8:6] == 3'd5) & (~(((((((builder_dramcoresoc_dramcore_locked5 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed39 = 21'd0;
    case (builder_dramcoresoc_dramcore_roundrobin6_grant)
        default: begin
            builder_rhs_array_muxed39 = {main_port_cmd_payload_addr[23:9], main_port_cmd_payload_addr[5:0]};
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed40 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin6_grant)
        default: begin
            builder_rhs_array_muxed40 = main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed41 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin6_grant)
        default: begin
            builder_rhs_array_muxed41 = (((main_port_cmd_payload_addr[8:6] == 3'd6) & (~(((((((builder_dramcoresoc_dramcore_locked6 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank7_lock & (builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed42 = 21'd0;
    case (builder_dramcoresoc_dramcore_roundrobin7_grant)
        default: begin
            builder_rhs_array_muxed42 = {main_port_cmd_payload_addr[23:9], main_port_cmd_payload_addr[5:0]};
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed43 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin7_grant)
        default: begin
            builder_rhs_array_muxed43 = main_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
	builder_rhs_array_muxed44 = 1'd0;
    case (builder_dramcoresoc_dramcore_roundrobin7_grant)
        default: begin
            builder_rhs_array_muxed44 = (((main_port_cmd_payload_addr[8:6] == 3'd7) & (~(((((((builder_dramcoresoc_dramcore_locked7 | (main_dram_ctrl_interface_bank0_lock & (builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0))) | (main_dram_ctrl_interface_bank1_lock & (builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0))) | (main_dram_ctrl_interface_bank2_lock & (builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0))) | (main_dram_ctrl_interface_bank3_lock & (builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0))) | (main_dram_ctrl_interface_bank4_lock & (builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0))) | (main_dram_ctrl_interface_bank5_lock & (builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0))) | (main_dram_ctrl_interface_bank6_lock & (builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0))))) & main_port_cmd_valid);
        end
    endcase
end
always @(*) begin
	builder_array_muxed0 = 3'd0;
    case (main_dram_ctrl_steerer_sel0)
        1'd0: begin
            builder_array_muxed0 = main_dram_ctrl_nop_ba[2:0];
        end
        1'd1: begin
            builder_array_muxed0 = main_dram_ctrl_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_array_muxed0 = main_dram_ctrl_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_array_muxed0 = main_dram_ctrl_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
	builder_array_muxed1 = 15'd0;
    case (main_dram_ctrl_steerer_sel0)
        1'd0: begin
            builder_array_muxed1 = main_dram_ctrl_nop_a;
        end
        1'd1: begin
            builder_array_muxed1 = main_dram_ctrl_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_array_muxed1 = main_dram_ctrl_choose_req_cmd_payload_a;
        end
        default: begin
            builder_array_muxed1 = main_dram_ctrl_cmd_payload_a;
        end
    endcase
end
always @(*) begin
	builder_array_muxed2 = 1'd0;
    case (main_dram_ctrl_steerer_sel0)
        1'd0: begin
            builder_array_muxed2 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed2 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_array_muxed2 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_array_muxed2 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
	builder_array_muxed3 = 1'd0;
    case (main_dram_ctrl_steerer_sel0)
        1'd0: begin
            builder_array_muxed3 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed3 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_array_muxed3 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_array_muxed3 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
	builder_array_muxed4 = 1'd0;
    case (main_dram_ctrl_steerer_sel0)
        1'd0: begin
            builder_array_muxed4 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed4 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_array_muxed4 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_we);
        end
        default: begin
            builder_array_muxed4 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_we);
        end
    endcase
end
always @(*) begin
	builder_array_muxed5 = 1'd0;
    case (main_dram_ctrl_steerer_sel0)
        1'd0: begin
            builder_array_muxed5 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed5 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_array_muxed5 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_array_muxed5 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
	builder_array_muxed6 = 1'd0;
    case (main_dram_ctrl_steerer_sel0)
        1'd0: begin
            builder_array_muxed6 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed6 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_array_muxed6 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_array_muxed6 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
	builder_array_muxed7 = 3'd0;
    case (main_dram_ctrl_steerer_sel1)
        1'd0: begin
            builder_array_muxed7 = main_dram_ctrl_nop_ba[2:0];
        end
        1'd1: begin
            builder_array_muxed7 = main_dram_ctrl_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_array_muxed7 = main_dram_ctrl_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_array_muxed7 = main_dram_ctrl_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
	builder_array_muxed8 = 15'd0;
    case (main_dram_ctrl_steerer_sel1)
        1'd0: begin
            builder_array_muxed8 = main_dram_ctrl_nop_a;
        end
        1'd1: begin
            builder_array_muxed8 = main_dram_ctrl_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_array_muxed8 = main_dram_ctrl_choose_req_cmd_payload_a;
        end
        default: begin
            builder_array_muxed8 = main_dram_ctrl_cmd_payload_a;
        end
    endcase
end
always @(*) begin
	builder_array_muxed9 = 1'd0;
    case (main_dram_ctrl_steerer_sel1)
        1'd0: begin
            builder_array_muxed9 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed9 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_array_muxed9 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_array_muxed9 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
	builder_array_muxed10 = 1'd0;
    case (main_dram_ctrl_steerer_sel1)
        1'd0: begin
            builder_array_muxed10 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed10 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_array_muxed10 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_array_muxed10 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
	builder_array_muxed11 = 1'd0;
    case (main_dram_ctrl_steerer_sel1)
        1'd0: begin
            builder_array_muxed11 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed11 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_array_muxed11 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_we);
        end
        default: begin
            builder_array_muxed11 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_we);
        end
    endcase
end
always @(*) begin
	builder_array_muxed12 = 1'd0;
    case (main_dram_ctrl_steerer_sel1)
        1'd0: begin
            builder_array_muxed12 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed12 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_array_muxed12 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_array_muxed12 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
	builder_array_muxed13 = 1'd0;
    case (main_dram_ctrl_steerer_sel1)
        1'd0: begin
            builder_array_muxed13 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed13 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_array_muxed13 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_array_muxed13 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
	builder_array_muxed14 = 3'd0;
    case (main_dram_ctrl_steerer_sel2)
        1'd0: begin
            builder_array_muxed14 = main_dram_ctrl_nop_ba[2:0];
        end
        1'd1: begin
            builder_array_muxed14 = main_dram_ctrl_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_array_muxed14 = main_dram_ctrl_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_array_muxed14 = main_dram_ctrl_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
	builder_array_muxed15 = 15'd0;
    case (main_dram_ctrl_steerer_sel2)
        1'd0: begin
            builder_array_muxed15 = main_dram_ctrl_nop_a;
        end
        1'd1: begin
            builder_array_muxed15 = main_dram_ctrl_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_array_muxed15 = main_dram_ctrl_choose_req_cmd_payload_a;
        end
        default: begin
            builder_array_muxed15 = main_dram_ctrl_cmd_payload_a;
        end
    endcase
end
always @(*) begin
	builder_array_muxed16 = 1'd0;
    case (main_dram_ctrl_steerer_sel2)
        1'd0: begin
            builder_array_muxed16 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed16 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_array_muxed16 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_array_muxed16 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
	builder_array_muxed17 = 1'd0;
    case (main_dram_ctrl_steerer_sel2)
        1'd0: begin
            builder_array_muxed17 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed17 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_array_muxed17 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_array_muxed17 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
	builder_array_muxed18 = 1'd0;
    case (main_dram_ctrl_steerer_sel2)
        1'd0: begin
            builder_array_muxed18 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed18 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_array_muxed18 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_we);
        end
        default: begin
            builder_array_muxed18 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_we);
        end
    endcase
end
always @(*) begin
	builder_array_muxed19 = 1'd0;
    case (main_dram_ctrl_steerer_sel2)
        1'd0: begin
            builder_array_muxed19 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed19 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_array_muxed19 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_array_muxed19 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
	builder_array_muxed20 = 1'd0;
    case (main_dram_ctrl_steerer_sel2)
        1'd0: begin
            builder_array_muxed20 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed20 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_array_muxed20 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_array_muxed20 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
	builder_array_muxed21 = 3'd0;
    case (main_dram_ctrl_steerer_sel3)
        1'd0: begin
            builder_array_muxed21 = main_dram_ctrl_nop_ba[2:0];
        end
        1'd1: begin
            builder_array_muxed21 = main_dram_ctrl_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_array_muxed21 = main_dram_ctrl_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_array_muxed21 = main_dram_ctrl_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
	builder_array_muxed22 = 15'd0;
    case (main_dram_ctrl_steerer_sel3)
        1'd0: begin
            builder_array_muxed22 = main_dram_ctrl_nop_a;
        end
        1'd1: begin
            builder_array_muxed22 = main_dram_ctrl_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_array_muxed22 = main_dram_ctrl_choose_req_cmd_payload_a;
        end
        default: begin
            builder_array_muxed22 = main_dram_ctrl_cmd_payload_a;
        end
    endcase
end
always @(*) begin
	builder_array_muxed23 = 1'd0;
    case (main_dram_ctrl_steerer_sel3)
        1'd0: begin
            builder_array_muxed23 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed23 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_array_muxed23 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_array_muxed23 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
	builder_array_muxed24 = 1'd0;
    case (main_dram_ctrl_steerer_sel3)
        1'd0: begin
            builder_array_muxed24 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed24 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_array_muxed24 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_array_muxed24 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
	builder_array_muxed25 = 1'd0;
    case (main_dram_ctrl_steerer_sel3)
        1'd0: begin
            builder_array_muxed25 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed25 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_array_muxed25 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_we);
        end
        default: begin
            builder_array_muxed25 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_we);
        end
    endcase
end
always @(*) begin
	builder_array_muxed26 = 1'd0;
    case (main_dram_ctrl_steerer_sel3)
        1'd0: begin
            builder_array_muxed26 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed26 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_array_muxed26 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_array_muxed26 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
	builder_array_muxed27 = 1'd0;
    case (main_dram_ctrl_steerer_sel3)
        1'd0: begin
            builder_array_muxed27 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed27 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_array_muxed27 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_array_muxed27 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
	builder_array_muxed28 = 3'd0;
    case (main_dram_ctrl_steerer_sel4)
        1'd0: begin
            builder_array_muxed28 = main_dram_ctrl_nop_ba[2:0];
        end
        1'd1: begin
            builder_array_muxed28 = main_dram_ctrl_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_array_muxed28 = main_dram_ctrl_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_array_muxed28 = main_dram_ctrl_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
	builder_array_muxed29 = 15'd0;
    case (main_dram_ctrl_steerer_sel4)
        1'd0: begin
            builder_array_muxed29 = main_dram_ctrl_nop_a;
        end
        1'd1: begin
            builder_array_muxed29 = main_dram_ctrl_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_array_muxed29 = main_dram_ctrl_choose_req_cmd_payload_a;
        end
        default: begin
            builder_array_muxed29 = main_dram_ctrl_cmd_payload_a;
        end
    endcase
end
always @(*) begin
	builder_array_muxed30 = 1'd0;
    case (main_dram_ctrl_steerer_sel4)
        1'd0: begin
            builder_array_muxed30 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed30 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_array_muxed30 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_array_muxed30 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
	builder_array_muxed31 = 1'd0;
    case (main_dram_ctrl_steerer_sel4)
        1'd0: begin
            builder_array_muxed31 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed31 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_array_muxed31 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_array_muxed31 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
	builder_array_muxed32 = 1'd0;
    case (main_dram_ctrl_steerer_sel4)
        1'd0: begin
            builder_array_muxed32 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed32 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_array_muxed32 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_we);
        end
        default: begin
            builder_array_muxed32 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_we);
        end
    endcase
end
always @(*) begin
	builder_array_muxed33 = 1'd0;
    case (main_dram_ctrl_steerer_sel4)
        1'd0: begin
            builder_array_muxed33 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed33 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_array_muxed33 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_array_muxed33 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
	builder_array_muxed34 = 1'd0;
    case (main_dram_ctrl_steerer_sel4)
        1'd0: begin
            builder_array_muxed34 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed34 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_array_muxed34 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_array_muxed34 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
	builder_array_muxed35 = 3'd0;
    case (main_dram_ctrl_steerer_sel5)
        1'd0: begin
            builder_array_muxed35 = main_dram_ctrl_nop_ba[2:0];
        end
        1'd1: begin
            builder_array_muxed35 = main_dram_ctrl_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_array_muxed35 = main_dram_ctrl_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_array_muxed35 = main_dram_ctrl_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
	builder_array_muxed36 = 15'd0;
    case (main_dram_ctrl_steerer_sel5)
        1'd0: begin
            builder_array_muxed36 = main_dram_ctrl_nop_a;
        end
        1'd1: begin
            builder_array_muxed36 = main_dram_ctrl_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_array_muxed36 = main_dram_ctrl_choose_req_cmd_payload_a;
        end
        default: begin
            builder_array_muxed36 = main_dram_ctrl_cmd_payload_a;
        end
    endcase
end
always @(*) begin
	builder_array_muxed37 = 1'd0;
    case (main_dram_ctrl_steerer_sel5)
        1'd0: begin
            builder_array_muxed37 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed37 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_array_muxed37 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_array_muxed37 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
	builder_array_muxed38 = 1'd0;
    case (main_dram_ctrl_steerer_sel5)
        1'd0: begin
            builder_array_muxed38 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed38 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_array_muxed38 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_array_muxed38 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
	builder_array_muxed39 = 1'd0;
    case (main_dram_ctrl_steerer_sel5)
        1'd0: begin
            builder_array_muxed39 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed39 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_array_muxed39 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_we);
        end
        default: begin
            builder_array_muxed39 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_we);
        end
    endcase
end
always @(*) begin
	builder_array_muxed40 = 1'd0;
    case (main_dram_ctrl_steerer_sel5)
        1'd0: begin
            builder_array_muxed40 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed40 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_array_muxed40 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_array_muxed40 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
	builder_array_muxed41 = 1'd0;
    case (main_dram_ctrl_steerer_sel5)
        1'd0: begin
            builder_array_muxed41 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed41 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_array_muxed41 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_array_muxed41 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
	builder_array_muxed42 = 3'd0;
    case (main_dram_ctrl_steerer_sel6)
        1'd0: begin
            builder_array_muxed42 = main_dram_ctrl_nop_ba[2:0];
        end
        1'd1: begin
            builder_array_muxed42 = main_dram_ctrl_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_array_muxed42 = main_dram_ctrl_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_array_muxed42 = main_dram_ctrl_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
	builder_array_muxed43 = 15'd0;
    case (main_dram_ctrl_steerer_sel6)
        1'd0: begin
            builder_array_muxed43 = main_dram_ctrl_nop_a;
        end
        1'd1: begin
            builder_array_muxed43 = main_dram_ctrl_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_array_muxed43 = main_dram_ctrl_choose_req_cmd_payload_a;
        end
        default: begin
            builder_array_muxed43 = main_dram_ctrl_cmd_payload_a;
        end
    endcase
end
always @(*) begin
	builder_array_muxed44 = 1'd0;
    case (main_dram_ctrl_steerer_sel6)
        1'd0: begin
            builder_array_muxed44 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed44 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_array_muxed44 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_array_muxed44 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
	builder_array_muxed45 = 1'd0;
    case (main_dram_ctrl_steerer_sel6)
        1'd0: begin
            builder_array_muxed45 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed45 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_array_muxed45 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_array_muxed45 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
	builder_array_muxed46 = 1'd0;
    case (main_dram_ctrl_steerer_sel6)
        1'd0: begin
            builder_array_muxed46 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed46 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_array_muxed46 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_we);
        end
        default: begin
            builder_array_muxed46 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_we);
        end
    endcase
end
always @(*) begin
	builder_array_muxed47 = 1'd0;
    case (main_dram_ctrl_steerer_sel6)
        1'd0: begin
            builder_array_muxed47 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed47 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_array_muxed47 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_array_muxed47 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
	builder_array_muxed48 = 1'd0;
    case (main_dram_ctrl_steerer_sel6)
        1'd0: begin
            builder_array_muxed48 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed48 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_array_muxed48 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_array_muxed48 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
	builder_array_muxed49 = 3'd0;
    case (main_dram_ctrl_steerer_sel7)
        1'd0: begin
            builder_array_muxed49 = main_dram_ctrl_nop_ba[2:0];
        end
        1'd1: begin
            builder_array_muxed49 = main_dram_ctrl_choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            builder_array_muxed49 = main_dram_ctrl_choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            builder_array_muxed49 = main_dram_ctrl_cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
	builder_array_muxed50 = 15'd0;
    case (main_dram_ctrl_steerer_sel7)
        1'd0: begin
            builder_array_muxed50 = main_dram_ctrl_nop_a;
        end
        1'd1: begin
            builder_array_muxed50 = main_dram_ctrl_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            builder_array_muxed50 = main_dram_ctrl_choose_req_cmd_payload_a;
        end
        default: begin
            builder_array_muxed50 = main_dram_ctrl_cmd_payload_a;
        end
    endcase
end
always @(*) begin
	builder_array_muxed51 = 1'd0;
    case (main_dram_ctrl_steerer_sel7)
        1'd0: begin
            builder_array_muxed51 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed51 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            builder_array_muxed51 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_cas);
        end
        default: begin
            builder_array_muxed51 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
	builder_array_muxed52 = 1'd0;
    case (main_dram_ctrl_steerer_sel7)
        1'd0: begin
            builder_array_muxed52 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed52 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            builder_array_muxed52 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_ras);
        end
        default: begin
            builder_array_muxed52 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
	builder_array_muxed53 = 1'd0;
    case (main_dram_ctrl_steerer_sel7)
        1'd0: begin
            builder_array_muxed53 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed53 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            builder_array_muxed53 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_we);
        end
        default: begin
            builder_array_muxed53 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_we);
        end
    endcase
end
always @(*) begin
	builder_array_muxed54 = 1'd0;
    case (main_dram_ctrl_steerer_sel7)
        1'd0: begin
            builder_array_muxed54 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed54 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            builder_array_muxed54 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_write);
        end
        default: begin
            builder_array_muxed54 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
	builder_array_muxed55 = 1'd0;
    case (main_dram_ctrl_steerer_sel7)
        1'd0: begin
            builder_array_muxed55 = 1'd0;
        end
        1'd1: begin
            builder_array_muxed55 = ((main_dram_ctrl_choose_cmd_cmd_valid & main_dram_ctrl_choose_cmd_cmd_ready) & main_dram_ctrl_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            builder_array_muxed55 = ((main_dram_ctrl_choose_req_cmd_valid & main_dram_ctrl_choose_req_cmd_ready) & main_dram_ctrl_choose_req_cmd_payload_is_read);
        end
        default: begin
            builder_array_muxed55 = ((main_dram_ctrl_cmd_valid & main_dram_ctrl_cmd_ready) & main_dram_ctrl_cmd_payload_is_read);
        end
    endcase
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sys_clk) begin
    builder_slave_sel_r <= builder_slave_sel;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    main_dram_ctrl_precharge_time_sig <= ((1'd1 + main_dram_ctrl_csrstorage2_storage) + main_dram_ctrl_csrstorage7_storage);
    if ((main_dram_ctrl_phy_ctl_re & main_dram_ctrl_init_req)) begin
        main_dram_ctrl_init_start <= main_dram_ctrl_init_req;
        main_dram_ctrl_init_done <= 1'd0;
    end
    if (main_dram_ctrl_init_complete) begin
        main_dram_ctrl_init_start <= 1'd0;
        main_dram_ctrl_init_done <= 1'd1;
    end
    if ((main_dram_ctrl_timer_wait & (~main_dram_ctrl_timer_done0))) begin
        main_dram_ctrl_timer_count1 <= (main_dram_ctrl_timer_count1 - 1'd1);
    end else begin
        if ((main_dram_ctrl_csrstorage4_storage != 1'd0)) begin
            main_dram_ctrl_timer_count1 <= (main_dram_ctrl_csrstorage4_storage - 1'd1);
        end
    end
    main_dram_ctrl_postponer_req_o <= 1'd0;
    if (main_dram_ctrl_postponer_req_i) begin
        main_dram_ctrl_postponer_count <= (main_dram_ctrl_postponer_count - 1'd1);
        if ((main_dram_ctrl_postponer_count == 1'd0)) begin
            main_dram_ctrl_postponer_count <= 1'd0;
            main_dram_ctrl_postponer_req_o <= 1'd1;
        end
    end
    if (main_dram_ctrl_sequencer_start0) begin
        main_dram_ctrl_sequencer_count <= 1'd0;
    end else begin
        if (main_dram_ctrl_sequencer_done1) begin
            if ((main_dram_ctrl_sequencer_count != 1'd0)) begin
                main_dram_ctrl_sequencer_count <= (main_dram_ctrl_sequencer_count - 1'd1);
            end
        end
    end
    main_dram_ctrl_sequencer_start1 <= (main_dram_ctrl_sequencer_start0 | (main_dram_ctrl_sequencer_count != 1'd0));
    main_dram_ctrl_sequencer_done0 <= (main_dram_ctrl_sequencer_done1 & (main_dram_ctrl_sequencer_count == 1'd0));
    main_dram_ctrl_sequencer_counter1 <= (main_dram_ctrl_csrstorage0_storage + main_dram_ctrl_csrstorage5_storage);
    main_dram_ctrl_cmd_payload_a <= 1'd0;
    main_dram_ctrl_cmd_payload_ba <= 1'd0;
    main_dram_ctrl_cmd_payload_cas <= 1'd0;
    main_dram_ctrl_cmd_payload_ras <= 1'd0;
    main_dram_ctrl_cmd_payload_we <= 1'd0;
    main_dram_ctrl_sequencer_done1 <= 1'd0;
    if ((main_dram_ctrl_sequencer_trigger & (main_dram_ctrl_sequencer_counter0 == 1'd0))) begin
        main_dram_ctrl_cmd_payload_a <= 11'd1024;
        main_dram_ctrl_cmd_payload_ba <= 1'd0;
        main_dram_ctrl_cmd_payload_cas <= 1'd0;
        main_dram_ctrl_cmd_payload_ras <= 1'd1;
        main_dram_ctrl_cmd_payload_we <= 1'd1;
    end
    if ((main_dram_ctrl_sequencer_counter0 == main_dram_ctrl_csrstorage0_storage)) begin
        main_dram_ctrl_cmd_payload_a <= 11'd1024;
        main_dram_ctrl_cmd_payload_ba <= 1'd0;
        main_dram_ctrl_cmd_payload_cas <= 1'd1;
        main_dram_ctrl_cmd_payload_ras <= 1'd1;
        main_dram_ctrl_cmd_payload_we <= 1'd0;
    end
    if ((main_dram_ctrl_sequencer_counter0 == (main_dram_ctrl_csrstorage0_storage + main_dram_ctrl_csrstorage5_storage))) begin
        main_dram_ctrl_cmd_payload_a <= 1'd0;
        main_dram_ctrl_cmd_payload_ba <= 1'd0;
        main_dram_ctrl_cmd_payload_cas <= 1'd0;
        main_dram_ctrl_cmd_payload_ras <= 1'd0;
        main_dram_ctrl_cmd_payload_we <= 1'd0;
        main_dram_ctrl_sequencer_done1 <= 1'd1;
    end
    if ((main_dram_ctrl_sequencer_counter0 != 1'd0)) begin
        main_dram_ctrl_sequencer_counter0 <= (main_dram_ctrl_sequencer_counter0 + 1'd1);
    end else begin
        if (main_dram_ctrl_sequencer_trigger) begin
            main_dram_ctrl_sequencer_counter0 <= 1'd1;
        end
    end
    if ((main_dram_ctrl_sequencer_counter0 == main_dram_ctrl_sequencer_target)) begin
        main_dram_ctrl_sequencer_counter0 <= 1'd0;
    end
    builder_dramcoresoc_dramcore_refresher_state <= builder_dramcoresoc_dramcore_refresher_next_state;
    if ((~main_dram_ctrl_bankmachine0_timer_done)) begin
        main_dram_ctrl_bankmachine0_timer <= (main_dram_ctrl_bankmachine0_timer - 1'd1);
    end
    if ((main_dram_ctrl_bankmachine0_sink_sink_ready & main_dram_ctrl_bankmachine0_sink_sink_valid)) begin
        main_dram_ctrl_bankmachine0_row_hit <= (main_dram_ctrl_bankmachine0_row == main_dram_ctrl_bankmachine0_source_payload_addr[20:6]);
    end
    if (main_dram_ctrl_bankmachine0_row_hit_reeval) begin
        main_dram_ctrl_bankmachine0_row_hit <= 1'd1;
    end
    if (main_dram_ctrl_bankmachine0_row_close) begin
        main_dram_ctrl_bankmachine0_row_opened <= 1'd0;
    end else begin
        if (main_dram_ctrl_bankmachine0_row_open) begin
            main_dram_ctrl_bankmachine0_row_opened <= 1'd1;
            main_dram_ctrl_bankmachine0_row <= main_dram_ctrl_bankmachine0_source_source_payload_addr[20:6];
        end
    end
    if ((main_dram_ctrl_bankmachine0_source_source_valid & main_dram_ctrl_bankmachine0_source_source_ready)) begin
        main_dram_ctrl_bankmachine0_last_addr_status <= main_dram_ctrl_bankmachine0_source_source_payload_addr;
    end
    if (((main_dram_ctrl_bankmachine0_cmd_valid & main_dram_ctrl_bankmachine0_cmd_ready) & main_dram_ctrl_bankmachine0_row_open)) begin
        main_dram_ctrl_bankmachine0_last_active_row_status <= main_dram_ctrl_bankmachine0_cmd_payload_a;
    end
    if ((main_dram_ctrl_bankmachine0_simplesyncfifo0_we & main_dram_ctrl_bankmachine0_simplesyncfifo0_writable)) begin
        main_dram_ctrl_bankmachine0_w_cnt <= (main_dram_ctrl_bankmachine0_w_cnt + 1'd1);
    end
    if (main_dram_ctrl_bankmachine0_do_read) begin
        main_dram_ctrl_bankmachine0_r_cnt <= (main_dram_ctrl_bankmachine0_r_cnt + 1'd1);
    end
    if (((~main_dram_ctrl_bankmachine0_pipe_valid_source_valid) | main_dram_ctrl_bankmachine0_pipe_valid_source_ready)) begin
        main_dram_ctrl_bankmachine0_pipe_valid_source_valid <= main_dram_ctrl_bankmachine0_pipe_valid_sink_valid;
        main_dram_ctrl_bankmachine0_pipe_valid_source_first <= main_dram_ctrl_bankmachine0_pipe_valid_sink_first;
        main_dram_ctrl_bankmachine0_pipe_valid_source_last <= main_dram_ctrl_bankmachine0_pipe_valid_sink_last;
        main_dram_ctrl_bankmachine0_pipe_valid_source_payload_we <= main_dram_ctrl_bankmachine0_pipe_valid_sink_payload_we;
        main_dram_ctrl_bankmachine0_pipe_valid_source_payload_addr <= main_dram_ctrl_bankmachine0_pipe_valid_sink_payload_addr;
    end
    if (main_dram_ctrl_bankmachine0_twtpcon_valid) begin
        main_dram_ctrl_bankmachine0_twtpcon_count <= (main_dram_ctrl_precharge_time_sig - 1'd1);
        main_dram_ctrl_bankmachine0_twtpcon_ready <= (main_dram_ctrl_precharge_time_sig <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine0_twtpcon_ready)) begin
            main_dram_ctrl_bankmachine0_twtpcon_count <= (main_dram_ctrl_bankmachine0_twtpcon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine0_twtpcon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine0_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine0_trccon_valid) begin
        main_dram_ctrl_bankmachine0_trccon_count <= (main_dram_ctrl_csrstorage11_storage - 1'd1);
        main_dram_ctrl_bankmachine0_trccon_ready <= (main_dram_ctrl_csrstorage11_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine0_trccon_ready)) begin
            main_dram_ctrl_bankmachine0_trccon_count <= (main_dram_ctrl_bankmachine0_trccon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine0_trccon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine0_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine0_trascon_valid) begin
        main_dram_ctrl_bankmachine0_trascon_count <= (main_dram_ctrl_csrstorage12_storage - 1'd1);
        main_dram_ctrl_bankmachine0_trascon_ready <= (main_dram_ctrl_csrstorage12_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine0_trascon_ready)) begin
            main_dram_ctrl_bankmachine0_trascon_count <= (main_dram_ctrl_bankmachine0_trascon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine0_trascon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine0_trascon_ready <= 1'd1;
            end
        end
    end
    builder_dramcoresoc_dramcore_bankmachine0_state <= builder_dramcoresoc_dramcore_bankmachine0_next_state;
    if (main_dram_ctrl_bankmachine0_timer_bankmachine0_next_value_ce) begin
        main_dram_ctrl_bankmachine0_timer <= main_dram_ctrl_bankmachine0_timer_bankmachine0_next_value;
    end
    if ((~main_dram_ctrl_bankmachine1_timer_done)) begin
        main_dram_ctrl_bankmachine1_timer <= (main_dram_ctrl_bankmachine1_timer - 1'd1);
    end
    if ((main_dram_ctrl_bankmachine1_sink_sink_ready & main_dram_ctrl_bankmachine1_sink_sink_valid)) begin
        main_dram_ctrl_bankmachine1_row_hit <= (main_dram_ctrl_bankmachine1_row == main_dram_ctrl_bankmachine1_source_payload_addr[20:6]);
    end
    if (main_dram_ctrl_bankmachine1_row_hit_reeval) begin
        main_dram_ctrl_bankmachine1_row_hit <= 1'd1;
    end
    if (main_dram_ctrl_bankmachine1_row_close) begin
        main_dram_ctrl_bankmachine1_row_opened <= 1'd0;
    end else begin
        if (main_dram_ctrl_bankmachine1_row_open) begin
            main_dram_ctrl_bankmachine1_row_opened <= 1'd1;
            main_dram_ctrl_bankmachine1_row <= main_dram_ctrl_bankmachine1_source_source_payload_addr[20:6];
        end
    end
    if ((main_dram_ctrl_bankmachine1_source_source_valid & main_dram_ctrl_bankmachine1_source_source_ready)) begin
        main_dram_ctrl_bankmachine1_last_addr_status <= main_dram_ctrl_bankmachine1_source_source_payload_addr;
    end
    if (((main_dram_ctrl_bankmachine1_cmd_valid & main_dram_ctrl_bankmachine1_cmd_ready) & main_dram_ctrl_bankmachine1_row_open)) begin
        main_dram_ctrl_bankmachine1_last_active_row_status <= main_dram_ctrl_bankmachine1_cmd_payload_a;
    end
    if ((main_dram_ctrl_bankmachine1_simplesyncfifo1_we & main_dram_ctrl_bankmachine1_simplesyncfifo1_writable)) begin
        main_dram_ctrl_bankmachine1_w_cnt <= (main_dram_ctrl_bankmachine1_w_cnt + 1'd1);
    end
    if (main_dram_ctrl_bankmachine1_do_read) begin
        main_dram_ctrl_bankmachine1_r_cnt <= (main_dram_ctrl_bankmachine1_r_cnt + 1'd1);
    end
    if (((~main_dram_ctrl_bankmachine1_pipe_valid_source_valid) | main_dram_ctrl_bankmachine1_pipe_valid_source_ready)) begin
        main_dram_ctrl_bankmachine1_pipe_valid_source_valid <= main_dram_ctrl_bankmachine1_pipe_valid_sink_valid;
        main_dram_ctrl_bankmachine1_pipe_valid_source_first <= main_dram_ctrl_bankmachine1_pipe_valid_sink_first;
        main_dram_ctrl_bankmachine1_pipe_valid_source_last <= main_dram_ctrl_bankmachine1_pipe_valid_sink_last;
        main_dram_ctrl_bankmachine1_pipe_valid_source_payload_we <= main_dram_ctrl_bankmachine1_pipe_valid_sink_payload_we;
        main_dram_ctrl_bankmachine1_pipe_valid_source_payload_addr <= main_dram_ctrl_bankmachine1_pipe_valid_sink_payload_addr;
    end
    if (main_dram_ctrl_bankmachine1_twtpcon_valid) begin
        main_dram_ctrl_bankmachine1_twtpcon_count <= (main_dram_ctrl_precharge_time_sig - 1'd1);
        main_dram_ctrl_bankmachine1_twtpcon_ready <= (main_dram_ctrl_precharge_time_sig <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine1_twtpcon_ready)) begin
            main_dram_ctrl_bankmachine1_twtpcon_count <= (main_dram_ctrl_bankmachine1_twtpcon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine1_twtpcon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine1_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine1_trccon_valid) begin
        main_dram_ctrl_bankmachine1_trccon_count <= (main_dram_ctrl_csrstorage11_storage - 1'd1);
        main_dram_ctrl_bankmachine1_trccon_ready <= (main_dram_ctrl_csrstorage11_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine1_trccon_ready)) begin
            main_dram_ctrl_bankmachine1_trccon_count <= (main_dram_ctrl_bankmachine1_trccon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine1_trccon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine1_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine1_trascon_valid) begin
        main_dram_ctrl_bankmachine1_trascon_count <= (main_dram_ctrl_csrstorage12_storage - 1'd1);
        main_dram_ctrl_bankmachine1_trascon_ready <= (main_dram_ctrl_csrstorage12_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine1_trascon_ready)) begin
            main_dram_ctrl_bankmachine1_trascon_count <= (main_dram_ctrl_bankmachine1_trascon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine1_trascon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine1_trascon_ready <= 1'd1;
            end
        end
    end
    builder_dramcoresoc_dramcore_bankmachine1_state <= builder_dramcoresoc_dramcore_bankmachine1_next_state;
    if (main_dram_ctrl_bankmachine1_timer_bankmachine1_next_value_ce) begin
        main_dram_ctrl_bankmachine1_timer <= main_dram_ctrl_bankmachine1_timer_bankmachine1_next_value;
    end
    if ((~main_dram_ctrl_bankmachine2_timer_done)) begin
        main_dram_ctrl_bankmachine2_timer <= (main_dram_ctrl_bankmachine2_timer - 1'd1);
    end
    if ((main_dram_ctrl_bankmachine2_sink_sink_ready & main_dram_ctrl_bankmachine2_sink_sink_valid)) begin
        main_dram_ctrl_bankmachine2_row_hit <= (main_dram_ctrl_bankmachine2_row == main_dram_ctrl_bankmachine2_source_payload_addr[20:6]);
    end
    if (main_dram_ctrl_bankmachine2_row_hit_reeval) begin
        main_dram_ctrl_bankmachine2_row_hit <= 1'd1;
    end
    if (main_dram_ctrl_bankmachine2_row_close) begin
        main_dram_ctrl_bankmachine2_row_opened <= 1'd0;
    end else begin
        if (main_dram_ctrl_bankmachine2_row_open) begin
            main_dram_ctrl_bankmachine2_row_opened <= 1'd1;
            main_dram_ctrl_bankmachine2_row <= main_dram_ctrl_bankmachine2_source_source_payload_addr[20:6];
        end
    end
    if ((main_dram_ctrl_bankmachine2_source_source_valid & main_dram_ctrl_bankmachine2_source_source_ready)) begin
        main_dram_ctrl_bankmachine2_last_addr_status <= main_dram_ctrl_bankmachine2_source_source_payload_addr;
    end
    if (((main_dram_ctrl_bankmachine2_cmd_valid & main_dram_ctrl_bankmachine2_cmd_ready) & main_dram_ctrl_bankmachine2_row_open)) begin
        main_dram_ctrl_bankmachine2_last_active_row_status <= main_dram_ctrl_bankmachine2_cmd_payload_a;
    end
    if ((main_dram_ctrl_bankmachine2_simplesyncfifo2_we & main_dram_ctrl_bankmachine2_simplesyncfifo2_writable)) begin
        main_dram_ctrl_bankmachine2_w_cnt <= (main_dram_ctrl_bankmachine2_w_cnt + 1'd1);
    end
    if (main_dram_ctrl_bankmachine2_do_read) begin
        main_dram_ctrl_bankmachine2_r_cnt <= (main_dram_ctrl_bankmachine2_r_cnt + 1'd1);
    end
    if (((~main_dram_ctrl_bankmachine2_pipe_valid_source_valid) | main_dram_ctrl_bankmachine2_pipe_valid_source_ready)) begin
        main_dram_ctrl_bankmachine2_pipe_valid_source_valid <= main_dram_ctrl_bankmachine2_pipe_valid_sink_valid;
        main_dram_ctrl_bankmachine2_pipe_valid_source_first <= main_dram_ctrl_bankmachine2_pipe_valid_sink_first;
        main_dram_ctrl_bankmachine2_pipe_valid_source_last <= main_dram_ctrl_bankmachine2_pipe_valid_sink_last;
        main_dram_ctrl_bankmachine2_pipe_valid_source_payload_we <= main_dram_ctrl_bankmachine2_pipe_valid_sink_payload_we;
        main_dram_ctrl_bankmachine2_pipe_valid_source_payload_addr <= main_dram_ctrl_bankmachine2_pipe_valid_sink_payload_addr;
    end
    if (main_dram_ctrl_bankmachine2_twtpcon_valid) begin
        main_dram_ctrl_bankmachine2_twtpcon_count <= (main_dram_ctrl_precharge_time_sig - 1'd1);
        main_dram_ctrl_bankmachine2_twtpcon_ready <= (main_dram_ctrl_precharge_time_sig <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine2_twtpcon_ready)) begin
            main_dram_ctrl_bankmachine2_twtpcon_count <= (main_dram_ctrl_bankmachine2_twtpcon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine2_twtpcon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine2_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine2_trccon_valid) begin
        main_dram_ctrl_bankmachine2_trccon_count <= (main_dram_ctrl_csrstorage11_storage - 1'd1);
        main_dram_ctrl_bankmachine2_trccon_ready <= (main_dram_ctrl_csrstorage11_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine2_trccon_ready)) begin
            main_dram_ctrl_bankmachine2_trccon_count <= (main_dram_ctrl_bankmachine2_trccon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine2_trccon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine2_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine2_trascon_valid) begin
        main_dram_ctrl_bankmachine2_trascon_count <= (main_dram_ctrl_csrstorage12_storage - 1'd1);
        main_dram_ctrl_bankmachine2_trascon_ready <= (main_dram_ctrl_csrstorage12_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine2_trascon_ready)) begin
            main_dram_ctrl_bankmachine2_trascon_count <= (main_dram_ctrl_bankmachine2_trascon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine2_trascon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine2_trascon_ready <= 1'd1;
            end
        end
    end
    builder_dramcoresoc_dramcore_bankmachine2_state <= builder_dramcoresoc_dramcore_bankmachine2_next_state;
    if (main_dram_ctrl_bankmachine2_timer_bankmachine2_next_value_ce) begin
        main_dram_ctrl_bankmachine2_timer <= main_dram_ctrl_bankmachine2_timer_bankmachine2_next_value;
    end
    if ((~main_dram_ctrl_bankmachine3_timer_done)) begin
        main_dram_ctrl_bankmachine3_timer <= (main_dram_ctrl_bankmachine3_timer - 1'd1);
    end
    if ((main_dram_ctrl_bankmachine3_sink_sink_ready & main_dram_ctrl_bankmachine3_sink_sink_valid)) begin
        main_dram_ctrl_bankmachine3_row_hit <= (main_dram_ctrl_bankmachine3_row == main_dram_ctrl_bankmachine3_source_payload_addr[20:6]);
    end
    if (main_dram_ctrl_bankmachine3_row_hit_reeval) begin
        main_dram_ctrl_bankmachine3_row_hit <= 1'd1;
    end
    if (main_dram_ctrl_bankmachine3_row_close) begin
        main_dram_ctrl_bankmachine3_row_opened <= 1'd0;
    end else begin
        if (main_dram_ctrl_bankmachine3_row_open) begin
            main_dram_ctrl_bankmachine3_row_opened <= 1'd1;
            main_dram_ctrl_bankmachine3_row <= main_dram_ctrl_bankmachine3_source_source_payload_addr[20:6];
        end
    end
    if ((main_dram_ctrl_bankmachine3_source_source_valid & main_dram_ctrl_bankmachine3_source_source_ready)) begin
        main_dram_ctrl_bankmachine3_last_addr_status <= main_dram_ctrl_bankmachine3_source_source_payload_addr;
    end
    if (((main_dram_ctrl_bankmachine3_cmd_valid & main_dram_ctrl_bankmachine3_cmd_ready) & main_dram_ctrl_bankmachine3_row_open)) begin
        main_dram_ctrl_bankmachine3_last_active_row_status <= main_dram_ctrl_bankmachine3_cmd_payload_a;
    end
    if ((main_dram_ctrl_bankmachine3_simplesyncfifo3_we & main_dram_ctrl_bankmachine3_simplesyncfifo3_writable)) begin
        main_dram_ctrl_bankmachine3_w_cnt <= (main_dram_ctrl_bankmachine3_w_cnt + 1'd1);
    end
    if (main_dram_ctrl_bankmachine3_do_read) begin
        main_dram_ctrl_bankmachine3_r_cnt <= (main_dram_ctrl_bankmachine3_r_cnt + 1'd1);
    end
    if (((~main_dram_ctrl_bankmachine3_pipe_valid_source_valid) | main_dram_ctrl_bankmachine3_pipe_valid_source_ready)) begin
        main_dram_ctrl_bankmachine3_pipe_valid_source_valid <= main_dram_ctrl_bankmachine3_pipe_valid_sink_valid;
        main_dram_ctrl_bankmachine3_pipe_valid_source_first <= main_dram_ctrl_bankmachine3_pipe_valid_sink_first;
        main_dram_ctrl_bankmachine3_pipe_valid_source_last <= main_dram_ctrl_bankmachine3_pipe_valid_sink_last;
        main_dram_ctrl_bankmachine3_pipe_valid_source_payload_we <= main_dram_ctrl_bankmachine3_pipe_valid_sink_payload_we;
        main_dram_ctrl_bankmachine3_pipe_valid_source_payload_addr <= main_dram_ctrl_bankmachine3_pipe_valid_sink_payload_addr;
    end
    if (main_dram_ctrl_bankmachine3_twtpcon_valid) begin
        main_dram_ctrl_bankmachine3_twtpcon_count <= (main_dram_ctrl_precharge_time_sig - 1'd1);
        main_dram_ctrl_bankmachine3_twtpcon_ready <= (main_dram_ctrl_precharge_time_sig <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine3_twtpcon_ready)) begin
            main_dram_ctrl_bankmachine3_twtpcon_count <= (main_dram_ctrl_bankmachine3_twtpcon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine3_twtpcon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine3_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine3_trccon_valid) begin
        main_dram_ctrl_bankmachine3_trccon_count <= (main_dram_ctrl_csrstorage11_storage - 1'd1);
        main_dram_ctrl_bankmachine3_trccon_ready <= (main_dram_ctrl_csrstorage11_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine3_trccon_ready)) begin
            main_dram_ctrl_bankmachine3_trccon_count <= (main_dram_ctrl_bankmachine3_trccon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine3_trccon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine3_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine3_trascon_valid) begin
        main_dram_ctrl_bankmachine3_trascon_count <= (main_dram_ctrl_csrstorage12_storage - 1'd1);
        main_dram_ctrl_bankmachine3_trascon_ready <= (main_dram_ctrl_csrstorage12_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine3_trascon_ready)) begin
            main_dram_ctrl_bankmachine3_trascon_count <= (main_dram_ctrl_bankmachine3_trascon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine3_trascon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine3_trascon_ready <= 1'd1;
            end
        end
    end
    builder_dramcoresoc_dramcore_bankmachine3_state <= builder_dramcoresoc_dramcore_bankmachine3_next_state;
    if (main_dram_ctrl_bankmachine3_timer_bankmachine3_next_value_ce) begin
        main_dram_ctrl_bankmachine3_timer <= main_dram_ctrl_bankmachine3_timer_bankmachine3_next_value;
    end
    if ((~main_dram_ctrl_bankmachine4_timer_done)) begin
        main_dram_ctrl_bankmachine4_timer <= (main_dram_ctrl_bankmachine4_timer - 1'd1);
    end
    if ((main_dram_ctrl_bankmachine4_sink_sink_ready & main_dram_ctrl_bankmachine4_sink_sink_valid)) begin
        main_dram_ctrl_bankmachine4_row_hit <= (main_dram_ctrl_bankmachine4_row == main_dram_ctrl_bankmachine4_source_payload_addr[20:6]);
    end
    if (main_dram_ctrl_bankmachine4_row_hit_reeval) begin
        main_dram_ctrl_bankmachine4_row_hit <= 1'd1;
    end
    if (main_dram_ctrl_bankmachine4_row_close) begin
        main_dram_ctrl_bankmachine4_row_opened <= 1'd0;
    end else begin
        if (main_dram_ctrl_bankmachine4_row_open) begin
            main_dram_ctrl_bankmachine4_row_opened <= 1'd1;
            main_dram_ctrl_bankmachine4_row <= main_dram_ctrl_bankmachine4_source_source_payload_addr[20:6];
        end
    end
    if ((main_dram_ctrl_bankmachine4_source_source_valid & main_dram_ctrl_bankmachine4_source_source_ready)) begin
        main_dram_ctrl_bankmachine4_last_addr_status <= main_dram_ctrl_bankmachine4_source_source_payload_addr;
    end
    if (((main_dram_ctrl_bankmachine4_cmd_valid & main_dram_ctrl_bankmachine4_cmd_ready) & main_dram_ctrl_bankmachine4_row_open)) begin
        main_dram_ctrl_bankmachine4_last_active_row_status <= main_dram_ctrl_bankmachine4_cmd_payload_a;
    end
    if ((main_dram_ctrl_bankmachine4_simplesyncfifo4_we & main_dram_ctrl_bankmachine4_simplesyncfifo4_writable)) begin
        main_dram_ctrl_bankmachine4_w_cnt <= (main_dram_ctrl_bankmachine4_w_cnt + 1'd1);
    end
    if (main_dram_ctrl_bankmachine4_do_read) begin
        main_dram_ctrl_bankmachine4_r_cnt <= (main_dram_ctrl_bankmachine4_r_cnt + 1'd1);
    end
    if (((~main_dram_ctrl_bankmachine4_pipe_valid_source_valid) | main_dram_ctrl_bankmachine4_pipe_valid_source_ready)) begin
        main_dram_ctrl_bankmachine4_pipe_valid_source_valid <= main_dram_ctrl_bankmachine4_pipe_valid_sink_valid;
        main_dram_ctrl_bankmachine4_pipe_valid_source_first <= main_dram_ctrl_bankmachine4_pipe_valid_sink_first;
        main_dram_ctrl_bankmachine4_pipe_valid_source_last <= main_dram_ctrl_bankmachine4_pipe_valid_sink_last;
        main_dram_ctrl_bankmachine4_pipe_valid_source_payload_we <= main_dram_ctrl_bankmachine4_pipe_valid_sink_payload_we;
        main_dram_ctrl_bankmachine4_pipe_valid_source_payload_addr <= main_dram_ctrl_bankmachine4_pipe_valid_sink_payload_addr;
    end
    if (main_dram_ctrl_bankmachine4_twtpcon_valid) begin
        main_dram_ctrl_bankmachine4_twtpcon_count <= (main_dram_ctrl_precharge_time_sig - 1'd1);
        main_dram_ctrl_bankmachine4_twtpcon_ready <= (main_dram_ctrl_precharge_time_sig <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine4_twtpcon_ready)) begin
            main_dram_ctrl_bankmachine4_twtpcon_count <= (main_dram_ctrl_bankmachine4_twtpcon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine4_twtpcon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine4_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine4_trccon_valid) begin
        main_dram_ctrl_bankmachine4_trccon_count <= (main_dram_ctrl_csrstorage11_storage - 1'd1);
        main_dram_ctrl_bankmachine4_trccon_ready <= (main_dram_ctrl_csrstorage11_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine4_trccon_ready)) begin
            main_dram_ctrl_bankmachine4_trccon_count <= (main_dram_ctrl_bankmachine4_trccon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine4_trccon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine4_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine4_trascon_valid) begin
        main_dram_ctrl_bankmachine4_trascon_count <= (main_dram_ctrl_csrstorage12_storage - 1'd1);
        main_dram_ctrl_bankmachine4_trascon_ready <= (main_dram_ctrl_csrstorage12_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine4_trascon_ready)) begin
            main_dram_ctrl_bankmachine4_trascon_count <= (main_dram_ctrl_bankmachine4_trascon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine4_trascon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine4_trascon_ready <= 1'd1;
            end
        end
    end
    builder_dramcoresoc_dramcore_bankmachine4_state <= builder_dramcoresoc_dramcore_bankmachine4_next_state;
    if (main_dram_ctrl_bankmachine4_timer_bankmachine4_next_value_ce) begin
        main_dram_ctrl_bankmachine4_timer <= main_dram_ctrl_bankmachine4_timer_bankmachine4_next_value;
    end
    if ((~main_dram_ctrl_bankmachine5_timer_done)) begin
        main_dram_ctrl_bankmachine5_timer <= (main_dram_ctrl_bankmachine5_timer - 1'd1);
    end
    if ((main_dram_ctrl_bankmachine5_sink_sink_ready & main_dram_ctrl_bankmachine5_sink_sink_valid)) begin
        main_dram_ctrl_bankmachine5_row_hit <= (main_dram_ctrl_bankmachine5_row == main_dram_ctrl_bankmachine5_source_payload_addr[20:6]);
    end
    if (main_dram_ctrl_bankmachine5_row_hit_reeval) begin
        main_dram_ctrl_bankmachine5_row_hit <= 1'd1;
    end
    if (main_dram_ctrl_bankmachine5_row_close) begin
        main_dram_ctrl_bankmachine5_row_opened <= 1'd0;
    end else begin
        if (main_dram_ctrl_bankmachine5_row_open) begin
            main_dram_ctrl_bankmachine5_row_opened <= 1'd1;
            main_dram_ctrl_bankmachine5_row <= main_dram_ctrl_bankmachine5_source_source_payload_addr[20:6];
        end
    end
    if ((main_dram_ctrl_bankmachine5_source_source_valid & main_dram_ctrl_bankmachine5_source_source_ready)) begin
        main_dram_ctrl_bankmachine5_last_addr_status <= main_dram_ctrl_bankmachine5_source_source_payload_addr;
    end
    if (((main_dram_ctrl_bankmachine5_cmd_valid & main_dram_ctrl_bankmachine5_cmd_ready) & main_dram_ctrl_bankmachine5_row_open)) begin
        main_dram_ctrl_bankmachine5_last_active_row_status <= main_dram_ctrl_bankmachine5_cmd_payload_a;
    end
    if ((main_dram_ctrl_bankmachine5_simplesyncfifo5_we & main_dram_ctrl_bankmachine5_simplesyncfifo5_writable)) begin
        main_dram_ctrl_bankmachine5_w_cnt <= (main_dram_ctrl_bankmachine5_w_cnt + 1'd1);
    end
    if (main_dram_ctrl_bankmachine5_do_read) begin
        main_dram_ctrl_bankmachine5_r_cnt <= (main_dram_ctrl_bankmachine5_r_cnt + 1'd1);
    end
    if (((~main_dram_ctrl_bankmachine5_pipe_valid_source_valid) | main_dram_ctrl_bankmachine5_pipe_valid_source_ready)) begin
        main_dram_ctrl_bankmachine5_pipe_valid_source_valid <= main_dram_ctrl_bankmachine5_pipe_valid_sink_valid;
        main_dram_ctrl_bankmachine5_pipe_valid_source_first <= main_dram_ctrl_bankmachine5_pipe_valid_sink_first;
        main_dram_ctrl_bankmachine5_pipe_valid_source_last <= main_dram_ctrl_bankmachine5_pipe_valid_sink_last;
        main_dram_ctrl_bankmachine5_pipe_valid_source_payload_we <= main_dram_ctrl_bankmachine5_pipe_valid_sink_payload_we;
        main_dram_ctrl_bankmachine5_pipe_valid_source_payload_addr <= main_dram_ctrl_bankmachine5_pipe_valid_sink_payload_addr;
    end
    if (main_dram_ctrl_bankmachine5_twtpcon_valid) begin
        main_dram_ctrl_bankmachine5_twtpcon_count <= (main_dram_ctrl_precharge_time_sig - 1'd1);
        main_dram_ctrl_bankmachine5_twtpcon_ready <= (main_dram_ctrl_precharge_time_sig <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine5_twtpcon_ready)) begin
            main_dram_ctrl_bankmachine5_twtpcon_count <= (main_dram_ctrl_bankmachine5_twtpcon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine5_twtpcon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine5_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine5_trccon_valid) begin
        main_dram_ctrl_bankmachine5_trccon_count <= (main_dram_ctrl_csrstorage11_storage - 1'd1);
        main_dram_ctrl_bankmachine5_trccon_ready <= (main_dram_ctrl_csrstorage11_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine5_trccon_ready)) begin
            main_dram_ctrl_bankmachine5_trccon_count <= (main_dram_ctrl_bankmachine5_trccon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine5_trccon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine5_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine5_trascon_valid) begin
        main_dram_ctrl_bankmachine5_trascon_count <= (main_dram_ctrl_csrstorage12_storage - 1'd1);
        main_dram_ctrl_bankmachine5_trascon_ready <= (main_dram_ctrl_csrstorage12_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine5_trascon_ready)) begin
            main_dram_ctrl_bankmachine5_trascon_count <= (main_dram_ctrl_bankmachine5_trascon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine5_trascon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine5_trascon_ready <= 1'd1;
            end
        end
    end
    builder_dramcoresoc_dramcore_bankmachine5_state <= builder_dramcoresoc_dramcore_bankmachine5_next_state;
    if (main_dram_ctrl_bankmachine5_timer_bankmachine5_next_value_ce) begin
        main_dram_ctrl_bankmachine5_timer <= main_dram_ctrl_bankmachine5_timer_bankmachine5_next_value;
    end
    if ((~main_dram_ctrl_bankmachine6_timer_done)) begin
        main_dram_ctrl_bankmachine6_timer <= (main_dram_ctrl_bankmachine6_timer - 1'd1);
    end
    if ((main_dram_ctrl_bankmachine6_sink_sink_ready & main_dram_ctrl_bankmachine6_sink_sink_valid)) begin
        main_dram_ctrl_bankmachine6_row_hit <= (main_dram_ctrl_bankmachine6_row == main_dram_ctrl_bankmachine6_source_payload_addr[20:6]);
    end
    if (main_dram_ctrl_bankmachine6_row_hit_reeval) begin
        main_dram_ctrl_bankmachine6_row_hit <= 1'd1;
    end
    if (main_dram_ctrl_bankmachine6_row_close) begin
        main_dram_ctrl_bankmachine6_row_opened <= 1'd0;
    end else begin
        if (main_dram_ctrl_bankmachine6_row_open) begin
            main_dram_ctrl_bankmachine6_row_opened <= 1'd1;
            main_dram_ctrl_bankmachine6_row <= main_dram_ctrl_bankmachine6_source_source_payload_addr[20:6];
        end
    end
    if ((main_dram_ctrl_bankmachine6_source_source_valid & main_dram_ctrl_bankmachine6_source_source_ready)) begin
        main_dram_ctrl_bankmachine6_last_addr_status <= main_dram_ctrl_bankmachine6_source_source_payload_addr;
    end
    if (((main_dram_ctrl_bankmachine6_cmd_valid & main_dram_ctrl_bankmachine6_cmd_ready) & main_dram_ctrl_bankmachine6_row_open)) begin
        main_dram_ctrl_bankmachine6_last_active_row_status <= main_dram_ctrl_bankmachine6_cmd_payload_a;
    end
    if ((main_dram_ctrl_bankmachine6_simplesyncfifo6_we & main_dram_ctrl_bankmachine6_simplesyncfifo6_writable)) begin
        main_dram_ctrl_bankmachine6_w_cnt <= (main_dram_ctrl_bankmachine6_w_cnt + 1'd1);
    end
    if (main_dram_ctrl_bankmachine6_do_read) begin
        main_dram_ctrl_bankmachine6_r_cnt <= (main_dram_ctrl_bankmachine6_r_cnt + 1'd1);
    end
    if (((~main_dram_ctrl_bankmachine6_pipe_valid_source_valid) | main_dram_ctrl_bankmachine6_pipe_valid_source_ready)) begin
        main_dram_ctrl_bankmachine6_pipe_valid_source_valid <= main_dram_ctrl_bankmachine6_pipe_valid_sink_valid;
        main_dram_ctrl_bankmachine6_pipe_valid_source_first <= main_dram_ctrl_bankmachine6_pipe_valid_sink_first;
        main_dram_ctrl_bankmachine6_pipe_valid_source_last <= main_dram_ctrl_bankmachine6_pipe_valid_sink_last;
        main_dram_ctrl_bankmachine6_pipe_valid_source_payload_we <= main_dram_ctrl_bankmachine6_pipe_valid_sink_payload_we;
        main_dram_ctrl_bankmachine6_pipe_valid_source_payload_addr <= main_dram_ctrl_bankmachine6_pipe_valid_sink_payload_addr;
    end
    if (main_dram_ctrl_bankmachine6_twtpcon_valid) begin
        main_dram_ctrl_bankmachine6_twtpcon_count <= (main_dram_ctrl_precharge_time_sig - 1'd1);
        main_dram_ctrl_bankmachine6_twtpcon_ready <= (main_dram_ctrl_precharge_time_sig <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine6_twtpcon_ready)) begin
            main_dram_ctrl_bankmachine6_twtpcon_count <= (main_dram_ctrl_bankmachine6_twtpcon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine6_twtpcon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine6_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine6_trccon_valid) begin
        main_dram_ctrl_bankmachine6_trccon_count <= (main_dram_ctrl_csrstorage11_storage - 1'd1);
        main_dram_ctrl_bankmachine6_trccon_ready <= (main_dram_ctrl_csrstorage11_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine6_trccon_ready)) begin
            main_dram_ctrl_bankmachine6_trccon_count <= (main_dram_ctrl_bankmachine6_trccon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine6_trccon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine6_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine6_trascon_valid) begin
        main_dram_ctrl_bankmachine6_trascon_count <= (main_dram_ctrl_csrstorage12_storage - 1'd1);
        main_dram_ctrl_bankmachine6_trascon_ready <= (main_dram_ctrl_csrstorage12_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine6_trascon_ready)) begin
            main_dram_ctrl_bankmachine6_trascon_count <= (main_dram_ctrl_bankmachine6_trascon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine6_trascon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine6_trascon_ready <= 1'd1;
            end
        end
    end
    builder_dramcoresoc_dramcore_bankmachine6_state <= builder_dramcoresoc_dramcore_bankmachine6_next_state;
    if (main_dram_ctrl_bankmachine6_timer_bankmachine6_next_value_ce) begin
        main_dram_ctrl_bankmachine6_timer <= main_dram_ctrl_bankmachine6_timer_bankmachine6_next_value;
    end
    if ((~main_dram_ctrl_bankmachine7_timer_done)) begin
        main_dram_ctrl_bankmachine7_timer <= (main_dram_ctrl_bankmachine7_timer - 1'd1);
    end
    if ((main_dram_ctrl_bankmachine7_sink_sink_ready & main_dram_ctrl_bankmachine7_sink_sink_valid)) begin
        main_dram_ctrl_bankmachine7_row_hit <= (main_dram_ctrl_bankmachine7_row == main_dram_ctrl_bankmachine7_source_payload_addr[20:6]);
    end
    if (main_dram_ctrl_bankmachine7_row_hit_reeval) begin
        main_dram_ctrl_bankmachine7_row_hit <= 1'd1;
    end
    if (main_dram_ctrl_bankmachine7_row_close) begin
        main_dram_ctrl_bankmachine7_row_opened <= 1'd0;
    end else begin
        if (main_dram_ctrl_bankmachine7_row_open) begin
            main_dram_ctrl_bankmachine7_row_opened <= 1'd1;
            main_dram_ctrl_bankmachine7_row <= main_dram_ctrl_bankmachine7_source_source_payload_addr[20:6];
        end
    end
    if ((main_dram_ctrl_bankmachine7_source_source_valid & main_dram_ctrl_bankmachine7_source_source_ready)) begin
        main_dram_ctrl_bankmachine7_last_addr_status <= main_dram_ctrl_bankmachine7_source_source_payload_addr;
    end
    if (((main_dram_ctrl_bankmachine7_cmd_valid & main_dram_ctrl_bankmachine7_cmd_ready) & main_dram_ctrl_bankmachine7_row_open)) begin
        main_dram_ctrl_bankmachine7_last_active_row_status <= main_dram_ctrl_bankmachine7_cmd_payload_a;
    end
    if ((main_dram_ctrl_bankmachine7_simplesyncfifo7_we & main_dram_ctrl_bankmachine7_simplesyncfifo7_writable)) begin
        main_dram_ctrl_bankmachine7_w_cnt <= (main_dram_ctrl_bankmachine7_w_cnt + 1'd1);
    end
    if (main_dram_ctrl_bankmachine7_do_read) begin
        main_dram_ctrl_bankmachine7_r_cnt <= (main_dram_ctrl_bankmachine7_r_cnt + 1'd1);
    end
    if (((~main_dram_ctrl_bankmachine7_pipe_valid_source_valid) | main_dram_ctrl_bankmachine7_pipe_valid_source_ready)) begin
        main_dram_ctrl_bankmachine7_pipe_valid_source_valid <= main_dram_ctrl_bankmachine7_pipe_valid_sink_valid;
        main_dram_ctrl_bankmachine7_pipe_valid_source_first <= main_dram_ctrl_bankmachine7_pipe_valid_sink_first;
        main_dram_ctrl_bankmachine7_pipe_valid_source_last <= main_dram_ctrl_bankmachine7_pipe_valid_sink_last;
        main_dram_ctrl_bankmachine7_pipe_valid_source_payload_we <= main_dram_ctrl_bankmachine7_pipe_valid_sink_payload_we;
        main_dram_ctrl_bankmachine7_pipe_valid_source_payload_addr <= main_dram_ctrl_bankmachine7_pipe_valid_sink_payload_addr;
    end
    if (main_dram_ctrl_bankmachine7_twtpcon_valid) begin
        main_dram_ctrl_bankmachine7_twtpcon_count <= (main_dram_ctrl_precharge_time_sig - 1'd1);
        main_dram_ctrl_bankmachine7_twtpcon_ready <= (main_dram_ctrl_precharge_time_sig <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine7_twtpcon_ready)) begin
            main_dram_ctrl_bankmachine7_twtpcon_count <= (main_dram_ctrl_bankmachine7_twtpcon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine7_twtpcon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine7_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine7_trccon_valid) begin
        main_dram_ctrl_bankmachine7_trccon_count <= (main_dram_ctrl_csrstorage11_storage - 1'd1);
        main_dram_ctrl_bankmachine7_trccon_ready <= (main_dram_ctrl_csrstorage11_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine7_trccon_ready)) begin
            main_dram_ctrl_bankmachine7_trccon_count <= (main_dram_ctrl_bankmachine7_trccon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine7_trccon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine7_trccon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_bankmachine7_trascon_valid) begin
        main_dram_ctrl_bankmachine7_trascon_count <= (main_dram_ctrl_csrstorage12_storage - 1'd1);
        main_dram_ctrl_bankmachine7_trascon_ready <= (main_dram_ctrl_csrstorage12_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_bankmachine7_trascon_ready)) begin
            main_dram_ctrl_bankmachine7_trascon_count <= (main_dram_ctrl_bankmachine7_trascon_count - 1'd1);
            if ((main_dram_ctrl_bankmachine7_trascon_count == 1'd1)) begin
                main_dram_ctrl_bankmachine7_trascon_ready <= 1'd1;
            end
        end
    end
    builder_dramcoresoc_dramcore_bankmachine7_state <= builder_dramcoresoc_dramcore_bankmachine7_next_state;
    if (main_dram_ctrl_bankmachine7_timer_bankmachine7_next_value_ce) begin
        main_dram_ctrl_bankmachine7_timer <= main_dram_ctrl_bankmachine7_timer_bankmachine7_next_value;
    end
    if ((~main_dram_ctrl_en0)) begin
        main_dram_ctrl_time0 <= 5'd31;
    end else begin
        if ((~main_dram_ctrl_max_time0)) begin
            main_dram_ctrl_time0 <= (main_dram_ctrl_time0 - 1'd1);
        end
    end
    if ((~main_dram_ctrl_en1)) begin
        main_dram_ctrl_time1 <= 4'd15;
    end else begin
        if ((~main_dram_ctrl_max_time1)) begin
            main_dram_ctrl_time1 <= (main_dram_ctrl_time1 - 1'd1);
        end
    end
    if (main_dram_ctrl_choose_cmd_ce) begin
        case (main_dram_ctrl_choose_cmd_grant)
            1'd0: begin
                if (main_dram_ctrl_choose_cmd_request[1]) begin
                    main_dram_ctrl_choose_cmd_grant <= 1'd1;
                end else begin
                    if (main_dram_ctrl_choose_cmd_request[2]) begin
                        main_dram_ctrl_choose_cmd_grant <= 2'd2;
                    end else begin
                        if (main_dram_ctrl_choose_cmd_request[3]) begin
                            main_dram_ctrl_choose_cmd_grant <= 2'd3;
                        end else begin
                            if (main_dram_ctrl_choose_cmd_request[4]) begin
                                main_dram_ctrl_choose_cmd_grant <= 3'd4;
                            end else begin
                                if (main_dram_ctrl_choose_cmd_request[5]) begin
                                    main_dram_ctrl_choose_cmd_grant <= 3'd5;
                                end else begin
                                    if (main_dram_ctrl_choose_cmd_request[6]) begin
                                        main_dram_ctrl_choose_cmd_grant <= 3'd6;
                                    end else begin
                                        if (main_dram_ctrl_choose_cmd_request[7]) begin
                                            main_dram_ctrl_choose_cmd_grant <= 3'd7;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (main_dram_ctrl_choose_cmd_request[2]) begin
                    main_dram_ctrl_choose_cmd_grant <= 2'd2;
                end else begin
                    if (main_dram_ctrl_choose_cmd_request[3]) begin
                        main_dram_ctrl_choose_cmd_grant <= 2'd3;
                    end else begin
                        if (main_dram_ctrl_choose_cmd_request[4]) begin
                            main_dram_ctrl_choose_cmd_grant <= 3'd4;
                        end else begin
                            if (main_dram_ctrl_choose_cmd_request[5]) begin
                                main_dram_ctrl_choose_cmd_grant <= 3'd5;
                            end else begin
                                if (main_dram_ctrl_choose_cmd_request[6]) begin
                                    main_dram_ctrl_choose_cmd_grant <= 3'd6;
                                end else begin
                                    if (main_dram_ctrl_choose_cmd_request[7]) begin
                                        main_dram_ctrl_choose_cmd_grant <= 3'd7;
                                    end else begin
                                        if (main_dram_ctrl_choose_cmd_request[0]) begin
                                            main_dram_ctrl_choose_cmd_grant <= 1'd0;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (main_dram_ctrl_choose_cmd_request[3]) begin
                    main_dram_ctrl_choose_cmd_grant <= 2'd3;
                end else begin
                    if (main_dram_ctrl_choose_cmd_request[4]) begin
                        main_dram_ctrl_choose_cmd_grant <= 3'd4;
                    end else begin
                        if (main_dram_ctrl_choose_cmd_request[5]) begin
                            main_dram_ctrl_choose_cmd_grant <= 3'd5;
                        end else begin
                            if (main_dram_ctrl_choose_cmd_request[6]) begin
                                main_dram_ctrl_choose_cmd_grant <= 3'd6;
                            end else begin
                                if (main_dram_ctrl_choose_cmd_request[7]) begin
                                    main_dram_ctrl_choose_cmd_grant <= 3'd7;
                                end else begin
                                    if (main_dram_ctrl_choose_cmd_request[0]) begin
                                        main_dram_ctrl_choose_cmd_grant <= 1'd0;
                                    end else begin
                                        if (main_dram_ctrl_choose_cmd_request[1]) begin
                                            main_dram_ctrl_choose_cmd_grant <= 1'd1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (main_dram_ctrl_choose_cmd_request[4]) begin
                    main_dram_ctrl_choose_cmd_grant <= 3'd4;
                end else begin
                    if (main_dram_ctrl_choose_cmd_request[5]) begin
                        main_dram_ctrl_choose_cmd_grant <= 3'd5;
                    end else begin
                        if (main_dram_ctrl_choose_cmd_request[6]) begin
                            main_dram_ctrl_choose_cmd_grant <= 3'd6;
                        end else begin
                            if (main_dram_ctrl_choose_cmd_request[7]) begin
                                main_dram_ctrl_choose_cmd_grant <= 3'd7;
                            end else begin
                                if (main_dram_ctrl_choose_cmd_request[0]) begin
                                    main_dram_ctrl_choose_cmd_grant <= 1'd0;
                                end else begin
                                    if (main_dram_ctrl_choose_cmd_request[1]) begin
                                        main_dram_ctrl_choose_cmd_grant <= 1'd1;
                                    end else begin
                                        if (main_dram_ctrl_choose_cmd_request[2]) begin
                                            main_dram_ctrl_choose_cmd_grant <= 2'd2;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (main_dram_ctrl_choose_cmd_request[5]) begin
                    main_dram_ctrl_choose_cmd_grant <= 3'd5;
                end else begin
                    if (main_dram_ctrl_choose_cmd_request[6]) begin
                        main_dram_ctrl_choose_cmd_grant <= 3'd6;
                    end else begin
                        if (main_dram_ctrl_choose_cmd_request[7]) begin
                            main_dram_ctrl_choose_cmd_grant <= 3'd7;
                        end else begin
                            if (main_dram_ctrl_choose_cmd_request[0]) begin
                                main_dram_ctrl_choose_cmd_grant <= 1'd0;
                            end else begin
                                if (main_dram_ctrl_choose_cmd_request[1]) begin
                                    main_dram_ctrl_choose_cmd_grant <= 1'd1;
                                end else begin
                                    if (main_dram_ctrl_choose_cmd_request[2]) begin
                                        main_dram_ctrl_choose_cmd_grant <= 2'd2;
                                    end else begin
                                        if (main_dram_ctrl_choose_cmd_request[3]) begin
                                            main_dram_ctrl_choose_cmd_grant <= 2'd3;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd5: begin
                if (main_dram_ctrl_choose_cmd_request[6]) begin
                    main_dram_ctrl_choose_cmd_grant <= 3'd6;
                end else begin
                    if (main_dram_ctrl_choose_cmd_request[7]) begin
                        main_dram_ctrl_choose_cmd_grant <= 3'd7;
                    end else begin
                        if (main_dram_ctrl_choose_cmd_request[0]) begin
                            main_dram_ctrl_choose_cmd_grant <= 1'd0;
                        end else begin
                            if (main_dram_ctrl_choose_cmd_request[1]) begin
                                main_dram_ctrl_choose_cmd_grant <= 1'd1;
                            end else begin
                                if (main_dram_ctrl_choose_cmd_request[2]) begin
                                    main_dram_ctrl_choose_cmd_grant <= 2'd2;
                                end else begin
                                    if (main_dram_ctrl_choose_cmd_request[3]) begin
                                        main_dram_ctrl_choose_cmd_grant <= 2'd3;
                                    end else begin
                                        if (main_dram_ctrl_choose_cmd_request[4]) begin
                                            main_dram_ctrl_choose_cmd_grant <= 3'd4;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd6: begin
                if (main_dram_ctrl_choose_cmd_request[7]) begin
                    main_dram_ctrl_choose_cmd_grant <= 3'd7;
                end else begin
                    if (main_dram_ctrl_choose_cmd_request[0]) begin
                        main_dram_ctrl_choose_cmd_grant <= 1'd0;
                    end else begin
                        if (main_dram_ctrl_choose_cmd_request[1]) begin
                            main_dram_ctrl_choose_cmd_grant <= 1'd1;
                        end else begin
                            if (main_dram_ctrl_choose_cmd_request[2]) begin
                                main_dram_ctrl_choose_cmd_grant <= 2'd2;
                            end else begin
                                if (main_dram_ctrl_choose_cmd_request[3]) begin
                                    main_dram_ctrl_choose_cmd_grant <= 2'd3;
                                end else begin
                                    if (main_dram_ctrl_choose_cmd_request[4]) begin
                                        main_dram_ctrl_choose_cmd_grant <= 3'd4;
                                    end else begin
                                        if (main_dram_ctrl_choose_cmd_request[5]) begin
                                            main_dram_ctrl_choose_cmd_grant <= 3'd5;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd7: begin
                if (main_dram_ctrl_choose_cmd_request[0]) begin
                    main_dram_ctrl_choose_cmd_grant <= 1'd0;
                end else begin
                    if (main_dram_ctrl_choose_cmd_request[1]) begin
                        main_dram_ctrl_choose_cmd_grant <= 1'd1;
                    end else begin
                        if (main_dram_ctrl_choose_cmd_request[2]) begin
                            main_dram_ctrl_choose_cmd_grant <= 2'd2;
                        end else begin
                            if (main_dram_ctrl_choose_cmd_request[3]) begin
                                main_dram_ctrl_choose_cmd_grant <= 2'd3;
                            end else begin
                                if (main_dram_ctrl_choose_cmd_request[4]) begin
                                    main_dram_ctrl_choose_cmd_grant <= 3'd4;
                                end else begin
                                    if (main_dram_ctrl_choose_cmd_request[5]) begin
                                        main_dram_ctrl_choose_cmd_grant <= 3'd5;
                                    end else begin
                                        if (main_dram_ctrl_choose_cmd_request[6]) begin
                                            main_dram_ctrl_choose_cmd_grant <= 3'd6;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        endcase
    end
    if (main_dram_ctrl_choose_req_ce) begin
        case (main_dram_ctrl_choose_req_grant)
            1'd0: begin
                if (main_dram_ctrl_choose_req_request[1]) begin
                    main_dram_ctrl_choose_req_grant <= 1'd1;
                end else begin
                    if (main_dram_ctrl_choose_req_request[2]) begin
                        main_dram_ctrl_choose_req_grant <= 2'd2;
                    end else begin
                        if (main_dram_ctrl_choose_req_request[3]) begin
                            main_dram_ctrl_choose_req_grant <= 2'd3;
                        end else begin
                            if (main_dram_ctrl_choose_req_request[4]) begin
                                main_dram_ctrl_choose_req_grant <= 3'd4;
                            end else begin
                                if (main_dram_ctrl_choose_req_request[5]) begin
                                    main_dram_ctrl_choose_req_grant <= 3'd5;
                                end else begin
                                    if (main_dram_ctrl_choose_req_request[6]) begin
                                        main_dram_ctrl_choose_req_grant <= 3'd6;
                                    end else begin
                                        if (main_dram_ctrl_choose_req_request[7]) begin
                                            main_dram_ctrl_choose_req_grant <= 3'd7;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (main_dram_ctrl_choose_req_request[2]) begin
                    main_dram_ctrl_choose_req_grant <= 2'd2;
                end else begin
                    if (main_dram_ctrl_choose_req_request[3]) begin
                        main_dram_ctrl_choose_req_grant <= 2'd3;
                    end else begin
                        if (main_dram_ctrl_choose_req_request[4]) begin
                            main_dram_ctrl_choose_req_grant <= 3'd4;
                        end else begin
                            if (main_dram_ctrl_choose_req_request[5]) begin
                                main_dram_ctrl_choose_req_grant <= 3'd5;
                            end else begin
                                if (main_dram_ctrl_choose_req_request[6]) begin
                                    main_dram_ctrl_choose_req_grant <= 3'd6;
                                end else begin
                                    if (main_dram_ctrl_choose_req_request[7]) begin
                                        main_dram_ctrl_choose_req_grant <= 3'd7;
                                    end else begin
                                        if (main_dram_ctrl_choose_req_request[0]) begin
                                            main_dram_ctrl_choose_req_grant <= 1'd0;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (main_dram_ctrl_choose_req_request[3]) begin
                    main_dram_ctrl_choose_req_grant <= 2'd3;
                end else begin
                    if (main_dram_ctrl_choose_req_request[4]) begin
                        main_dram_ctrl_choose_req_grant <= 3'd4;
                    end else begin
                        if (main_dram_ctrl_choose_req_request[5]) begin
                            main_dram_ctrl_choose_req_grant <= 3'd5;
                        end else begin
                            if (main_dram_ctrl_choose_req_request[6]) begin
                                main_dram_ctrl_choose_req_grant <= 3'd6;
                            end else begin
                                if (main_dram_ctrl_choose_req_request[7]) begin
                                    main_dram_ctrl_choose_req_grant <= 3'd7;
                                end else begin
                                    if (main_dram_ctrl_choose_req_request[0]) begin
                                        main_dram_ctrl_choose_req_grant <= 1'd0;
                                    end else begin
                                        if (main_dram_ctrl_choose_req_request[1]) begin
                                            main_dram_ctrl_choose_req_grant <= 1'd1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (main_dram_ctrl_choose_req_request[4]) begin
                    main_dram_ctrl_choose_req_grant <= 3'd4;
                end else begin
                    if (main_dram_ctrl_choose_req_request[5]) begin
                        main_dram_ctrl_choose_req_grant <= 3'd5;
                    end else begin
                        if (main_dram_ctrl_choose_req_request[6]) begin
                            main_dram_ctrl_choose_req_grant <= 3'd6;
                        end else begin
                            if (main_dram_ctrl_choose_req_request[7]) begin
                                main_dram_ctrl_choose_req_grant <= 3'd7;
                            end else begin
                                if (main_dram_ctrl_choose_req_request[0]) begin
                                    main_dram_ctrl_choose_req_grant <= 1'd0;
                                end else begin
                                    if (main_dram_ctrl_choose_req_request[1]) begin
                                        main_dram_ctrl_choose_req_grant <= 1'd1;
                                    end else begin
                                        if (main_dram_ctrl_choose_req_request[2]) begin
                                            main_dram_ctrl_choose_req_grant <= 2'd2;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (main_dram_ctrl_choose_req_request[5]) begin
                    main_dram_ctrl_choose_req_grant <= 3'd5;
                end else begin
                    if (main_dram_ctrl_choose_req_request[6]) begin
                        main_dram_ctrl_choose_req_grant <= 3'd6;
                    end else begin
                        if (main_dram_ctrl_choose_req_request[7]) begin
                            main_dram_ctrl_choose_req_grant <= 3'd7;
                        end else begin
                            if (main_dram_ctrl_choose_req_request[0]) begin
                                main_dram_ctrl_choose_req_grant <= 1'd0;
                            end else begin
                                if (main_dram_ctrl_choose_req_request[1]) begin
                                    main_dram_ctrl_choose_req_grant <= 1'd1;
                                end else begin
                                    if (main_dram_ctrl_choose_req_request[2]) begin
                                        main_dram_ctrl_choose_req_grant <= 2'd2;
                                    end else begin
                                        if (main_dram_ctrl_choose_req_request[3]) begin
                                            main_dram_ctrl_choose_req_grant <= 2'd3;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd5: begin
                if (main_dram_ctrl_choose_req_request[6]) begin
                    main_dram_ctrl_choose_req_grant <= 3'd6;
                end else begin
                    if (main_dram_ctrl_choose_req_request[7]) begin
                        main_dram_ctrl_choose_req_grant <= 3'd7;
                    end else begin
                        if (main_dram_ctrl_choose_req_request[0]) begin
                            main_dram_ctrl_choose_req_grant <= 1'd0;
                        end else begin
                            if (main_dram_ctrl_choose_req_request[1]) begin
                                main_dram_ctrl_choose_req_grant <= 1'd1;
                            end else begin
                                if (main_dram_ctrl_choose_req_request[2]) begin
                                    main_dram_ctrl_choose_req_grant <= 2'd2;
                                end else begin
                                    if (main_dram_ctrl_choose_req_request[3]) begin
                                        main_dram_ctrl_choose_req_grant <= 2'd3;
                                    end else begin
                                        if (main_dram_ctrl_choose_req_request[4]) begin
                                            main_dram_ctrl_choose_req_grant <= 3'd4;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd6: begin
                if (main_dram_ctrl_choose_req_request[7]) begin
                    main_dram_ctrl_choose_req_grant <= 3'd7;
                end else begin
                    if (main_dram_ctrl_choose_req_request[0]) begin
                        main_dram_ctrl_choose_req_grant <= 1'd0;
                    end else begin
                        if (main_dram_ctrl_choose_req_request[1]) begin
                            main_dram_ctrl_choose_req_grant <= 1'd1;
                        end else begin
                            if (main_dram_ctrl_choose_req_request[2]) begin
                                main_dram_ctrl_choose_req_grant <= 2'd2;
                            end else begin
                                if (main_dram_ctrl_choose_req_request[3]) begin
                                    main_dram_ctrl_choose_req_grant <= 2'd3;
                                end else begin
                                    if (main_dram_ctrl_choose_req_request[4]) begin
                                        main_dram_ctrl_choose_req_grant <= 3'd4;
                                    end else begin
                                        if (main_dram_ctrl_choose_req_request[5]) begin
                                            main_dram_ctrl_choose_req_grant <= 3'd5;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd7: begin
                if (main_dram_ctrl_choose_req_request[0]) begin
                    main_dram_ctrl_choose_req_grant <= 1'd0;
                end else begin
                    if (main_dram_ctrl_choose_req_request[1]) begin
                        main_dram_ctrl_choose_req_grant <= 1'd1;
                    end else begin
                        if (main_dram_ctrl_choose_req_request[2]) begin
                            main_dram_ctrl_choose_req_grant <= 2'd2;
                        end else begin
                            if (main_dram_ctrl_choose_req_request[3]) begin
                                main_dram_ctrl_choose_req_grant <= 2'd3;
                            end else begin
                                if (main_dram_ctrl_choose_req_request[4]) begin
                                    main_dram_ctrl_choose_req_grant <= 3'd4;
                                end else begin
                                    if (main_dram_ctrl_choose_req_request[5]) begin
                                        main_dram_ctrl_choose_req_grant <= 3'd5;
                                    end else begin
                                        if (main_dram_ctrl_choose_req_request[6]) begin
                                            main_dram_ctrl_choose_req_grant <= 3'd6;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        endcase
    end
    main_dram_ctrl_dfi_p0_cs_n <= 1'd0;
    main_dram_ctrl_dfi_p0_bank <= builder_array_muxed0;
    main_dram_ctrl_dfi_p0_address <= builder_array_muxed1;
    main_dram_ctrl_dfi_p0_cas_n <= (~builder_array_muxed2);
    main_dram_ctrl_dfi_p0_ras_n <= (~builder_array_muxed3);
    main_dram_ctrl_dfi_p0_we_n <= (~builder_array_muxed4);
    main_dram_ctrl_dfi_p0_wrdata_en <= builder_array_muxed5;
    main_dram_ctrl_dfi_p0_rddata_en <= builder_array_muxed6;
    main_dram_ctrl_dfi_p1_cs_n <= 1'd0;
    main_dram_ctrl_dfi_p1_bank <= builder_array_muxed7;
    main_dram_ctrl_dfi_p1_address <= builder_array_muxed8;
    main_dram_ctrl_dfi_p1_cas_n <= (~builder_array_muxed9);
    main_dram_ctrl_dfi_p1_ras_n <= (~builder_array_muxed10);
    main_dram_ctrl_dfi_p1_we_n <= (~builder_array_muxed11);
    main_dram_ctrl_dfi_p1_wrdata_en <= builder_array_muxed12;
    main_dram_ctrl_dfi_p1_rddata_en <= builder_array_muxed13;
    main_dram_ctrl_dfi_p2_cs_n <= 1'd0;
    main_dram_ctrl_dfi_p2_bank <= builder_array_muxed14;
    main_dram_ctrl_dfi_p2_address <= builder_array_muxed15;
    main_dram_ctrl_dfi_p2_cas_n <= (~builder_array_muxed16);
    main_dram_ctrl_dfi_p2_ras_n <= (~builder_array_muxed17);
    main_dram_ctrl_dfi_p2_we_n <= (~builder_array_muxed18);
    main_dram_ctrl_dfi_p2_wrdata_en <= builder_array_muxed19;
    main_dram_ctrl_dfi_p2_rddata_en <= builder_array_muxed20;
    main_dram_ctrl_dfi_p3_cs_n <= 1'd0;
    main_dram_ctrl_dfi_p3_bank <= builder_array_muxed21;
    main_dram_ctrl_dfi_p3_address <= builder_array_muxed22;
    main_dram_ctrl_dfi_p3_cas_n <= (~builder_array_muxed23);
    main_dram_ctrl_dfi_p3_ras_n <= (~builder_array_muxed24);
    main_dram_ctrl_dfi_p3_we_n <= (~builder_array_muxed25);
    main_dram_ctrl_dfi_p3_wrdata_en <= builder_array_muxed26;
    main_dram_ctrl_dfi_p3_rddata_en <= builder_array_muxed27;
    main_dram_ctrl_dfi_p4_cs_n <= 1'd0;
    main_dram_ctrl_dfi_p4_bank <= builder_array_muxed28;
    main_dram_ctrl_dfi_p4_address <= builder_array_muxed29;
    main_dram_ctrl_dfi_p4_cas_n <= (~builder_array_muxed30);
    main_dram_ctrl_dfi_p4_ras_n <= (~builder_array_muxed31);
    main_dram_ctrl_dfi_p4_we_n <= (~builder_array_muxed32);
    main_dram_ctrl_dfi_p4_wrdata_en <= builder_array_muxed33;
    main_dram_ctrl_dfi_p4_rddata_en <= builder_array_muxed34;
    main_dram_ctrl_dfi_p5_cs_n <= 1'd0;
    main_dram_ctrl_dfi_p5_bank <= builder_array_muxed35;
    main_dram_ctrl_dfi_p5_address <= builder_array_muxed36;
    main_dram_ctrl_dfi_p5_cas_n <= (~builder_array_muxed37);
    main_dram_ctrl_dfi_p5_ras_n <= (~builder_array_muxed38);
    main_dram_ctrl_dfi_p5_we_n <= (~builder_array_muxed39);
    main_dram_ctrl_dfi_p5_wrdata_en <= builder_array_muxed40;
    main_dram_ctrl_dfi_p5_rddata_en <= builder_array_muxed41;
    main_dram_ctrl_dfi_p6_cs_n <= 1'd0;
    main_dram_ctrl_dfi_p6_bank <= builder_array_muxed42;
    main_dram_ctrl_dfi_p6_address <= builder_array_muxed43;
    main_dram_ctrl_dfi_p6_cas_n <= (~builder_array_muxed44);
    main_dram_ctrl_dfi_p6_ras_n <= (~builder_array_muxed45);
    main_dram_ctrl_dfi_p6_we_n <= (~builder_array_muxed46);
    main_dram_ctrl_dfi_p6_wrdata_en <= builder_array_muxed47;
    main_dram_ctrl_dfi_p6_rddata_en <= builder_array_muxed48;
    main_dram_ctrl_dfi_p7_cs_n <= 1'd0;
    main_dram_ctrl_dfi_p7_bank <= builder_array_muxed49;
    main_dram_ctrl_dfi_p7_address <= builder_array_muxed50;
    main_dram_ctrl_dfi_p7_cas_n <= (~builder_array_muxed51);
    main_dram_ctrl_dfi_p7_ras_n <= (~builder_array_muxed52);
    main_dram_ctrl_dfi_p7_we_n <= (~builder_array_muxed53);
    main_dram_ctrl_dfi_p7_wrdata_en <= builder_array_muxed54;
    main_dram_ctrl_dfi_p7_rddata_en <= builder_array_muxed55;
    if (main_dram_ctrl_trrdcon_valid) begin
        main_dram_ctrl_trrdcon_count <= (main_dram_ctrl_csrstorage10_storage - 1'd1);
        main_dram_ctrl_trrdcon_ready <= (main_dram_ctrl_csrstorage10_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_trrdcon_ready)) begin
            main_dram_ctrl_trrdcon_count <= (main_dram_ctrl_trrdcon_count - 1'd1);
            if ((main_dram_ctrl_trrdcon_count == 1'd1)) begin
                main_dram_ctrl_trrdcon_ready <= 1'd1;
            end
        end
    end
    main_dram_ctrl_tfawcon_access <= (main_dram_ctrl_csrstorage6_storage - 2'd2);
    main_dram_ctrl_tfawcon_tfaw_range_last_bit <= main_dram_ctrl_tfawcon_tfaw_range_almost_last_bit;
    main_dram_ctrl_tfawcon_ready <= (((((main_dram_ctrl_tfawcon_count[2] & (main_dram_ctrl_tfawcon_tfaw_range_almost_last_bit | main_dram_ctrl_tfawcon_tfaw_range_last_bit)) | (((main_dram_ctrl_tfawcon_count[1:0] == 2'd3) & main_dram_ctrl_tfawcon_handshake) & main_dram_ctrl_tfawcon_tfaw_range_last_bit)) | ((main_dram_ctrl_tfawcon_count[1:0] == 2'd3) & (~main_dram_ctrl_tfawcon_handshake))) | ((~main_dram_ctrl_tfawcon_count[2]) & (~(main_dram_ctrl_tfawcon_count[1:0] == 2'd3)))) & main_dram_ctrl_tfawcon_rst_done);
    if ((main_dram_ctrl_tfawcon_tfaw_range_last_bit & (~main_dram_ctrl_tfawcon_handshake))) begin
        main_dram_ctrl_tfawcon_count <= (main_dram_ctrl_tfawcon_count - 1'd1);
    end else begin
        if (((~main_dram_ctrl_tfawcon_tfaw_range_last_bit) & main_dram_ctrl_tfawcon_handshake)) begin
            main_dram_ctrl_tfawcon_count <= (main_dram_ctrl_tfawcon_count + 1'd1);
        end
    end
    if ((~main_dram_ctrl_tfawcon_rst_done)) begin
        main_dram_ctrl_tfawcon_count <= 1'd0;
    end
    main_dram_ctrl_tfawcon_shift_window <= {main_dram_ctrl_tfawcon_shift_window, main_dram_ctrl_tfawcon_handshake};
    if ((~main_dram_ctrl_tfawcon_rst_done)) begin
        main_dram_ctrl_tfawcon_rst_cnt <= (main_dram_ctrl_tfawcon_rst_cnt - 1'd1);
    end
    if ((main_dram_ctrl_tfawcon_rst_cnt == 1'd0)) begin
        main_dram_ctrl_tfawcon_rst_done <= 1'd1;
    end
    if (main_dram_ctrl_tccdcon_valid) begin
        main_dram_ctrl_tccdcon_count <= (main_dram_ctrl_csrstorage7_storage - 1'd1);
        main_dram_ctrl_tccdcon_ready <= (main_dram_ctrl_csrstorage7_storage <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_tccdcon_ready)) begin
            main_dram_ctrl_tccdcon_count <= (main_dram_ctrl_tccdcon_count - 1'd1);
            if ((main_dram_ctrl_tccdcon_count == 1'd1)) begin
                main_dram_ctrl_tccdcon_ready <= 1'd1;
            end
        end
    end
    if (main_dram_ctrl_twtrcon_valid) begin
        main_dram_ctrl_twtrcon_count <= (main_dram_ctrl_twtrcon_init - 1'd1);
        main_dram_ctrl_twtrcon_ready <= (main_dram_ctrl_twtrcon_init <= 1'd1);
    end else begin
        if ((~main_dram_ctrl_twtrcon_ready)) begin
            main_dram_ctrl_twtrcon_count <= (main_dram_ctrl_twtrcon_count - 1'd1);
            if ((main_dram_ctrl_twtrcon_count == 1'd1)) begin
                main_dram_ctrl_twtrcon_ready <= 1'd1;
            end
        end
    end
    builder_dramcoresoc_dramcore_multiplexer_state <= builder_dramcoresoc_dramcore_multiplexer_next_state;
    builder_dramcoresoc_dramcore_new_master_wdata_ready0 <= ((((((((1'd0 | ((builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0) & main_dram_ctrl_interface_bank0_wdata_ready)) | ((builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0) & main_dram_ctrl_interface_bank1_wdata_ready)) | ((builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0) & main_dram_ctrl_interface_bank2_wdata_ready)) | ((builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0) & main_dram_ctrl_interface_bank3_wdata_ready)) | ((builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0) & main_dram_ctrl_interface_bank4_wdata_ready)) | ((builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0) & main_dram_ctrl_interface_bank5_wdata_ready)) | ((builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0) & main_dram_ctrl_interface_bank6_wdata_ready)) | ((builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0) & main_dram_ctrl_interface_bank7_wdata_ready));
    builder_dramcoresoc_dramcore_new_master_wdata_ready1 <= builder_dramcoresoc_dramcore_new_master_wdata_ready0;
    builder_dramcoresoc_dramcore_new_master_wdata_ready2 <= builder_dramcoresoc_dramcore_new_master_wdata_ready1;
    builder_dramcoresoc_dramcore_new_master_rdata_valid0 <= ((((((((1'd0 | ((builder_dramcoresoc_dramcore_roundrobin0_grant == 1'd0) & main_dram_ctrl_interface_bank0_rdata_valid)) | ((builder_dramcoresoc_dramcore_roundrobin1_grant == 1'd0) & main_dram_ctrl_interface_bank1_rdata_valid)) | ((builder_dramcoresoc_dramcore_roundrobin2_grant == 1'd0) & main_dram_ctrl_interface_bank2_rdata_valid)) | ((builder_dramcoresoc_dramcore_roundrobin3_grant == 1'd0) & main_dram_ctrl_interface_bank3_rdata_valid)) | ((builder_dramcoresoc_dramcore_roundrobin4_grant == 1'd0) & main_dram_ctrl_interface_bank4_rdata_valid)) | ((builder_dramcoresoc_dramcore_roundrobin5_grant == 1'd0) & main_dram_ctrl_interface_bank5_rdata_valid)) | ((builder_dramcoresoc_dramcore_roundrobin6_grant == 1'd0) & main_dram_ctrl_interface_bank6_rdata_valid)) | ((builder_dramcoresoc_dramcore_roundrobin7_grant == 1'd0) & main_dram_ctrl_interface_bank7_rdata_valid));
    builder_dramcoresoc_dramcore_new_master_rdata_valid1 <= builder_dramcoresoc_dramcore_new_master_rdata_valid0;
    builder_dramcoresoc_dramcore_new_master_rdata_valid2 <= builder_dramcoresoc_dramcore_new_master_rdata_valid1;
    builder_dramcoresoc_dramcore_new_master_rdata_valid3 <= builder_dramcoresoc_dramcore_new_master_rdata_valid2;
    builder_dramcoresoc_dramcore_new_master_rdata_valid4 <= builder_dramcoresoc_dramcore_new_master_rdata_valid3;
    builder_dramcoresoc_dramcore_new_master_rdata_valid5 <= builder_dramcoresoc_dramcore_new_master_rdata_valid4;
    builder_dramcoresoc_dramcore_new_master_rdata_valid6 <= builder_dramcoresoc_dramcore_new_master_rdata_valid5;
    builder_dramcoresoc_dramcore_new_master_rdata_valid7 <= builder_dramcoresoc_dramcore_new_master_rdata_valid6;
    builder_dramcoresoc_dramcore_new_master_rdata_valid8 <= builder_dramcoresoc_dramcore_new_master_rdata_valid7;
    builder_dramcoresoc_dramcore_new_master_rdata_valid9 <= builder_dramcoresoc_dramcore_new_master_rdata_valid8;
    builder_dramcoresoc_dramcore_new_master_rdata_valid10 <= builder_dramcoresoc_dramcore_new_master_rdata_valid9;
    if (main_litedramnativeportconverter_wdata_finished) begin
        main_litedramnativeportconverter_read_lock <= 1'd0;
        main_litedramnativeportconverter_read_unlocked <= 1'd1;
    end else begin
        if (((main_litedramnativeportconverter_rw_collision & (~main_port_cmd_valid)) & (~main_litedramnativeportconverter_read_unlocked))) begin
            main_litedramnativeportconverter_read_lock <= 1'd1;
        end
    end
    if ((main_new_port_cmd_valid & main_new_port_cmd_ready)) begin
        main_litedramnativeportconverter_read_unlocked <= 1'd0;
    end
    if ((main_litedramnativeportconverter_rdata_converter_source_valid & main_litedramnativeportconverter_rdata_converter_source_ready)) begin
        main_litedramnativeportconverter_rdata_chunk <= {main_litedramnativeportconverter_rdata_chunk[6:0], main_litedramnativeportconverter_rdata_chunk[7]};
    end
    if ((main_litedramnativeportconverter_wdata_converter_sink_valid & main_litedramnativeportconverter_wdata_converter_sink_ready)) begin
        main_litedramnativeportconverter_wdata_chunk <= {main_litedramnativeportconverter_wdata_chunk[6:0], main_litedramnativeportconverter_wdata_chunk[7]};
    end
    if (((main_litedramnativeportconverter_cmd_buffer_source_valid & main_litedramnativeportconverter_cmd_buffer_source_payload_we) & main_litedramnativeportconverter_wdata_chunk[7])) begin
        main_litedramnativeportconverter_wdata_sel <= {{4{main_litedramnativeportconverter_cmd_buffer_source_payload_sel[7]}}, {4{main_litedramnativeportconverter_cmd_buffer_source_payload_sel[6]}}, {4{main_litedramnativeportconverter_cmd_buffer_source_payload_sel[5]}}, {4{main_litedramnativeportconverter_cmd_buffer_source_payload_sel[4]}}, {4{main_litedramnativeportconverter_cmd_buffer_source_payload_sel[3]}}, {4{main_litedramnativeportconverter_cmd_buffer_source_payload_sel[2]}}, {4{main_litedramnativeportconverter_cmd_buffer_source_payload_sel[1]}}, {4{main_litedramnativeportconverter_cmd_buffer_source_payload_sel[0]}}};
    end
    builder_dramcoresoc_dramcore_state <= builder_dramcoresoc_dramcore_next_state;
    if (main_litedramnativeportconverter_cmd_addr_next_value_ce0) begin
        main_litedramnativeportconverter_cmd_addr <= main_litedramnativeportconverter_cmd_addr_next_value0;
    end
    if (main_litedramnativeportconverter_cmd_we_next_value_ce1) begin
        main_litedramnativeportconverter_cmd_we <= main_litedramnativeportconverter_cmd_we_next_value1;
    end
    if (main_litedramnativeportconverter_cmd_last_next_value_ce2) begin
        main_litedramnativeportconverter_cmd_last <= main_litedramnativeportconverter_cmd_last_next_value2;
    end
    if (main_litedramnativeportconverter_sel_next_value_ce3) begin
        main_litedramnativeportconverter_sel <= main_litedramnativeportconverter_sel_next_value3;
    end
    if (((main_litedramnativeportconverter_rdata_fifo_syncfifo_we & main_litedramnativeportconverter_rdata_fifo_syncfifo_writable) & (~main_litedramnativeportconverter_rdata_fifo_replace))) begin
        if ((main_litedramnativeportconverter_rdata_fifo_produce == 3'd6)) begin
            main_litedramnativeportconverter_rdata_fifo_produce <= 1'd0;
        end else begin
            main_litedramnativeportconverter_rdata_fifo_produce <= (main_litedramnativeportconverter_rdata_fifo_produce + 1'd1);
        end
    end
    if (main_litedramnativeportconverter_rdata_fifo_do_read) begin
        if ((main_litedramnativeportconverter_rdata_fifo_consume == 3'd6)) begin
            main_litedramnativeportconverter_rdata_fifo_consume <= 1'd0;
        end else begin
            main_litedramnativeportconverter_rdata_fifo_consume <= (main_litedramnativeportconverter_rdata_fifo_consume + 1'd1);
        end
    end
    if (((main_litedramnativeportconverter_rdata_fifo_syncfifo_we & main_litedramnativeportconverter_rdata_fifo_syncfifo_writable) & (~main_litedramnativeportconverter_rdata_fifo_replace))) begin
        if ((~main_litedramnativeportconverter_rdata_fifo_do_read)) begin
            main_litedramnativeportconverter_rdata_fifo_level <= (main_litedramnativeportconverter_rdata_fifo_level + 1'd1);
        end
    end else begin
        if (main_litedramnativeportconverter_rdata_fifo_do_read) begin
            main_litedramnativeportconverter_rdata_fifo_level <= (main_litedramnativeportconverter_rdata_fifo_level - 1'd1);
        end
    end
    if ((main_litedramnativeportconverter_rdata_converter_converter_source_valid & main_litedramnativeportconverter_rdata_converter_converter_source_ready)) begin
        if (main_litedramnativeportconverter_rdata_converter_converter_last) begin
            main_litedramnativeportconverter_rdata_converter_converter_mux <= 1'd0;
        end else begin
            main_litedramnativeportconverter_rdata_converter_converter_mux <= (main_litedramnativeportconverter_rdata_converter_converter_mux + 1'd1);
        end
    end
    if (main_litedramnativeportconverter_wdata_converter_converter_source_ready) begin
        main_litedramnativeportconverter_wdata_converter_converter_strobe_all <= 1'd0;
    end
    if (main_litedramnativeportconverter_wdata_converter_converter_load_part) begin
        if (((main_litedramnativeportconverter_wdata_converter_converter_demux == 3'd7) | main_litedramnativeportconverter_wdata_converter_converter_sink_last)) begin
            main_litedramnativeportconverter_wdata_converter_converter_demux <= 1'd0;
            main_litedramnativeportconverter_wdata_converter_converter_strobe_all <= 1'd1;
        end else begin
            main_litedramnativeportconverter_wdata_converter_converter_demux <= (main_litedramnativeportconverter_wdata_converter_converter_demux + 1'd1);
        end
    end
    if ((main_litedramnativeportconverter_wdata_converter_converter_source_valid & main_litedramnativeportconverter_wdata_converter_converter_source_ready)) begin
        if ((main_litedramnativeportconverter_wdata_converter_converter_sink_valid & main_litedramnativeportconverter_wdata_converter_converter_sink_ready)) begin
            main_litedramnativeportconverter_wdata_converter_converter_source_first <= main_litedramnativeportconverter_wdata_converter_converter_sink_first;
            main_litedramnativeportconverter_wdata_converter_converter_source_last <= main_litedramnativeportconverter_wdata_converter_converter_sink_last;
        end else begin
            main_litedramnativeportconverter_wdata_converter_converter_source_first <= 1'd0;
            main_litedramnativeportconverter_wdata_converter_converter_source_last <= 1'd0;
        end
    end else begin
        if ((main_litedramnativeportconverter_wdata_converter_converter_sink_valid & main_litedramnativeportconverter_wdata_converter_converter_sink_ready)) begin
            main_litedramnativeportconverter_wdata_converter_converter_source_first <= (main_litedramnativeportconverter_wdata_converter_converter_sink_first | main_litedramnativeportconverter_wdata_converter_converter_source_first);
            main_litedramnativeportconverter_wdata_converter_converter_source_last <= (main_litedramnativeportconverter_wdata_converter_converter_sink_last | main_litedramnativeportconverter_wdata_converter_converter_source_last);
        end
    end
    if (main_litedramnativeportconverter_wdata_converter_converter_load_part) begin
        case (main_litedramnativeportconverter_wdata_converter_converter_demux)
            1'd0: begin
                main_litedramnativeportconverter_wdata_converter_converter_source_payload_data[35:0] <= main_litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
            1'd1: begin
                main_litedramnativeportconverter_wdata_converter_converter_source_payload_data[71:36] <= main_litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
            2'd2: begin
                main_litedramnativeportconverter_wdata_converter_converter_source_payload_data[107:72] <= main_litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
            2'd3: begin
                main_litedramnativeportconverter_wdata_converter_converter_source_payload_data[143:108] <= main_litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
            3'd4: begin
                main_litedramnativeportconverter_wdata_converter_converter_source_payload_data[179:144] <= main_litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
            3'd5: begin
                main_litedramnativeportconverter_wdata_converter_converter_source_payload_data[215:180] <= main_litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
            3'd6: begin
                main_litedramnativeportconverter_wdata_converter_converter_source_payload_data[251:216] <= main_litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
            3'd7: begin
                main_litedramnativeportconverter_wdata_converter_converter_source_payload_data[287:252] <= main_litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
        endcase
    end
    if (main_litedramnativeportconverter_wdata_converter_converter_load_part) begin
        main_litedramnativeportconverter_wdata_converter_converter_source_payload_valid_token_count <= (main_litedramnativeportconverter_wdata_converter_converter_demux + 1'd1);
    end
    if (((main_litedramnativeportconverter_wdata_fifo_syncfifo_we & main_litedramnativeportconverter_wdata_fifo_syncfifo_writable) & (~main_litedramnativeportconverter_wdata_fifo_replace))) begin
        if ((main_litedramnativeportconverter_wdata_fifo_produce == 3'd6)) begin
            main_litedramnativeportconverter_wdata_fifo_produce <= 1'd0;
        end else begin
            main_litedramnativeportconverter_wdata_fifo_produce <= (main_litedramnativeportconverter_wdata_fifo_produce + 1'd1);
        end
    end
    if (main_litedramnativeportconverter_wdata_fifo_do_read) begin
        if ((main_litedramnativeportconverter_wdata_fifo_consume == 3'd6)) begin
            main_litedramnativeportconverter_wdata_fifo_consume <= 1'd0;
        end else begin
            main_litedramnativeportconverter_wdata_fifo_consume <= (main_litedramnativeportconverter_wdata_fifo_consume + 1'd1);
        end
    end
    if (((main_litedramnativeportconverter_wdata_fifo_syncfifo_we & main_litedramnativeportconverter_wdata_fifo_syncfifo_writable) & (~main_litedramnativeportconverter_wdata_fifo_replace))) begin
        if ((~main_litedramnativeportconverter_wdata_fifo_do_read)) begin
            main_litedramnativeportconverter_wdata_fifo_level <= (main_litedramnativeportconverter_wdata_fifo_level + 1'd1);
        end
    end else begin
        if (main_litedramnativeportconverter_wdata_fifo_do_read) begin
            main_litedramnativeportconverter_wdata_fifo_level <= (main_litedramnativeportconverter_wdata_fifo_level - 1'd1);
        end
    end
    if (((~main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid) | main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_ready)) begin
        main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid <= main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_valid;
        main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_first <= main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_first;
        main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_last <= main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_last;
        main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_data <= main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_data;
        main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_we <= main_litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_we;
    end
    if (main_write_w_buffer_queue) begin
        if ((~main_write_w_buffer_dequeue)) begin
            main_write_w_buffer_level2 <= (main_write_w_buffer_level2 + 1'd1);
        end
    end else begin
        if (main_write_w_buffer_dequeue) begin
            main_write_w_buffer_level2 <= (main_write_w_buffer_level2 - 1'd1);
        end
    end
    if (((~main_write_pipe_valid_source_valid) | main_write_pipe_valid_source_ready)) begin
        main_write_pipe_valid_source_valid <= main_write_pipe_valid_sink_valid;
        main_write_pipe_valid_source_first <= main_write_pipe_valid_sink_first;
        main_write_pipe_valid_source_last <= main_write_pipe_valid_sink_last;
        main_write_pipe_valid_source_payload_addr <= main_write_pipe_valid_sink_payload_addr;
        main_write_pipe_valid_source_payload_burst <= main_write_pipe_valid_sink_payload_burst;
        main_write_pipe_valid_source_payload_len <= main_write_pipe_valid_sink_payload_len;
        main_write_pipe_valid_source_payload_size <= main_write_pipe_valid_sink_payload_size;
        main_write_pipe_valid_source_payload_lock <= main_write_pipe_valid_sink_payload_lock;
        main_write_pipe_valid_source_payload_prot <= main_write_pipe_valid_sink_payload_prot;
        main_write_pipe_valid_source_payload_cache <= main_write_pipe_valid_sink_payload_cache;
        main_write_pipe_valid_source_payload_qos <= main_write_pipe_valid_sink_payload_qos;
        main_write_pipe_valid_source_payload_region <= main_write_pipe_valid_sink_payload_region;
        main_write_pipe_valid_source_param_id <= main_write_pipe_valid_sink_param_id;
        main_write_pipe_valid_source_param_dest <= main_write_pipe_valid_sink_param_dest;
        main_write_pipe_valid_source_param_user <= main_write_pipe_valid_sink_param_user;
    end
    if ((main_write_aw_valid & main_write_aw_ready)) begin
        if (main_write_aw_last) begin
            main_write_beat_count <= 1'd0;
            main_write_beat_offset <= 1'd0;
        end else begin
            main_write_beat_count <= (main_write_beat_count + 1'd1);
            if ((((main_write_source_source_payload_burst == 1'd1) & 1'd1) | ((main_write_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_write_beat_offset <= (main_write_beat_offset + $signed({1'd0, main_write_beat_size}));
            end
        end
        if (((main_write_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_write_aw_payload_addr & main_write_beat_wrap) == main_write_beat_wrap)) begin
                main_write_beat_offset <= (main_write_beat_offset - $signed({1'd0, main_write_beat_wrap}));
            end
        end
    end
    if (main_write_w_buffer_syncfifo_re) begin
        main_write_w_buffer_readable <= 1'd1;
    end else begin
        if (main_write_w_buffer_re) begin
            main_write_w_buffer_readable <= 1'd0;
        end
    end
    if (((main_write_w_buffer_syncfifo_we & main_write_w_buffer_syncfifo_writable) & (~main_write_w_buffer_replace))) begin
        main_write_w_buffer_produce <= (main_write_w_buffer_produce + 1'd1);
    end
    if (main_write_w_buffer_do_read) begin
        main_write_w_buffer_consume <= (main_write_w_buffer_consume + 1'd1);
    end
    if (((main_write_w_buffer_syncfifo_we & main_write_w_buffer_syncfifo_writable) & (~main_write_w_buffer_replace))) begin
        if ((~main_write_w_buffer_do_read)) begin
            main_write_w_buffer_level0 <= (main_write_w_buffer_level0 + 1'd1);
        end
    end else begin
        if (main_write_w_buffer_do_read) begin
            main_write_w_buffer_level0 <= (main_write_w_buffer_level0 - 1'd1);
        end
    end
    if (((main_write_id_buffer_syncfifo_we & main_write_id_buffer_syncfifo_writable) & (~main_write_id_buffer_replace))) begin
        main_write_id_buffer_produce <= (main_write_id_buffer_produce + 1'd1);
    end
    if (main_write_id_buffer_do_read) begin
        main_write_id_buffer_consume <= (main_write_id_buffer_consume + 1'd1);
    end
    if (((main_write_id_buffer_syncfifo_we & main_write_id_buffer_syncfifo_writable) & (~main_write_id_buffer_replace))) begin
        if ((~main_write_id_buffer_do_read)) begin
            main_write_id_buffer_level <= (main_write_id_buffer_level + 1'd1);
        end
    end else begin
        if (main_write_id_buffer_do_read) begin
            main_write_id_buffer_level <= (main_write_id_buffer_level - 1'd1);
        end
    end
    if (((main_write_resp_buffer_syncfifo_we & main_write_resp_buffer_syncfifo_writable) & (~main_write_resp_buffer_replace))) begin
        main_write_resp_buffer_produce <= (main_write_resp_buffer_produce + 1'd1);
    end
    if (main_write_resp_buffer_do_read) begin
        main_write_resp_buffer_consume <= (main_write_resp_buffer_consume + 1'd1);
    end
    if (((main_write_resp_buffer_syncfifo_we & main_write_resp_buffer_syncfifo_writable) & (~main_write_resp_buffer_replace))) begin
        if ((~main_write_resp_buffer_do_read)) begin
            main_write_resp_buffer_level <= (main_write_resp_buffer_level + 1'd1);
        end
    end else begin
        if (main_write_resp_buffer_do_read) begin
            main_write_resp_buffer_level <= (main_write_resp_buffer_level - 1'd1);
        end
    end
    if (main_read_r_buffer_queue) begin
        if ((~main_read_r_buffer_dequeue)) begin
            main_read_r_buffer_level2 <= (main_read_r_buffer_level2 + 1'd1);
        end
    end else begin
        if (main_read_r_buffer_dequeue) begin
            main_read_r_buffer_level2 <= (main_read_r_buffer_level2 - 1'd1);
        end
    end
    if (((~main_read_pipe_valid_source_valid) | main_read_pipe_valid_source_ready)) begin
        main_read_pipe_valid_source_valid <= main_read_pipe_valid_sink_valid;
        main_read_pipe_valid_source_first <= main_read_pipe_valid_sink_first;
        main_read_pipe_valid_source_last <= main_read_pipe_valid_sink_last;
        main_read_pipe_valid_source_payload_addr <= main_read_pipe_valid_sink_payload_addr;
        main_read_pipe_valid_source_payload_burst <= main_read_pipe_valid_sink_payload_burst;
        main_read_pipe_valid_source_payload_len <= main_read_pipe_valid_sink_payload_len;
        main_read_pipe_valid_source_payload_size <= main_read_pipe_valid_sink_payload_size;
        main_read_pipe_valid_source_payload_lock <= main_read_pipe_valid_sink_payload_lock;
        main_read_pipe_valid_source_payload_prot <= main_read_pipe_valid_sink_payload_prot;
        main_read_pipe_valid_source_payload_cache <= main_read_pipe_valid_sink_payload_cache;
        main_read_pipe_valid_source_payload_qos <= main_read_pipe_valid_sink_payload_qos;
        main_read_pipe_valid_source_payload_region <= main_read_pipe_valid_sink_payload_region;
        main_read_pipe_valid_source_param_id <= main_read_pipe_valid_sink_param_id;
        main_read_pipe_valid_source_param_dest <= main_read_pipe_valid_sink_param_dest;
        main_read_pipe_valid_source_param_user <= main_read_pipe_valid_sink_param_user;
    end
    if ((main_read_ar_valid & main_read_ar_ready)) begin
        if (main_read_ar_last) begin
            main_read_beat_count <= 1'd0;
            main_read_beat_offset <= 1'd0;
        end else begin
            main_read_beat_count <= (main_read_beat_count + 1'd1);
            if ((((main_read_source_source_payload_burst == 1'd1) & 1'd1) | ((main_read_source_source_payload_burst == 2'd2) & 1'd1))) begin
                main_read_beat_offset <= (main_read_beat_offset + $signed({1'd0, main_read_beat_size}));
            end
        end
        if (((main_read_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((main_read_ar_payload_addr & main_read_beat_wrap) == main_read_beat_wrap)) begin
                main_read_beat_offset <= (main_read_beat_offset - $signed({1'd0, main_read_beat_wrap}));
            end
        end
    end
    if (main_read_r_buffer_syncfifo_re) begin
        main_read_r_buffer_readable <= 1'd1;
    end else begin
        if (main_read_r_buffer_re) begin
            main_read_r_buffer_readable <= 1'd0;
        end
    end
    if (((main_read_r_buffer_syncfifo_we & main_read_r_buffer_syncfifo_writable) & (~main_read_r_buffer_replace))) begin
        main_read_r_buffer_produce <= (main_read_r_buffer_produce + 1'd1);
    end
    if (main_read_r_buffer_do_read) begin
        main_read_r_buffer_consume <= (main_read_r_buffer_consume + 1'd1);
    end
    if (((main_read_r_buffer_syncfifo_we & main_read_r_buffer_syncfifo_writable) & (~main_read_r_buffer_replace))) begin
        if ((~main_read_r_buffer_do_read)) begin
            main_read_r_buffer_level0 <= (main_read_r_buffer_level0 + 1'd1);
        end
    end else begin
        if (main_read_r_buffer_do_read) begin
            main_read_r_buffer_level0 <= (main_read_r_buffer_level0 - 1'd1);
        end
    end
    if (((main_read_id_buffer_syncfifo_we & main_read_id_buffer_syncfifo_writable) & (~main_read_id_buffer_replace))) begin
        main_read_id_buffer_produce <= (main_read_id_buffer_produce + 1'd1);
    end
    if (main_read_id_buffer_do_read) begin
        main_read_id_buffer_consume <= (main_read_id_buffer_consume + 1'd1);
    end
    if (((main_read_id_buffer_syncfifo_we & main_read_id_buffer_syncfifo_writable) & (~main_read_id_buffer_replace))) begin
        if ((~main_read_id_buffer_do_read)) begin
            main_read_id_buffer_level <= (main_read_id_buffer_level + 1'd1);
        end
    end else begin
        if (main_read_id_buffer_do_read) begin
            main_read_id_buffer_level <= (main_read_id_buffer_level - 1'd1);
        end
    end
    if (main_ce) begin
        case (main_grant)
            1'd0: begin
                if (main_request[1]) begin
                    main_grant <= 1'd1;
                end
            end
            1'd1: begin
                if (main_request[0]) begin
                    main_grant <= 1'd0;
                end
            end
        endcase
    end
    builder_dramcoresoc_wishbone2csr_state <= builder_dramcoresoc_wishbone2csr_next_state;
    builder_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank0_sel) begin
        case (builder_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface0_bank_bus_dat_r <= builder_csrbank0_init_done0_w;
            end
            1'd1: begin
                builder_interface0_bank_bus_dat_r <= builder_csrbank0_init_error0_w;
            end
        endcase
    end
    if (builder_csrbank0_init_done0_re) begin
        main_init_done_storage <= builder_csrbank0_init_done0_r;
    end
    main_init_done_re <= builder_csrbank0_init_done0_re;
    if (builder_csrbank0_init_error0_re) begin
        main_init_error_storage <= builder_csrbank0_init_error0_r;
    end
    main_init_error_re <= builder_csrbank0_init_error0_re;
    builder_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank1_sel) begin
        case (builder_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface1_bank_bus_dat_r <= builder_csrbank1_rst0_w;
            end
            1'd1: begin
                builder_interface1_bank_bus_dat_r <= builder_csrbank1_rdphase0_w;
            end
            2'd2: begin
                builder_interface1_bank_bus_dat_r <= builder_csrbank1_wrphase0_w;
            end
        endcase
    end
    if (builder_csrbank1_rst0_re) begin
        main_ddrphy_rst_storage <= builder_csrbank1_rst0_r;
    end
    main_ddrphy_rst_re <= builder_csrbank1_rst0_re;
    if (builder_csrbank1_rdphase0_re) begin
        main_ddrphy_rdphase_storage[2:0] <= builder_csrbank1_rdphase0_r;
    end
    main_ddrphy_rdphase_re <= builder_csrbank1_rdphase0_re;
    if (builder_csrbank1_wrphase0_re) begin
        main_ddrphy_wrphase_storage[2:0] <= builder_csrbank1_wrphase0_r;
    end
    main_ddrphy_wrphase_re <= builder_csrbank1_wrphase0_re;
    builder_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank2_sel) begin
        case (builder_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_tRP0_w;
            end
            1'd1: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_tRCD0_w;
            end
            2'd2: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_tWR0_w;
            end
            2'd3: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_tWTR0_w;
            end
            3'd4: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_tREFI0_w;
            end
            3'd5: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_tRFC0_w;
            end
            3'd6: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_tFAW0_w;
            end
            3'd7: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_tCCD0_w;
            end
            4'd8: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_tCCD_WR0_w;
            end
            4'd9: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_tRTP0_w;
            end
            4'd10: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_tRRD0_w;
            end
            4'd11: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_tRC0_w;
            end
            4'd12: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_tRAS0_w;
            end
            4'd13: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_phy_ctl0_w;
            end
            4'd14: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_controller_phy_sts_w;
            end
        endcase
    end
    if (builder_csrbank2_controller_tRP0_re) begin
        main_dram_ctrl_csrstorage0_storage[2:0] <= builder_csrbank2_controller_tRP0_r;
    end
    main_dram_ctrl_csrstorage0_re <= builder_csrbank2_controller_tRP0_re;
    if (builder_csrbank2_controller_tRCD0_re) begin
        main_dram_ctrl_csrstorage1_storage[2:0] <= builder_csrbank2_controller_tRCD0_r;
    end
    main_dram_ctrl_csrstorage1_re <= builder_csrbank2_controller_tRCD0_re;
    if (builder_csrbank2_controller_tWR0_re) begin
        main_dram_ctrl_csrstorage2_storage[2:0] <= builder_csrbank2_controller_tWR0_r;
    end
    main_dram_ctrl_csrstorage2_re <= builder_csrbank2_controller_tWR0_re;
    if (builder_csrbank2_controller_tWTR0_re) begin
        main_dram_ctrl_csrstorage3_storage[2:0] <= builder_csrbank2_controller_tWTR0_r;
    end
    main_dram_ctrl_csrstorage3_re <= builder_csrbank2_controller_tWTR0_re;
    if (builder_csrbank2_controller_tREFI0_re) begin
        main_dram_ctrl_csrstorage4_storage[8:0] <= builder_csrbank2_controller_tREFI0_r;
    end
    main_dram_ctrl_csrstorage4_re <= builder_csrbank2_controller_tREFI0_re;
    if (builder_csrbank2_controller_tRFC0_re) begin
        main_dram_ctrl_csrstorage5_storage[5:0] <= builder_csrbank2_controller_tRFC0_r;
    end
    main_dram_ctrl_csrstorage5_re <= builder_csrbank2_controller_tRFC0_re;
    if (builder_csrbank2_controller_tFAW0_re) begin
        main_dram_ctrl_csrstorage6_storage[2:0] <= builder_csrbank2_controller_tFAW0_r;
    end
    main_dram_ctrl_csrstorage6_re <= builder_csrbank2_controller_tFAW0_re;
    if (builder_csrbank2_controller_tCCD0_re) begin
        main_dram_ctrl_csrstorage7_storage[4:0] <= builder_csrbank2_controller_tCCD0_r;
    end
    main_dram_ctrl_csrstorage7_re <= builder_csrbank2_controller_tCCD0_re;
    if (builder_csrbank2_controller_tCCD_WR0_re) begin
        main_dram_ctrl_csrstorage8_storage <= builder_csrbank2_controller_tCCD_WR0_r;
    end
    main_dram_ctrl_csrstorage8_re <= builder_csrbank2_controller_tCCD_WR0_re;
    if (builder_csrbank2_controller_tRTP0_re) begin
        main_dram_ctrl_csrstorage9_storage <= builder_csrbank2_controller_tRTP0_r;
    end
    main_dram_ctrl_csrstorage9_re <= builder_csrbank2_controller_tRTP0_re;
    if (builder_csrbank2_controller_tRRD0_re) begin
        main_dram_ctrl_csrstorage10_storage[2:0] <= builder_csrbank2_controller_tRRD0_r;
    end
    main_dram_ctrl_csrstorage10_re <= builder_csrbank2_controller_tRRD0_re;
    if (builder_csrbank2_controller_tRC0_re) begin
        main_dram_ctrl_csrstorage11_storage[3:0] <= builder_csrbank2_controller_tRC0_r;
    end
    main_dram_ctrl_csrstorage11_re <= builder_csrbank2_controller_tRC0_re;
    if (builder_csrbank2_controller_tRAS0_re) begin
        main_dram_ctrl_csrstorage12_storage[2:0] <= builder_csrbank2_controller_tRAS0_r;
    end
    main_dram_ctrl_csrstorage12_re <= builder_csrbank2_controller_tRAS0_re;
    if (builder_csrbank2_controller_phy_ctl0_re) begin
        main_dram_ctrl_phy_ctl_storage <= builder_csrbank2_controller_phy_ctl0_r;
    end
    main_dram_ctrl_phy_ctl_re <= builder_csrbank2_controller_phy_ctl0_re;
    main_dram_ctrl_phy_sts_re <= builder_csrbank2_controller_phy_sts_re;
    if (sys_rst) begin
        main_ddrphy_rst_storage <= 1'd0;
        main_ddrphy_rst_re <= 1'd0;
        main_ddrphy_rdphase_storage <= 3'd6;
        main_ddrphy_rdphase_re <= 1'd0;
        main_ddrphy_wrphase_storage <= 3'd6;
        main_ddrphy_wrphase_re <= 1'd0;
        main_dram_ctrl_csrstorage0_storage <= 3'd2;
        main_dram_ctrl_csrstorage0_re <= 1'd0;
        main_dram_ctrl_csrstorage1_storage <= 3'd2;
        main_dram_ctrl_csrstorage1_re <= 1'd0;
        main_dram_ctrl_csrstorage2_storage <= 3'd2;
        main_dram_ctrl_csrstorage2_re <= 1'd0;
        main_dram_ctrl_csrstorage3_storage <= 3'd2;
        main_dram_ctrl_csrstorage3_re <= 1'd0;
        main_dram_ctrl_csrstorage4_storage <= 9'd196;
        main_dram_ctrl_csrstorage4_re <= 1'd0;
        main_dram_ctrl_csrstorage5_storage <= 6'd10;
        main_dram_ctrl_csrstorage5_re <= 1'd0;
        main_dram_ctrl_csrstorage6_storage <= 3'd3;
        main_dram_ctrl_csrstorage6_re <= 1'd0;
        main_dram_ctrl_csrstorage7_storage <= 5'd8;
        main_dram_ctrl_csrstorage7_re <= 1'd0;
        main_dram_ctrl_csrstorage8_storage <= 1'd0;
        main_dram_ctrl_csrstorage8_re <= 1'd0;
        main_dram_ctrl_csrstorage9_storage <= 1'd0;
        main_dram_ctrl_csrstorage9_re <= 1'd0;
        main_dram_ctrl_csrstorage10_storage <= 3'd2;
        main_dram_ctrl_csrstorage10_re <= 1'd0;
        main_dram_ctrl_csrstorage11_storage <= 4'd4;
        main_dram_ctrl_csrstorage11_re <= 1'd0;
        main_dram_ctrl_csrstorage12_storage <= 3'd3;
        main_dram_ctrl_csrstorage12_re <= 1'd0;
        main_dram_ctrl_phy_ctl_storage <= 1'd0;
        main_dram_ctrl_phy_ctl_re <= 1'd0;
        main_dram_ctrl_init_done <= 1'd0;
        main_dram_ctrl_phy_sts_re <= 1'd0;
        main_dram_ctrl_dfi_p0_address <= 15'd0;
        main_dram_ctrl_dfi_p0_bank <= 3'd0;
        main_dram_ctrl_dfi_p0_cas_n <= 1'd1;
        main_dram_ctrl_dfi_p0_cs_n <= 1'd1;
        main_dram_ctrl_dfi_p0_ras_n <= 1'd1;
        main_dram_ctrl_dfi_p0_we_n <= 1'd1;
        main_dram_ctrl_dfi_p0_wrdata_en <= 1'd0;
        main_dram_ctrl_dfi_p0_rddata_en <= 1'd0;
        main_dram_ctrl_dfi_p1_address <= 15'd0;
        main_dram_ctrl_dfi_p1_bank <= 3'd0;
        main_dram_ctrl_dfi_p1_cas_n <= 1'd1;
        main_dram_ctrl_dfi_p1_cs_n <= 1'd1;
        main_dram_ctrl_dfi_p1_ras_n <= 1'd1;
        main_dram_ctrl_dfi_p1_we_n <= 1'd1;
        main_dram_ctrl_dfi_p1_wrdata_en <= 1'd0;
        main_dram_ctrl_dfi_p1_rddata_en <= 1'd0;
        main_dram_ctrl_dfi_p2_address <= 15'd0;
        main_dram_ctrl_dfi_p2_bank <= 3'd0;
        main_dram_ctrl_dfi_p2_cas_n <= 1'd1;
        main_dram_ctrl_dfi_p2_cs_n <= 1'd1;
        main_dram_ctrl_dfi_p2_ras_n <= 1'd1;
        main_dram_ctrl_dfi_p2_we_n <= 1'd1;
        main_dram_ctrl_dfi_p2_wrdata_en <= 1'd0;
        main_dram_ctrl_dfi_p2_rddata_en <= 1'd0;
        main_dram_ctrl_dfi_p3_address <= 15'd0;
        main_dram_ctrl_dfi_p3_bank <= 3'd0;
        main_dram_ctrl_dfi_p3_cas_n <= 1'd1;
        main_dram_ctrl_dfi_p3_cs_n <= 1'd1;
        main_dram_ctrl_dfi_p3_ras_n <= 1'd1;
        main_dram_ctrl_dfi_p3_we_n <= 1'd1;
        main_dram_ctrl_dfi_p3_wrdata_en <= 1'd0;
        main_dram_ctrl_dfi_p3_rddata_en <= 1'd0;
        main_dram_ctrl_dfi_p4_address <= 15'd0;
        main_dram_ctrl_dfi_p4_bank <= 3'd0;
        main_dram_ctrl_dfi_p4_cas_n <= 1'd1;
        main_dram_ctrl_dfi_p4_cs_n <= 1'd1;
        main_dram_ctrl_dfi_p4_ras_n <= 1'd1;
        main_dram_ctrl_dfi_p4_we_n <= 1'd1;
        main_dram_ctrl_dfi_p4_wrdata_en <= 1'd0;
        main_dram_ctrl_dfi_p4_rddata_en <= 1'd0;
        main_dram_ctrl_dfi_p5_address <= 15'd0;
        main_dram_ctrl_dfi_p5_bank <= 3'd0;
        main_dram_ctrl_dfi_p5_cas_n <= 1'd1;
        main_dram_ctrl_dfi_p5_cs_n <= 1'd1;
        main_dram_ctrl_dfi_p5_ras_n <= 1'd1;
        main_dram_ctrl_dfi_p5_we_n <= 1'd1;
        main_dram_ctrl_dfi_p5_wrdata_en <= 1'd0;
        main_dram_ctrl_dfi_p5_rddata_en <= 1'd0;
        main_dram_ctrl_dfi_p6_address <= 15'd0;
        main_dram_ctrl_dfi_p6_bank <= 3'd0;
        main_dram_ctrl_dfi_p6_cas_n <= 1'd1;
        main_dram_ctrl_dfi_p6_cs_n <= 1'd1;
        main_dram_ctrl_dfi_p6_ras_n <= 1'd1;
        main_dram_ctrl_dfi_p6_we_n <= 1'd1;
        main_dram_ctrl_dfi_p6_wrdata_en <= 1'd0;
        main_dram_ctrl_dfi_p6_rddata_en <= 1'd0;
        main_dram_ctrl_dfi_p7_address <= 15'd0;
        main_dram_ctrl_dfi_p7_bank <= 3'd0;
        main_dram_ctrl_dfi_p7_cas_n <= 1'd1;
        main_dram_ctrl_dfi_p7_cs_n <= 1'd1;
        main_dram_ctrl_dfi_p7_ras_n <= 1'd1;
        main_dram_ctrl_dfi_p7_we_n <= 1'd1;
        main_dram_ctrl_dfi_p7_wrdata_en <= 1'd0;
        main_dram_ctrl_dfi_p7_rddata_en <= 1'd0;
        main_dram_ctrl_cmd_payload_a <= 15'd0;
        main_dram_ctrl_cmd_payload_ba <= 3'd0;
        main_dram_ctrl_cmd_payload_cas <= 1'd0;
        main_dram_ctrl_cmd_payload_ras <= 1'd0;
        main_dram_ctrl_cmd_payload_we <= 1'd0;
        main_dram_ctrl_timer_count1 <= 9'd0;
        main_dram_ctrl_postponer_req_o <= 1'd0;
        main_dram_ctrl_postponer_count <= 1'd0;
        main_dram_ctrl_sequencer_done0 <= 1'd0;
        main_dram_ctrl_sequencer_start1 <= 1'd0;
        main_dram_ctrl_sequencer_done1 <= 1'd0;
        main_dram_ctrl_sequencer_counter0 <= 7'd0;
        main_dram_ctrl_sequencer_counter1 <= 7'd0;
        main_dram_ctrl_sequencer_count <= 1'd0;
        main_dram_ctrl_precharge_time_sig <= 4'd0;
        main_dram_ctrl_bankmachine0_timer <= 4'd0;
        main_dram_ctrl_bankmachine0_w_cnt <= 5'd0;
        main_dram_ctrl_bankmachine0_r_cnt <= 5'd0;
        main_dram_ctrl_bankmachine0_pipe_valid_source_valid <= 1'd0;
        main_dram_ctrl_bankmachine0_pipe_valid_source_payload_we <= 1'd0;
        main_dram_ctrl_bankmachine0_pipe_valid_source_payload_addr <= 21'd0;
        main_dram_ctrl_bankmachine0_row <= 15'd0;
        main_dram_ctrl_bankmachine0_row_opened <= 1'd0;
        main_dram_ctrl_bankmachine0_row_hit <= 1'd0;
        main_dram_ctrl_bankmachine0_twtpcon_ready <= 1'd1;
        main_dram_ctrl_bankmachine0_twtpcon_count <= 4'd0;
        main_dram_ctrl_bankmachine0_trccon_ready <= 1'd1;
        main_dram_ctrl_bankmachine0_trccon_count <= 4'd4;
        main_dram_ctrl_bankmachine0_trascon_ready <= 1'd1;
        main_dram_ctrl_bankmachine0_trascon_count <= 3'd3;
        main_dram_ctrl_bankmachine0_last_addr_status <= 21'd0;
        main_dram_ctrl_bankmachine0_last_active_row_status <= 15'd0;
        main_dram_ctrl_bankmachine1_timer <= 4'd0;
        main_dram_ctrl_bankmachine1_w_cnt <= 5'd0;
        main_dram_ctrl_bankmachine1_r_cnt <= 5'd0;
        main_dram_ctrl_bankmachine1_pipe_valid_source_valid <= 1'd0;
        main_dram_ctrl_bankmachine1_pipe_valid_source_payload_we <= 1'd0;
        main_dram_ctrl_bankmachine1_pipe_valid_source_payload_addr <= 21'd0;
        main_dram_ctrl_bankmachine1_row <= 15'd0;
        main_dram_ctrl_bankmachine1_row_opened <= 1'd0;
        main_dram_ctrl_bankmachine1_row_hit <= 1'd0;
        main_dram_ctrl_bankmachine1_twtpcon_ready <= 1'd1;
        main_dram_ctrl_bankmachine1_twtpcon_count <= 4'd0;
        main_dram_ctrl_bankmachine1_trccon_ready <= 1'd1;
        main_dram_ctrl_bankmachine1_trccon_count <= 4'd4;
        main_dram_ctrl_bankmachine1_trascon_ready <= 1'd1;
        main_dram_ctrl_bankmachine1_trascon_count <= 3'd3;
        main_dram_ctrl_bankmachine1_last_addr_status <= 21'd0;
        main_dram_ctrl_bankmachine1_last_active_row_status <= 15'd0;
        main_dram_ctrl_bankmachine2_timer <= 4'd0;
        main_dram_ctrl_bankmachine2_w_cnt <= 5'd0;
        main_dram_ctrl_bankmachine2_r_cnt <= 5'd0;
        main_dram_ctrl_bankmachine2_pipe_valid_source_valid <= 1'd0;
        main_dram_ctrl_bankmachine2_pipe_valid_source_payload_we <= 1'd0;
        main_dram_ctrl_bankmachine2_pipe_valid_source_payload_addr <= 21'd0;
        main_dram_ctrl_bankmachine2_row <= 15'd0;
        main_dram_ctrl_bankmachine2_row_opened <= 1'd0;
        main_dram_ctrl_bankmachine2_row_hit <= 1'd0;
        main_dram_ctrl_bankmachine2_twtpcon_ready <= 1'd1;
        main_dram_ctrl_bankmachine2_twtpcon_count <= 4'd0;
        main_dram_ctrl_bankmachine2_trccon_ready <= 1'd1;
        main_dram_ctrl_bankmachine2_trccon_count <= 4'd4;
        main_dram_ctrl_bankmachine2_trascon_ready <= 1'd1;
        main_dram_ctrl_bankmachine2_trascon_count <= 3'd3;
        main_dram_ctrl_bankmachine2_last_addr_status <= 21'd0;
        main_dram_ctrl_bankmachine2_last_active_row_status <= 15'd0;
        main_dram_ctrl_bankmachine3_timer <= 4'd0;
        main_dram_ctrl_bankmachine3_w_cnt <= 5'd0;
        main_dram_ctrl_bankmachine3_r_cnt <= 5'd0;
        main_dram_ctrl_bankmachine3_pipe_valid_source_valid <= 1'd0;
        main_dram_ctrl_bankmachine3_pipe_valid_source_payload_we <= 1'd0;
        main_dram_ctrl_bankmachine3_pipe_valid_source_payload_addr <= 21'd0;
        main_dram_ctrl_bankmachine3_row <= 15'd0;
        main_dram_ctrl_bankmachine3_row_opened <= 1'd0;
        main_dram_ctrl_bankmachine3_row_hit <= 1'd0;
        main_dram_ctrl_bankmachine3_twtpcon_ready <= 1'd1;
        main_dram_ctrl_bankmachine3_twtpcon_count <= 4'd0;
        main_dram_ctrl_bankmachine3_trccon_ready <= 1'd1;
        main_dram_ctrl_bankmachine3_trccon_count <= 4'd4;
        main_dram_ctrl_bankmachine3_trascon_ready <= 1'd1;
        main_dram_ctrl_bankmachine3_trascon_count <= 3'd3;
        main_dram_ctrl_bankmachine3_last_addr_status <= 21'd0;
        main_dram_ctrl_bankmachine3_last_active_row_status <= 15'd0;
        main_dram_ctrl_bankmachine4_timer <= 4'd0;
        main_dram_ctrl_bankmachine4_w_cnt <= 5'd0;
        main_dram_ctrl_bankmachine4_r_cnt <= 5'd0;
        main_dram_ctrl_bankmachine4_pipe_valid_source_valid <= 1'd0;
        main_dram_ctrl_bankmachine4_pipe_valid_source_payload_we <= 1'd0;
        main_dram_ctrl_bankmachine4_pipe_valid_source_payload_addr <= 21'd0;
        main_dram_ctrl_bankmachine4_row <= 15'd0;
        main_dram_ctrl_bankmachine4_row_opened <= 1'd0;
        main_dram_ctrl_bankmachine4_row_hit <= 1'd0;
        main_dram_ctrl_bankmachine4_twtpcon_ready <= 1'd1;
        main_dram_ctrl_bankmachine4_twtpcon_count <= 4'd0;
        main_dram_ctrl_bankmachine4_trccon_ready <= 1'd1;
        main_dram_ctrl_bankmachine4_trccon_count <= 4'd4;
        main_dram_ctrl_bankmachine4_trascon_ready <= 1'd1;
        main_dram_ctrl_bankmachine4_trascon_count <= 3'd3;
        main_dram_ctrl_bankmachine4_last_addr_status <= 21'd0;
        main_dram_ctrl_bankmachine4_last_active_row_status <= 15'd0;
        main_dram_ctrl_bankmachine5_timer <= 4'd0;
        main_dram_ctrl_bankmachine5_w_cnt <= 5'd0;
        main_dram_ctrl_bankmachine5_r_cnt <= 5'd0;
        main_dram_ctrl_bankmachine5_pipe_valid_source_valid <= 1'd0;
        main_dram_ctrl_bankmachine5_pipe_valid_source_payload_we <= 1'd0;
        main_dram_ctrl_bankmachine5_pipe_valid_source_payload_addr <= 21'd0;
        main_dram_ctrl_bankmachine5_row <= 15'd0;
        main_dram_ctrl_bankmachine5_row_opened <= 1'd0;
        main_dram_ctrl_bankmachine5_row_hit <= 1'd0;
        main_dram_ctrl_bankmachine5_twtpcon_ready <= 1'd1;
        main_dram_ctrl_bankmachine5_twtpcon_count <= 4'd0;
        main_dram_ctrl_bankmachine5_trccon_ready <= 1'd1;
        main_dram_ctrl_bankmachine5_trccon_count <= 4'd4;
        main_dram_ctrl_bankmachine5_trascon_ready <= 1'd1;
        main_dram_ctrl_bankmachine5_trascon_count <= 3'd3;
        main_dram_ctrl_bankmachine5_last_addr_status <= 21'd0;
        main_dram_ctrl_bankmachine5_last_active_row_status <= 15'd0;
        main_dram_ctrl_bankmachine6_timer <= 4'd0;
        main_dram_ctrl_bankmachine6_w_cnt <= 5'd0;
        main_dram_ctrl_bankmachine6_r_cnt <= 5'd0;
        main_dram_ctrl_bankmachine6_pipe_valid_source_valid <= 1'd0;
        main_dram_ctrl_bankmachine6_pipe_valid_source_payload_we <= 1'd0;
        main_dram_ctrl_bankmachine6_pipe_valid_source_payload_addr <= 21'd0;
        main_dram_ctrl_bankmachine6_row <= 15'd0;
        main_dram_ctrl_bankmachine6_row_opened <= 1'd0;
        main_dram_ctrl_bankmachine6_row_hit <= 1'd0;
        main_dram_ctrl_bankmachine6_twtpcon_ready <= 1'd1;
        main_dram_ctrl_bankmachine6_twtpcon_count <= 4'd0;
        main_dram_ctrl_bankmachine6_trccon_ready <= 1'd1;
        main_dram_ctrl_bankmachine6_trccon_count <= 4'd4;
        main_dram_ctrl_bankmachine6_trascon_ready <= 1'd1;
        main_dram_ctrl_bankmachine6_trascon_count <= 3'd3;
        main_dram_ctrl_bankmachine6_last_addr_status <= 21'd0;
        main_dram_ctrl_bankmachine6_last_active_row_status <= 15'd0;
        main_dram_ctrl_bankmachine7_timer <= 4'd0;
        main_dram_ctrl_bankmachine7_w_cnt <= 5'd0;
        main_dram_ctrl_bankmachine7_r_cnt <= 5'd0;
        main_dram_ctrl_bankmachine7_pipe_valid_source_valid <= 1'd0;
        main_dram_ctrl_bankmachine7_pipe_valid_source_payload_we <= 1'd0;
        main_dram_ctrl_bankmachine7_pipe_valid_source_payload_addr <= 21'd0;
        main_dram_ctrl_bankmachine7_row <= 15'd0;
        main_dram_ctrl_bankmachine7_row_opened <= 1'd0;
        main_dram_ctrl_bankmachine7_row_hit <= 1'd0;
        main_dram_ctrl_bankmachine7_twtpcon_ready <= 1'd1;
        main_dram_ctrl_bankmachine7_twtpcon_count <= 4'd0;
        main_dram_ctrl_bankmachine7_trccon_ready <= 1'd1;
        main_dram_ctrl_bankmachine7_trccon_count <= 4'd4;
        main_dram_ctrl_bankmachine7_trascon_ready <= 1'd1;
        main_dram_ctrl_bankmachine7_trascon_count <= 3'd3;
        main_dram_ctrl_bankmachine7_last_addr_status <= 21'd0;
        main_dram_ctrl_bankmachine7_last_active_row_status <= 15'd0;
        main_dram_ctrl_choose_cmd_grant <= 3'd0;
        main_dram_ctrl_choose_req_grant <= 3'd0;
        main_dram_ctrl_trrdcon_ready <= 1'd1;
        main_dram_ctrl_trrdcon_count <= 3'd2;
        main_dram_ctrl_tfawcon_ready <= 1'd1;
        main_dram_ctrl_tfawcon_count <= 3'd0;
        main_dram_ctrl_tfawcon_access <= 3'd3;
        main_dram_ctrl_tfawcon_rst_cnt <= 4'd8;
        main_dram_ctrl_tfawcon_rst_done <= 1'd0;
        main_dram_ctrl_tfawcon_tfaw_range_last_bit <= 1'd0;
        main_dram_ctrl_tccdcon_ready <= 1'd1;
        main_dram_ctrl_tccdcon_count <= 5'd8;
        main_dram_ctrl_twtrcon_ready <= 1'd1;
        main_dram_ctrl_twtrcon_count <= 4'd0;
        main_dram_ctrl_time0 <= 5'd0;
        main_dram_ctrl_time1 <= 4'd0;
        main_dram_ctrl_init_start <= 1'd0;
        main_init_done_storage <= 1'd0;
        main_init_done_re <= 1'd0;
        main_init_error_storage <= 1'd0;
        main_init_error_re <= 1'd0;
        main_litedramnativeportconverter_sel <= 8'd0;
        main_litedramnativeportconverter_cmd_addr <= 27'd0;
        main_litedramnativeportconverter_cmd_we <= 1'd0;
        main_litedramnativeportconverter_cmd_last <= 1'd0;
        main_litedramnativeportconverter_read_lock <= 1'd0;
        main_litedramnativeportconverter_read_unlocked <= 1'd0;
        main_litedramnativeportconverter_rdata_fifo_level <= 3'd0;
        main_litedramnativeportconverter_rdata_fifo_produce <= 3'd0;
        main_litedramnativeportconverter_rdata_fifo_consume <= 3'd0;
        main_litedramnativeportconverter_rdata_converter_converter_mux <= 3'd0;
        main_litedramnativeportconverter_rdata_chunk <= 8'd1;
        main_litedramnativeportconverter_wdata_fifo_level <= 3'd0;
        main_litedramnativeportconverter_wdata_fifo_produce <= 3'd0;
        main_litedramnativeportconverter_wdata_fifo_consume <= 3'd0;
        main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid <= 1'd0;
        main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_data <= 256'd0;
        main_litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_we <= 32'd0;
        main_litedramnativeportconverter_wdata_converter_converter_source_payload_data <= 288'd0;
        main_litedramnativeportconverter_wdata_converter_converter_source_payload_valid_token_count <= 4'd0;
        main_litedramnativeportconverter_wdata_converter_converter_demux <= 3'd0;
        main_litedramnativeportconverter_wdata_converter_converter_strobe_all <= 1'd0;
        main_litedramnativeportconverter_wdata_chunk <= 8'd1;
        main_litedramnativeportconverter_wdata_sel <= 32'd0;
        main_write_pipe_valid_source_valid <= 1'd0;
        main_write_pipe_valid_source_payload_addr <= 29'd0;
        main_write_pipe_valid_source_payload_burst <= 2'd0;
        main_write_pipe_valid_source_payload_len <= 8'd0;
        main_write_pipe_valid_source_payload_size <= 3'd0;
        main_write_pipe_valid_source_payload_lock <= 1'd0;
        main_write_pipe_valid_source_payload_prot <= 3'd0;
        main_write_pipe_valid_source_payload_cache <= 4'd0;
        main_write_pipe_valid_source_payload_qos <= 4'd0;
        main_write_pipe_valid_source_payload_region <= 4'd0;
        main_write_beat_count <= 8'd0;
        main_write_beat_offset <= 13'd0;
        main_write_w_buffer_readable <= 1'd0;
        main_write_w_buffer_level0 <= 5'd0;
        main_write_w_buffer_produce <= 4'd0;
        main_write_w_buffer_consume <= 4'd0;
        main_write_id_buffer_level <= 5'd0;
        main_write_id_buffer_produce <= 4'd0;
        main_write_id_buffer_consume <= 4'd0;
        main_write_resp_buffer_level <= 5'd0;
        main_write_resp_buffer_produce <= 4'd0;
        main_write_resp_buffer_consume <= 4'd0;
        main_write_w_buffer_level2 <= 5'd0;
        main_read_pipe_valid_source_valid <= 1'd0;
        main_read_pipe_valid_source_payload_addr <= 29'd0;
        main_read_pipe_valid_source_payload_burst <= 2'd0;
        main_read_pipe_valid_source_payload_len <= 8'd0;
        main_read_pipe_valid_source_payload_size <= 3'd0;
        main_read_pipe_valid_source_payload_lock <= 1'd0;
        main_read_pipe_valid_source_payload_prot <= 3'd0;
        main_read_pipe_valid_source_payload_cache <= 4'd0;
        main_read_pipe_valid_source_payload_qos <= 4'd0;
        main_read_pipe_valid_source_payload_region <= 4'd0;
        main_read_beat_count <= 8'd0;
        main_read_beat_offset <= 13'd0;
        main_read_r_buffer_readable <= 1'd0;
        main_read_r_buffer_level0 <= 5'd0;
        main_read_r_buffer_produce <= 4'd0;
        main_read_r_buffer_consume <= 4'd0;
        main_read_r_buffer_level2 <= 5'd0;
        main_read_id_buffer_level <= 5'd0;
        main_read_id_buffer_produce <= 4'd0;
        main_read_id_buffer_consume <= 4'd0;
        main_grant <= 1'd0;
        builder_slave_sel_r <= 1'd0;
        builder_count <= 20'd1000000;
        builder_dramcoresoc_dramcore_refresher_state <= 2'd0;
        builder_dramcoresoc_dramcore_bankmachine0_state <= 3'd0;
        builder_dramcoresoc_dramcore_bankmachine1_state <= 3'd0;
        builder_dramcoresoc_dramcore_bankmachine2_state <= 3'd0;
        builder_dramcoresoc_dramcore_bankmachine3_state <= 3'd0;
        builder_dramcoresoc_dramcore_bankmachine4_state <= 3'd0;
        builder_dramcoresoc_dramcore_bankmachine5_state <= 3'd0;
        builder_dramcoresoc_dramcore_bankmachine6_state <= 3'd0;
        builder_dramcoresoc_dramcore_bankmachine7_state <= 3'd0;
        builder_dramcoresoc_dramcore_multiplexer_state <= 4'd0;
        builder_dramcoresoc_dramcore_state <= 2'd0;
        builder_dramcoresoc_dramcore_new_master_wdata_ready0 <= 1'd0;
        builder_dramcoresoc_dramcore_new_master_wdata_ready1 <= 1'd0;
        builder_dramcoresoc_dramcore_new_master_wdata_ready2 <= 1'd0;
        builder_dramcoresoc_dramcore_new_master_rdata_valid0 <= 1'd0;
        builder_dramcoresoc_dramcore_new_master_rdata_valid1 <= 1'd0;
        builder_dramcoresoc_dramcore_new_master_rdata_valid2 <= 1'd0;
        builder_dramcoresoc_dramcore_new_master_rdata_valid3 <= 1'd0;
        builder_dramcoresoc_dramcore_new_master_rdata_valid4 <= 1'd0;
        builder_dramcoresoc_dramcore_new_master_rdata_valid5 <= 1'd0;
        builder_dramcoresoc_dramcore_new_master_rdata_valid6 <= 1'd0;
        builder_dramcoresoc_dramcore_new_master_rdata_valid7 <= 1'd0;
        builder_dramcoresoc_dramcore_new_master_rdata_valid8 <= 1'd0;
        builder_dramcoresoc_dramcore_new_master_rdata_valid9 <= 1'd0;
        builder_dramcoresoc_dramcore_new_master_rdata_valid10 <= 1'd0;
        builder_dramcoresoc_wishbone2csr_state <= 1'd0;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

reg [23:0] storage[0:15];
reg [23:0] memdat;
always @(posedge sys_clk) begin
	if (main_dram_ctrl_bankmachine0_wrport_we)
		storage[main_dram_ctrl_bankmachine0_wrport_adr] <= main_dram_ctrl_bankmachine0_wrport_dat_w;
	if (main_dram_ctrl_bankmachine0_wrport_re)
		memdat <= storage[main_dram_ctrl_bankmachine0_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign main_dram_ctrl_bankmachine0_wrport_dat_r = memdat;
assign main_dram_ctrl_bankmachine0_rdport_dat_r = storage[main_dram_ctrl_bankmachine0_rdport_adr];

reg [23:0] storage_1[0:15];
reg [23:0] memdat_1;
always @(posedge sys_clk) begin
	if (main_dram_ctrl_bankmachine1_wrport_we)
		storage_1[main_dram_ctrl_bankmachine1_wrport_adr] <= main_dram_ctrl_bankmachine1_wrport_dat_w;
	if (main_dram_ctrl_bankmachine1_wrport_re)
		memdat_1 <= storage_1[main_dram_ctrl_bankmachine1_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign main_dram_ctrl_bankmachine1_wrport_dat_r = memdat_1;
assign main_dram_ctrl_bankmachine1_rdport_dat_r = storage_1[main_dram_ctrl_bankmachine1_rdport_adr];

reg [23:0] storage_2[0:15];
reg [23:0] memdat_2;
always @(posedge sys_clk) begin
	if (main_dram_ctrl_bankmachine2_wrport_we)
		storage_2[main_dram_ctrl_bankmachine2_wrport_adr] <= main_dram_ctrl_bankmachine2_wrport_dat_w;
	if (main_dram_ctrl_bankmachine2_wrport_re)
		memdat_2 <= storage_2[main_dram_ctrl_bankmachine2_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign main_dram_ctrl_bankmachine2_wrport_dat_r = memdat_2;
assign main_dram_ctrl_bankmachine2_rdport_dat_r = storage_2[main_dram_ctrl_bankmachine2_rdport_adr];

reg [23:0] storage_3[0:15];
reg [23:0] memdat_3;
always @(posedge sys_clk) begin
	if (main_dram_ctrl_bankmachine3_wrport_we)
		storage_3[main_dram_ctrl_bankmachine3_wrport_adr] <= main_dram_ctrl_bankmachine3_wrport_dat_w;
	if (main_dram_ctrl_bankmachine3_wrport_re)
		memdat_3 <= storage_3[main_dram_ctrl_bankmachine3_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign main_dram_ctrl_bankmachine3_wrport_dat_r = memdat_3;
assign main_dram_ctrl_bankmachine3_rdport_dat_r = storage_3[main_dram_ctrl_bankmachine3_rdport_adr];

reg [23:0] storage_4[0:15];
reg [23:0] memdat_4;
always @(posedge sys_clk) begin
	if (main_dram_ctrl_bankmachine4_wrport_we)
		storage_4[main_dram_ctrl_bankmachine4_wrport_adr] <= main_dram_ctrl_bankmachine4_wrport_dat_w;
	if (main_dram_ctrl_bankmachine4_wrport_re)
		memdat_4 <= storage_4[main_dram_ctrl_bankmachine4_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign main_dram_ctrl_bankmachine4_wrport_dat_r = memdat_4;
assign main_dram_ctrl_bankmachine4_rdport_dat_r = storage_4[main_dram_ctrl_bankmachine4_rdport_adr];

reg [23:0] storage_5[0:15];
reg [23:0] memdat_5;
always @(posedge sys_clk) begin
	if (main_dram_ctrl_bankmachine5_wrport_we)
		storage_5[main_dram_ctrl_bankmachine5_wrport_adr] <= main_dram_ctrl_bankmachine5_wrport_dat_w;
	if (main_dram_ctrl_bankmachine5_wrport_re)
		memdat_5 <= storage_5[main_dram_ctrl_bankmachine5_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign main_dram_ctrl_bankmachine5_wrport_dat_r = memdat_5;
assign main_dram_ctrl_bankmachine5_rdport_dat_r = storage_5[main_dram_ctrl_bankmachine5_rdport_adr];

reg [23:0] storage_6[0:15];
reg [23:0] memdat_6;
always @(posedge sys_clk) begin
	if (main_dram_ctrl_bankmachine6_wrport_we)
		storage_6[main_dram_ctrl_bankmachine6_wrport_adr] <= main_dram_ctrl_bankmachine6_wrport_dat_w;
	if (main_dram_ctrl_bankmachine6_wrport_re)
		memdat_6 <= storage_6[main_dram_ctrl_bankmachine6_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign main_dram_ctrl_bankmachine6_wrport_dat_r = memdat_6;
assign main_dram_ctrl_bankmachine6_rdport_dat_r = storage_6[main_dram_ctrl_bankmachine6_rdport_adr];

reg [23:0] storage_7[0:15];
reg [23:0] memdat_7;
always @(posedge sys_clk) begin
	if (main_dram_ctrl_bankmachine7_wrport_we)
		storage_7[main_dram_ctrl_bankmachine7_wrport_adr] <= main_dram_ctrl_bankmachine7_wrport_dat_w;
	if (main_dram_ctrl_bankmachine7_wrport_re)
		memdat_7 <= storage_7[main_dram_ctrl_bankmachine7_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign main_dram_ctrl_bankmachine7_wrport_dat_r = memdat_7;
assign main_dram_ctrl_bankmachine7_rdport_dat_r = storage_7[main_dram_ctrl_bankmachine7_rdport_adr];

reg [257:0] storage_8[0:6];
reg [257:0] memdat_8;
always @(posedge sys_clk) begin
	if (main_litedramnativeportconverter_rdata_fifo_wrport_we)
		storage_8[main_litedramnativeportconverter_rdata_fifo_wrport_adr] <= main_litedramnativeportconverter_rdata_fifo_wrport_dat_w;
	memdat_8 <= storage_8[main_litedramnativeportconverter_rdata_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign main_litedramnativeportconverter_rdata_fifo_wrport_dat_r = memdat_8;
assign main_litedramnativeportconverter_rdata_fifo_rdport_dat_r = storage_8[main_litedramnativeportconverter_rdata_fifo_rdport_adr];

reg [37:0] storage_9[0:6];
reg [37:0] memdat_9;
always @(posedge sys_clk) begin
	if (main_litedramnativeportconverter_wdata_fifo_wrport_we)
		storage_9[main_litedramnativeportconverter_wdata_fifo_wrport_adr] <= main_litedramnativeportconverter_wdata_fifo_wrport_dat_w;
	memdat_9 <= storage_9[main_litedramnativeportconverter_wdata_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign main_litedramnativeportconverter_wdata_fifo_wrport_dat_r = memdat_9;
assign main_litedramnativeportconverter_wdata_fifo_rdport_dat_r = storage_9[main_litedramnativeportconverter_wdata_fifo_rdport_adr];

reg [47:0] storage_10[0:15];
reg [47:0] memdat_10;
reg [47:0] memdat_11;
always @(posedge sys_clk) begin
	if (main_write_w_buffer_wrport_we)
		storage_10[main_write_w_buffer_wrport_adr] <= main_write_w_buffer_wrport_dat_w;
	memdat_10 <= storage_10[main_write_w_buffer_wrport_adr];
end

always @(posedge sys_clk) begin
	if (main_write_w_buffer_rdport_re)
		memdat_11 <= storage_10[main_write_w_buffer_rdport_adr];
end

assign main_write_w_buffer_wrport_dat_r = memdat_10;
assign main_write_w_buffer_rdport_dat_r = memdat_11;

reg [9:0] storage_11[0:15];
reg [9:0] memdat_12;
always @(posedge sys_clk) begin
	if (main_write_id_buffer_wrport_we)
		storage_11[main_write_id_buffer_wrport_adr] <= main_write_id_buffer_wrport_dat_w;
	memdat_12 <= storage_11[main_write_id_buffer_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign main_write_id_buffer_wrport_dat_r = memdat_12;
assign main_write_id_buffer_rdport_dat_r = storage_11[main_write_id_buffer_rdport_adr];

reg [11:0] storage_12[0:15];
reg [11:0] memdat_13;
always @(posedge sys_clk) begin
	if (main_write_resp_buffer_wrport_we)
		storage_12[main_write_resp_buffer_wrport_adr] <= main_write_resp_buffer_wrport_dat_w;
	memdat_13 <= storage_12[main_write_resp_buffer_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign main_write_resp_buffer_wrport_dat_r = memdat_13;
assign main_write_resp_buffer_rdport_dat_r = storage_12[main_write_resp_buffer_rdport_adr];

reg [45:0] storage_13[0:15];
reg [45:0] memdat_14;
reg [45:0] memdat_15;
always @(posedge sys_clk) begin
	if (main_read_r_buffer_wrport_we)
		storage_13[main_read_r_buffer_wrport_adr] <= main_read_r_buffer_wrport_dat_w;
	memdat_14 <= storage_13[main_read_r_buffer_wrport_adr];
end

always @(posedge sys_clk) begin
	if (main_read_r_buffer_rdport_re)
		memdat_15 <= storage_13[main_read_r_buffer_rdport_adr];
end

assign main_read_r_buffer_wrport_dat_r = memdat_14;
assign main_read_r_buffer_rdport_dat_r = memdat_15;

reg [9:0] storage_14[0:15];
reg [9:0] memdat_16;
always @(posedge sys_clk) begin
	if (main_read_id_buffer_wrport_we)
		storage_14[main_read_id_buffer_wrport_adr] <= main_read_id_buffer_wrport_dat_w;
	memdat_16 <= storage_14[main_read_id_buffer_wrport_adr];
end

always @(posedge sys_clk) begin
end

assign main_read_id_buffer_wrport_dat_r = memdat_16;
assign main_read_id_buffer_rdport_dat_r = storage_14[main_read_id_buffer_rdport_adr];

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-07-21 19:25:54.
//------------------------------------------------------------------------------
